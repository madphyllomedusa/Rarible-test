import { Program } from '@metaplex-foundation/mpl-core';
import { PublicKey } from '@solana/web3.js';
import * as errors from './generated/errors';
import * as instructions from './generated/instructions';
import * as accounts from './generated/accounts';
export declare class AuctionHouseProgram extends Program {
    static readonly PREFIX = "auction_house";
    static readonly FEE_PAYER = "fee_payer";
    static readonly TREASURY = "treasury";
    static readonly SIGNER = "signer";
    static readonly LISTINE_RECEIPT = "listing_receipt";
    static readonly BID_RECEIPT = "bid_receipt";
    static readonly PURCHASE_RECEIPT = "purchase_receipt";
    static readonly PUBKEY: PublicKey;
    static readonly instructions: typeof instructions;
    static readonly errors: typeof errors;
    static readonly accounts: typeof accounts;
    static readonly TOKEN_PROGRAM_ID: PublicKey;
    static readonly SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: PublicKey;
    static findAssociatedTokenAccountAddress(mint: PublicKey, wallet: PublicKey): Promise<[PublicKey, number]>;
    static findAuctionHouseAddress(creator: PublicKey, treasuryMint: PublicKey): Promise<[PublicKey, number]>;
    static findAuctionHouseProgramAsSignerAddress(): Promise<[PublicKey, number]>;
    static findAuctionHouseTreasuryAddress(auctionHouse: PublicKey): Promise<[PublicKey, number]>;
    static findEscrowPaymentAccountAddress(auctionHouse: PublicKey, wallet: PublicKey): Promise<[PublicKey, number]>;
    static findTradeStateAddress(wallet: PublicKey, auctionHouse: PublicKey, tokenAccount: PublicKey, treasuryMint: PublicKey, tokenMint: PublicKey, price: number, tokenSize: number): Promise<[PublicKey, number]>;
    static findPublicBidTradeStateAddress(wallet: PublicKey, auctionHouse: PublicKey, treasuryMint: PublicKey, tokenMint: PublicKey, price: number, tokenSize: number): Promise<[PublicKey, number]>;
    static findAuctionHouseFeeAddress(auctionHouse: PublicKey): Promise<[PublicKey, number]>;
    static findListingReceiptAddress(sellerTradeState: PublicKey): Promise<[PublicKey, number]>;
    static findBidReceiptAddress(buyerTradeState: PublicKey): Promise<[PublicKey, number]>;
    static findPurchaseReceiptAddress(sellerTradeState: PublicKey, buyerTradeState: PublicKey): Promise<[PublicKey, number]>;
}
