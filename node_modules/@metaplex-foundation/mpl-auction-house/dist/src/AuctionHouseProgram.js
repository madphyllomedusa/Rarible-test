"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuctionHouseProgram = void 0;
const mpl_core_1 = require("@metaplex-foundation/mpl-core");
const web3_js_1 = require("@solana/web3.js");
const errors = __importStar(require("./generated/errors"));
const instructions = __importStar(require("./generated/instructions"));
const accounts = __importStar(require("./generated/accounts"));
const bn_js_1 = __importDefault(require("bn.js"));
class AuctionHouseProgram extends mpl_core_1.Program {
    static async findAssociatedTokenAccountAddress(mint, wallet) {
        return await web3_js_1.PublicKey.findProgramAddress([wallet.toBuffer(), AuctionHouseProgram.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], AuctionHouseProgram.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID);
    }
    static async findAuctionHouseAddress(creator, treasuryMint) {
        return web3_js_1.PublicKey.findProgramAddress([
            Buffer.from(AuctionHouseProgram.PREFIX, 'utf8'),
            creator.toBuffer(),
            treasuryMint.toBuffer(),
        ], AuctionHouseProgram.PUBKEY);
    }
    static async findAuctionHouseProgramAsSignerAddress() {
        return await web3_js_1.PublicKey.findProgramAddress([
            Buffer.from(AuctionHouseProgram.PREFIX, 'utf8'),
            Buffer.from(AuctionHouseProgram.SIGNER, 'utf8'),
        ], AuctionHouseProgram.PUBKEY);
    }
    static async findAuctionHouseTreasuryAddress(auctionHouse) {
        return await web3_js_1.PublicKey.findProgramAddress([
            Buffer.from(AuctionHouseProgram.PREFIX, 'utf8'),
            auctionHouse.toBuffer(),
            Buffer.from(AuctionHouseProgram.TREASURY, 'utf8'),
        ], AuctionHouseProgram.PUBKEY);
    }
    static async findEscrowPaymentAccountAddress(auctionHouse, wallet) {
        return web3_js_1.PublicKey.findProgramAddress([Buffer.from(AuctionHouseProgram.PREFIX, 'utf8'), auctionHouse.toBuffer(), wallet.toBuffer()], AuctionHouseProgram.PUBKEY);
    }
    static async findTradeStateAddress(wallet, auctionHouse, tokenAccount, treasuryMint, tokenMint, price, tokenSize) {
        return web3_js_1.PublicKey.findProgramAddress([
            Buffer.from(AuctionHouseProgram.PREFIX, 'utf8'),
            wallet.toBuffer(),
            auctionHouse.toBuffer(),
            tokenAccount.toBuffer(),
            treasuryMint.toBuffer(),
            tokenMint.toBuffer(),
            new bn_js_1.default(price).toArrayLike(Buffer, 'le', 8),
            new bn_js_1.default(tokenSize).toArrayLike(Buffer, 'le', 8),
        ], AuctionHouseProgram.PUBKEY);
    }
    static async findPublicBidTradeStateAddress(wallet, auctionHouse, treasuryMint, tokenMint, price, tokenSize) {
        return web3_js_1.PublicKey.findProgramAddress([
            Buffer.from(AuctionHouseProgram.PREFIX, 'utf8'),
            wallet.toBuffer(),
            auctionHouse.toBuffer(),
            treasuryMint.toBuffer(),
            tokenMint.toBuffer(),
            new bn_js_1.default(price).toArrayLike(Buffer, 'le', 8),
            new bn_js_1.default(tokenSize).toArrayLike(Buffer, 'le', 8),
        ], AuctionHouseProgram.PUBKEY);
    }
    static async findAuctionHouseFeeAddress(auctionHouse) {
        return web3_js_1.PublicKey.findProgramAddress([
            Buffer.from(AuctionHouseProgram.PREFIX, 'utf8'),
            auctionHouse.toBuffer(),
            Buffer.from(AuctionHouseProgram.FEE_PAYER, 'utf8'),
        ], AuctionHouseProgram.PUBKEY);
    }
    static async findListingReceiptAddress(sellerTradeState) {
        return web3_js_1.PublicKey.findProgramAddress([Buffer.from(AuctionHouseProgram.LISTINE_RECEIPT, 'utf8'), sellerTradeState.toBuffer()], AuctionHouseProgram.PUBKEY);
    }
    static async findBidReceiptAddress(buyerTradeState) {
        return web3_js_1.PublicKey.findProgramAddress([Buffer.from(AuctionHouseProgram.BID_RECEIPT, 'utf8'), buyerTradeState.toBuffer()], AuctionHouseProgram.PUBKEY);
    }
    static async findPurchaseReceiptAddress(sellerTradeState, buyerTradeState) {
        return web3_js_1.PublicKey.findProgramAddress([
            Buffer.from(AuctionHouseProgram.PURCHASE_RECEIPT, 'utf8'),
            sellerTradeState.toBuffer(),
            buyerTradeState.toBuffer(),
        ], AuctionHouseProgram.PUBKEY);
    }
}
exports.AuctionHouseProgram = AuctionHouseProgram;
AuctionHouseProgram.PREFIX = 'auction_house';
AuctionHouseProgram.FEE_PAYER = 'fee_payer';
AuctionHouseProgram.TREASURY = 'treasury';
AuctionHouseProgram.SIGNER = 'signer';
AuctionHouseProgram.LISTINE_RECEIPT = 'listing_receipt';
AuctionHouseProgram.BID_RECEIPT = 'bid_receipt';
AuctionHouseProgram.PURCHASE_RECEIPT = 'purchase_receipt';
AuctionHouseProgram.PUBKEY = new web3_js_1.PublicKey(mpl_core_1.config.programs.auctionHouse);
AuctionHouseProgram.instructions = instructions;
AuctionHouseProgram.errors = errors;
AuctionHouseProgram.accounts = accounts;
AuctionHouseProgram.TOKEN_PROGRAM_ID = new web3_js_1.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
AuctionHouseProgram.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3_js_1.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
//# sourceMappingURL=AuctionHouseProgram.js.map