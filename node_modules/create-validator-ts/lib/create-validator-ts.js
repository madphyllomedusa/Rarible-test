"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateValidator = void 0;
const path = __importStar(require("path"));
const _fs = __importStar(require("fs"));
const ts_json_schema_generator_1 = require("ts-json-schema-generator");
const fs = _fs.promises;
async function generateValidator({ cwd, validatorGenerator, tsconfigFilePath, filePath, extraTags = [] }) {
    const absoluteFilePath = path.resolve(cwd, filePath);
    const parentFileDir = path.dirname(path.resolve(cwd, filePath));
    const fileName = path.basename(absoluteFilePath, ".ts");
    const apiTypesCode = await fs.readFile(filePath, "utf-8");
    try {
        const config = {
            path: absoluteFilePath,
            tsconfig: tsconfigFilePath,
            type: "*",
            skipTypeCheck: true,
            additionalProperties: false,
            extraTags: extraTags
        };
        const generator = ts_json_schema_generator_1.createGenerator(config);
        const schema = generator.createSchema(config.type);
        if (!schema) {
            console.warn("No schema: " + filePath);
            return;
        }
        const validatorFilePath = path.join(parentFileDir, fileName + ".validator.ts");
        const validator = validatorGenerator({
            apiFileCode: apiTypesCode,
            apiFilePath: absoluteFilePath,
            validatorFilePath,
            schema
        });
        return {
            validatorFilePath: validatorFilePath,
            code: validator
        };
    }
    catch (error) {
        console.error("Fail to parse: " + filePath, error);
        throw error;
    }
}
exports.generateValidator = generateValidator;
//# sourceMappingURL=create-validator-ts.js.map