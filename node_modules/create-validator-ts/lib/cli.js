"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.cli = void 0;
const meow_1 = __importDefault(require("meow"));
const path_1 = __importDefault(require("path"));
const index_1 = require("./index");
exports.cli = meow_1.default(`
    Usage
      $ create-validator-ts [file|glob*]
 
    Options
      --watch               [Boolean] If set the flag, start watch mode
      --check               [Boolean] If set the flag, start test mode
      --tsconfigFilePath    [Path:String] path to tsconfig.json
      --cwd                 [Path:String] current working directory
      --generatorScript     [Path:String] A JavaScript file path that customize validator code generator
      --verbose             [Boolean] If set the flag, show progressing logs

    Examples
      $ create-validator-ts "src/**/api-types.ts"
      # custom tsconfig.json
      $ create-validator-ts "src/**/api-types.ts" --tsconfigFilePath ./tsconfig.app.json
      # custom validator code
      $ create-validator-ts "src/**/api-types.ts" --generatorScript ./custom.js
`, {
    flags: {
        tsconfigFilePath: {
            type: "string",
            default: path_1.default.join(process.cwd(), "tsconfig.json")
        },
        generatorScript: {
            type: "string",
            default: path_1.default.join(__dirname, "default-code-generator")
        },
        cwd: {
            type: "string",
            default: process.cwd()
        },
        watch: {
            type: "boolean"
        },
        check: {
            type: "boolean"
        },
        verbose: {
            type: "boolean",
            default: true
        }
    },
    autoHelp: true,
    autoVersion: true
});
const run = async (input = exports.cli.input, flags = exports.cli.flags) => {
    if (flags.check) {
        await index_1.testGeneratedValidator({
            cwd: flags.cwd,
            verbose: flags.verbose,
            targetGlobs: input,
            codeGeneratorScript: flags.generatorScript,
            tsconfigFilePath: flags.tsconfigFilePath
        });
    }
    else if (flags.watch) {
        await index_1.watchValidator({
            cwd: flags.cwd,
            verbose: flags.verbose,
            targetGlobs: input,
            codeGeneratorScript: flags.generatorScript,
            tsconfigFilePath: flags.tsconfigFilePath
        });
    }
    else {
        await index_1.createValidator({
            cwd: flags.cwd,
            verbose: flags.verbose,
            targetGlobs: input,
            codeGeneratorScript: flags.generatorScript,
            tsconfigFilePath: flags.tsconfigFilePath
        });
    }
    return {
        stdout: null,
        stderr: null,
        exitStatus: 0
    };
};
exports.run = run;
//# sourceMappingURL=cli.js.map