"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createValidator = exports.testGeneratedValidator = exports.watchValidator = void 0;
const glob_watcher_1 = __importDefault(require("glob-watcher"));
const fs_1 = __importDefault(require("fs"));
const globby = __importStar(require("globby"));
const assert_1 = __importDefault(require("assert"));
const create_validator_ts_1 = require("./create-validator-ts");
const path_1 = __importDefault(require("path"));
// TODO: Node 14+
const fs = fs_1.default.promises;
async function watchValidator(options) {
    const { generator, generatorOptions = {} } = (await Promise.resolve().then(() => __importStar(require(path_1.default.resolve(options.cwd, options.codeGeneratorScript)))));
    const watcher = glob_watcher_1.default(options.targetGlobs, {
        ignoreInitial: true
    });
    return new Promise((resolve, reject) => {
        watcher.on("change", async (filePath) => {
            const result = await create_validator_ts_1.generateValidator({
                cwd: options.cwd,
                filePath: filePath,
                tsconfigFilePath: options.tsconfigFilePath,
                validatorGenerator: generator,
                extraTags: generatorOptions.extraTags || []
            });
            if (!result) {
                return;
            }
            if (options.verbose) {
                console.log("Update validator: " + result.validatorFilePath);
            }
            return fs.writeFile(result.validatorFilePath, result.code, "utf-8");
        });
        watcher.on("close", () => {
            resolve();
        });
        watcher.on("error", (error) => {
            reject(error);
        });
    });
}
exports.watchValidator = watchValidator;
// --check: validate the difference current of source
async function testGeneratedValidator(options) {
    const files = globby.sync(options.targetGlobs, {
        cwd: options.cwd,
        absolute: true
    });
    const { generator, generatorOptions = {} } = (await Promise.resolve().then(() => __importStar(require(path_1.default.resolve(options.cwd, options.codeGeneratorScript)))));
    return Promise.all(files.map(async (filePath) => {
        const result = await create_validator_ts_1.generateValidator({
            cwd: options.cwd,
            filePath: filePath,
            tsconfigFilePath: options.tsconfigFilePath,
            validatorGenerator: generator,
            extraTags: generatorOptions.extraTags || []
        });
        if (!result) {
            return;
        }
        try {
            await fs.access(result.validatorFilePath);
        }
        catch (_a) {
            return;
        }
        const oldValidatorCode = await fs.readFile(result.validatorFilePath, "utf-8");
        try {
            assert_1.default.strictEqual(oldValidatorCode, result.code);
        }
        catch (error) {
            console.error("Found diff between types and validator.\nPlease update validator: $ npx create-validator-ts " +
                filePath);
            throw error;
        }
        if (options.verbose) {
            console.log("OK: " + filePath);
        }
    }));
}
exports.testGeneratedValidator = testGeneratedValidator;
async function createValidator(options) {
    const { generator, generatorOptions = {} } = (await Promise.resolve().then(() => __importStar(require(path_1.default.resolve(options.cwd, options.codeGeneratorScript)))));
    const files = globby.sync(options.targetGlobs, {
        cwd: options.cwd,
        absolute: true
    });
    return Promise.all(files.map(async (filePath) => {
        const result = await create_validator_ts_1.generateValidator({
            cwd: options.cwd,
            filePath: filePath,
            tsconfigFilePath: options.tsconfigFilePath,
            validatorGenerator: generator,
            extraTags: generatorOptions.extraTags || []
        });
        if (!result) {
            return;
        }
        if (options.verbose) {
            console.log("Create: " + filePath);
        }
        return fs.writeFile(result.validatorFilePath, result.code, "utf-8");
    }));
}
exports.createValidator = createValidator;
//# sourceMappingURL=index.js.map