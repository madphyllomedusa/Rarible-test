"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.operationDecoderProto12 = exports.operationEncoderProto12 = exports.EndorsementSchemaProto12 = void 0;
const constants_1 = require("./constants");
exports.EndorsementSchemaProto12 = {
    slot: 'int16',
    level: 'int32',
    round: 'int32',
    block_payload_hash: 'blockPayloadHash',
};
const operationEncoderProto12 = (encoders) => (operation) => {
    if (!(operation.kind in encoders) || !(operation.kind in constants_1.kindMappingReverseProto12)) {
        throw new Error(`Unsupported operation kind: ${operation.kind}`);
    }
    return constants_1.kindMappingReverseProto12[operation.kind] + encoders[operation.kind](operation);
};
exports.operationEncoderProto12 = operationEncoderProto12;
const operationDecoderProto12 = (decoders) => (value) => {
    const op = value.consume(1);
    const operationName = constants_1.kindMappingProto12[op[0]];
    const decodedObj = decoders[operationName](value);
    if (typeof decodedObj !== 'object') {
        throw new Error('Decoded invalid operation');
    }
    if (operationName) {
        return Object.assign({ kind: operationName }, decodedObj);
    }
    else {
        throw new Error(`Unsupported operation ${op[0]}`);
    }
};
exports.operationDecoderProto12 = operationDecoderProto12;
//# sourceMappingURL=schema.js.map