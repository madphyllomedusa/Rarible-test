"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockchainSolanaTransaction = void 0;
var tslib_1 = require("tslib");
var api_client_1 = require("@rarible/api-client");
var BlockchainSolanaTransaction = /** @class */ (function () {
    function BlockchainSolanaTransaction(transaction, sdk) {
        this.transaction = transaction;
        this.sdk = sdk;
        this.blockchain = api_client_1.Blockchain.SOLANA;
    }
    BlockchainSolanaTransaction.prototype.hash = function () {
        return this.transaction.txId;
    };
    BlockchainSolanaTransaction.prototype.wait = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sdk.connection.confirmTransaction(this.transaction.txId, "confirmed")];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, {
                                blockchain: this.blockchain,
                                hash: this.transaction.txId,
                            }];
                }
            });
        });
    };
    BlockchainSolanaTransaction.prototype.getTxLink = function () {
        var url = "https://solscan.io/tx/".concat(this.hash());
        switch (this.sdk.cluster) {
            case "mainnet-beta":
                return url;
            case "testnet":
            case "devnet":
                return url + "?cluster=".concat(this.sdk.cluster);
            default: throw new Error("Unsupported transaction network");
        }
    };
    return BlockchainSolanaTransaction;
}());
exports.BlockchainSolanaTransaction = BlockchainSolanaTransaction;
