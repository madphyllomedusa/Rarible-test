"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.op_to_kt1 = exports.pk_to_pkh = exports.b58dec = exports.b58enc = exports.kt1_prefix = exports.op_prefix = exports.sig_prefix = exports.p2sig_prefix = exports.spsig1_prefix = exports.edsig_prefix = exports.p2sk_prefix = exports.spsk_prefix = exports.edsk_prefix = exports.p2pk_prefix = exports.sppk_prefix = exports.edpk_prefix = exports.tz3_prefix = exports.tz2_prefix = exports.tz1_prefix = exports.sign = exports.tezos_signed_message_prefix = exports.of_hex = exports.pack_string = exports.to_hex = exports.hex_to_uint8array = exports.uint8array_to_hex = exports.get_transaction = exports.send_batch = exports.send = exports.storage = exports.get_public_key = exports.get_address = exports.asset_type_contract = exports.asset_of_json = exports.asset_to_json = exports.asset_type_of_json = exports.asset_type_to_json = void 0;
var bignumber_js_1 = require("bignumber.js");
var node_fetch_1 = require("node-fetch");
var _a = require("text-encoder"), TextEncoder = _a.TextEncoder, TextDecoder = _a.TextDecoder;
var bs58check = require("bs58check");
var blake = require('blakejs');
function asset_type_to_json(a) {
    switch (a.asset_class) {
        case "XTZ":
            return { assetClass: a.asset_class };
        case "FT":
            return { assetClass: a.asset_class, contract: a.contract,
                tokenId: (a.token_id == undefined) ? undefined : a.token_id.toString() };
        case "NFT":
        case "MT":
            return {
                assetClass: a.asset_class,
                contract: a.contract,
                tokenId: a.token_id.toString()
            };
    }
}
exports.asset_type_to_json = asset_type_to_json;
function asset_type_of_json(a) {
    switch (a.assetClass) {
        case "XTZ":
            return { asset_class: a.assetClass };
        case "FT":
            return { asset_class: a.assetClass, contract: a.contract,
                token_id: (a.tokenId == undefined) ? undefined : new bignumber_js_1.default(a.tokenId) };
        case "NFT":
        case "MT":
            return {
                asset_class: a.assetClass,
                contract: a.contract,
                token_id: new bignumber_js_1.default(a.tokenId)
            };
        default: throw new Error("Unknown Asset Class");
    }
}
exports.asset_type_of_json = asset_type_of_json;
function asset_to_json(a) {
    return {
        assetType: asset_type_to_json(a.asset_type),
        value: a.value.toString()
    };
}
exports.asset_to_json = asset_to_json;
function asset_of_json(a) {
    return {
        asset_type: asset_type_of_json(a.assetType),
        value: new bignumber_js_1.default(a.value)
    };
}
exports.asset_of_json = asset_of_json;
function asset_type_contract(p, a) {
    switch (a.asset_class) {
        case 'NFT': return a.contract || p.config.nft_public;
        case 'MT': return a.contract || p.config.mt_public;
        case 'FT': return a.contract;
    }
}
exports.asset_type_contract = asset_type_contract;
function get_address(p) {
    return p.tezos.address();
}
exports.get_address = get_address;
function get_public_key(p) {
    return p.tezos.public_key();
}
exports.get_public_key = get_public_key;
function storage(p, contract) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, p.tezos.storage(contract)];
        });
    });
}
exports.storage = storage;
function send(provider, arg) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (arg.entrypoint && arg.parameter) {
                return [2 /*return*/, provider.tezos.transfer({
                        amount: (arg.amount != undefined) ? Number(arg.amount) : 0,
                        to: arg.destination,
                        parameter: { entrypoint: arg.entrypoint, value: arg.parameter }
                    })];
            }
            else {
                return [2 /*return*/, provider.tezos.transfer({
                        amount: (arg.amount != undefined) ? Number(arg.amount) : 0,
                        to: arg.destination
                    })];
            }
            return [2 /*return*/];
        });
    });
}
exports.send = send;
function send_batch(provider, args) {
    return __awaiter(this, void 0, void 0, function () {
        var params;
        return __generator(this, function (_a) {
            params = args.map(function (p) {
                if (p.entrypoint && p.parameter) {
                    return {
                        amount: (p.amount != undefined) ? Number(p.amount) : 0,
                        to: p.destination,
                        parameter: { entrypoint: p.entrypoint, value: p.parameter }
                    };
                }
                else {
                    return {
                        amount: (p.amount != undefined) ? Number(p.amount) : 0,
                        to: p.destination,
                    };
                }
            });
            return [2 /*return*/, provider.tezos.batch(params)];
        });
    });
}
exports.send_batch = send_batch;
function get_transaction(provider, op_hash) {
    return __awaiter(this, void 0, void 0, function () {
        var r;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, node_fetch_1.default)(provider.config.api + '/transaction/' + op_hash)];
                case 1:
                    r = _a.sent();
                    if (r.ok) {
                        return [2 /*return*/, r.json()];
                    }
                    else
                        throw new Error("/transaction/" + op_hash + " failed");
                    return [2 /*return*/];
            }
        });
    });
}
exports.get_transaction = get_transaction;
function uint8array_to_hex(a) {
    return a.reduce(function (acc, x) { return acc + x.toString(16).padStart(2, '0'); }, '');
}
exports.uint8array_to_hex = uint8array_to_hex;
function hex_to_uint8array(s) {
    var a = new Uint8Array(s.length / 2);
    for (var i = 0; i < s.length; i += 2) {
        a[i / 2] = parseInt(s.substring(i, i + 2), 16);
    }
    return a;
}
exports.hex_to_uint8array = hex_to_uint8array;
function to_hex(s) {
    var encoder = new TextEncoder();
    var a = encoder.encode(s);
    return uint8array_to_hex(a);
}
exports.to_hex = to_hex;
function pack_string(s) {
    var h = to_hex(s);
    return '0501' + Number(h.length / 2).toString(16).padStart(8, '0') + h;
}
exports.pack_string = pack_string;
function of_hex(s) {
    var a = hex_to_uint8array(s);
    var decoder = new TextDecoder();
    return decoder.decode(a);
}
exports.of_hex = of_hex;
function tezos_signed_message_prefix(domain) {
    if (domain === void 0) { domain = "rarible.com"; }
    var date = new Date();
    return "Tezos Signed Message: ".concat(domain, " ").concat(date.toISOString(), " ");
}
exports.tezos_signed_message_prefix = tezos_signed_message_prefix;
function sign(p, message, type) {
    return __awaiter(this, void 0, void 0, function () {
        var edpk, r;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    type = type || "message";
                    return [4 /*yield*/, p.public_key()];
                case 1:
                    edpk = _a.sent();
                    if (edpk == undefined)
                        throw new Error("cannot get public key from provider");
                    return [4 /*yield*/, p.sign(message, type)];
                case 2:
                    r = _a.sent();
                    return [2 /*return*/, __assign({ edpk: edpk }, r)];
            }
        });
    });
}
exports.sign = sign;
exports.tz1_prefix = new Uint8Array([6, 161, 159]);
exports.tz2_prefix = new Uint8Array([6, 161, 161]);
exports.tz3_prefix = new Uint8Array([6, 161, 164]);
exports.edpk_prefix = new Uint8Array([13, 15, 37, 217]);
exports.sppk_prefix = new Uint8Array([3, 254, 226, 86]);
exports.p2pk_prefix = new Uint8Array([3, 178, 139, 127]);
exports.edsk_prefix = new Uint8Array([13, 15, 58, 7]);
exports.spsk_prefix = new Uint8Array([17, 162, 224, 201]);
exports.p2sk_prefix = new Uint8Array([16, 81, 238, 189]);
exports.edsig_prefix = new Uint8Array([9, 245, 205, 134, 18]);
exports.spsig1_prefix = new Uint8Array([13, 115, 101, 19, 63]);
exports.p2sig_prefix = new Uint8Array([54, 240, 44, 52]);
exports.sig_prefix = new Uint8Array([4, 130, 43]);
exports.op_prefix = new Uint8Array([5, 116]);
exports.kt1_prefix = new Uint8Array([2, 90, 121]);
function b58enc(payload, prefix) {
    var n = new Uint8Array(prefix.length + payload.length);
    n.set(prefix);
    n.set(payload, prefix.length);
    return bs58check.encode(Buffer.from(n.buffer));
}
exports.b58enc = b58enc;
function b58dec(enc, prefix) {
    return bs58check.decode(enc).slice(prefix.length);
}
exports.b58dec = b58dec;
function pk_to_pkh(pk) {
    var pkh_prefix;
    var pk_prefix;
    switch (pk.substring(0, 2)) {
        case 'ed':
            pkh_prefix = exports.tz1_prefix;
            pk_prefix = exports.edpk_prefix;
            break;
        case 'sp':
            pkh_prefix = exports.tz2_prefix;
            pk_prefix = exports.sppk_prefix;
            break;
        case 'p2':
            pkh_prefix = exports.tz3_prefix;
            pk_prefix = exports.p2pk_prefix;
            break;
        default: throw new Error("don't handle base58 key ".concat(pk));
    }
    var pk_bytes = b58dec(pk, pk_prefix);
    var hash = blake.blake2b(pk_bytes, null, 20);
    return b58enc(hash, pkh_prefix);
}
exports.pk_to_pkh = pk_to_pkh;
function op_to_kt1(hash) {
    var op = b58dec(hash, exports.op_prefix);
    var data = new Uint8Array(__spreadArray(__spreadArray([], __read(op), false), [0, 0, 0, 0], false));
    var hash_kt1 = blake.blake2b(data, null, 20);
    return b58enc(hash_kt1, exports.kt1_prefix);
}
exports.op_to_kt1 = op_to_kt1;
