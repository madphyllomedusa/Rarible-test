"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = exports.verify_bytes = void 0;
var libsodium_wrappers_1 = require("libsodium-wrappers");
var elliptic_1 = require("elliptic");
var utils_1 = require("@taquito/utils");
var base_1 = require("./base");
var pref = {
    ed: {
        pk: utils_1.prefix['edpk'],
        sk: utils_1.prefix['edsk'],
        pkh: utils_1.prefix.tz1,
        sig: utils_1.prefix.edsig,
    },
    p2: {
        pk: utils_1.prefix['p2pk'],
        sk: utils_1.prefix['p2sk'],
        pkh: utils_1.prefix.tz3,
        sig: utils_1.prefix.p2sig,
    },
    sp: {
        pk: utils_1.prefix['sppk'],
        sk: utils_1.prefix['spsk'],
        pkh: utils_1.prefix.tz2,
        sig: utils_1.prefix.spsig,
    },
};
function verify_bytes(public_key, bytes, signature) {
    return __awaiter(this, void 0, void 0, function () {
        var curve, pk, sig_prefix, sig, hash, key_sp, hex_sig_sp, match_sp, _a, r, s, key_p2, hex_sig_p2, match_p2, _b, r, s;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, libsodium_wrappers_1.ready];
                case 1:
                    _c.sent();
                    curve = public_key.substring(0, 2);
                    pk = (0, utils_1.b58cdecode)(public_key, pref[curve].pk);
                    sig_prefix = signature.startsWith('sig')
                        ? signature.substr(0, 3)
                        : signature.substr(0, 5);
                    if (!(0, utils_1.isValidPrefix)(sig_prefix)) {
                        throw new Error("Unsupported signature given by remote signer: ".concat(signature));
                    }
                    sig = (signature.substring(0, 3) === 'sig')
                        ? (0, utils_1.b58cdecode)(signature, utils_1.prefix.sig)
                        : (signature.substring(0, 5) === "".concat(curve, "sig"))
                            ? (0, utils_1.b58cdecode)(signature, pref[curve].sig)
                            : undefined;
                    if (!sig)
                        throw new Error("Invalid signature provided: ".concat(signature));
                    hash = (0, libsodium_wrappers_1.crypto_generichash)(32, (0, utils_1.hex2buf)(bytes));
                    switch (curve) {
                        case 'ed':
                            try {
                                return [2 /*return*/, (0, libsodium_wrappers_1.crypto_sign_verify_detached)(sig, hash, pk)];
                            }
                            catch (e) {
                                return [2 /*return*/, false];
                            }
                        case 'sp':
                            key_sp = new elliptic_1.ec('secp256k1').keyFromPublic(pk);
                            hex_sig_sp = (0, utils_1.buf2hex)(Buffer.from(sig));
                            match_sp = hex_sig_sp.match(/([a-f\d]{64})/gi);
                            if (match_sp) {
                                try {
                                    _a = __read(match_sp, 2), r = _a[0], s = _a[1];
                                    return [2 /*return*/, key_sp.verify(hash, { r: r, s: s })];
                                }
                                catch (e) {
                                    return [2 /*return*/, false];
                                }
                            }
                            else
                                return [2 /*return*/, false];
                        case 'p2':
                            key_p2 = new elliptic_1.ec('p256').keyFromPublic(pk);
                            hex_sig_p2 = (0, utils_1.buf2hex)(Buffer.from(sig));
                            match_p2 = hex_sig_p2.match(/([a-f\d]{64})/gi);
                            if (match_p2) {
                                try {
                                    _b = __read(match_p2, 2), r = _b[0], s = _b[1];
                                    return [2 /*return*/, key_p2.verify(hash, { r: r, s: s })];
                                }
                                catch (e) {
                                    return [2 /*return*/, false];
                                }
                            }
                            else
                                return [2 /*return*/, false];
                        default: throw new Error("Curve '".concat(curve, "' not supported"));
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.verify_bytes = verify_bytes;
function verify(address, edpk, message, signature) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (address != (0, base_1.pk_to_pkh)(edpk))
                return [2 /*return*/, false];
            return [2 /*return*/, verify_bytes(edpk, message, signature)];
        });
    });
}
exports.verify = verify;
