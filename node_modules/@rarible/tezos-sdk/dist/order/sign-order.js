"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.order_key = exports.sign_order = exports.order_to_struct = exports.data_to_struct = exports.asset_to_struct = exports.get_decimals = exports.asset_type_to_struct = exports.order_type = exports.order_data_type = exports.part_type = exports.asset_type = exports.asset_type_type = exports.asset_class_type = exports.fa_2_type = exports.fa_1_2_type = exports.none_struct = exports.some_struct = exports.FA_2 = exports.FT_FA_2 = exports.FA_1_2 = exports.XTZ = exports.keccak = void 0;
var michel_codec_1 = require("@taquito/michel-codec");
var tezos_common_1 = require("@rarible/tezos-common");
var bignumber_js_1 = require("bignumber.js");
var node_fetch_1 = require("node-fetch");
var keccak_base = require("keccak");
function keccak(s) {
    return keccak_base('keccak256').update(s, 'hex').digest('hex');
}
exports.keccak = keccak;
function pack(data, type) {
    return (0, michel_codec_1.packDataBytes)(data, type).bytes;
}
exports.XTZ = { prim: 'Left', args: [{ prim: 'Unit' }] };
exports.FA_1_2 = {
    prim: 'Right', args: [{ prim: 'Left', args: [{ prim: 'Unit' }] }]
};
exports.FT_FA_2 = {
    prim: 'Right', args: [
        { prim: 'Right', args: [{ prim: 'Left', args: [{ int: '0' }] }] }
    ]
};
exports.FA_2 = {
    prim: 'Right', args: [
        { prim: 'Right', args: [{ prim: 'Left', args: [{ int: '1' }] }] }
    ]
};
function some_struct(v) {
    return {
        prim: 'Some',
        args: [v]
    };
}
exports.some_struct = some_struct;
function none_struct() { return { prim: 'None' }; }
exports.none_struct = none_struct;
exports.fa_1_2_type = { prim: 'address' };
exports.fa_2_type = { prim: 'pair', args: [{ prim: 'address' }, { prim: 'nat' }] };
exports.asset_class_type = { prim: 'or', args: [{ prim: 'unit' }, { prim: 'or', args: [{ prim: 'unit' }, { prim: 'or', args: [
                        { prim: 'nat' }, { prim: 'or', args: [{ prim: 'unit' }, { prim: 'bytes' }] }
                    ] }] }] };
exports.asset_type_type = { prim: 'pair', args: [exports.asset_class_type, { prim: 'bytes' }] };
exports.asset_type = { prim: 'pair', args: [exports.asset_type_type, { prim: 'nat' }] };
exports.part_type = { prim: 'pair', args: [{ prim: 'address' }, { prim: 'nat' }] };
exports.order_data_type = { prim: 'pair', args: [{ prim: 'list', args: [exports.part_type] }, { prim: 'list', args: [exports.part_type] }] };
exports.order_type = {
    prim: 'pair', args: [
        { prim: 'option', args: [{ prim: 'key' }] },
        { prim: 'pair', args: [
                exports.asset_type,
                { prim: 'pair', args: [
                        { prim: 'option', args: [{ prim: 'key' }] },
                        { prim: 'pair', args: [
                                exports.asset_type,
                                { prim: 'pair', args: [
                                        { prim: 'nat' },
                                        { prim: 'pair', args: [
                                                { prim: 'option', args: [{ prim: 'timestamp' }] },
                                                { prim: 'pair', args: [
                                                        { prim: 'option', args: [{ prim: 'timestamp' }] },
                                                        { prim: 'pair', args: [
                                                                { prim: 'bytes' }, { prim: 'bytes' }
                                                            ] }
                                                    ] }
                                            ] }
                                    ] }
                            ] }
                    ] }
            ] }
    ]
};
function asset_type_to_struct(p, a) {
    switch (a.asset_class) {
        case "XTZ":
            return { prim: 'Pair', args: [exports.XTZ, { bytes: "00" }] };
        case "FT":
            if (a.token_id == undefined) {
                return { prim: 'Pair', args: [exports.FA_1_2, {
                            bytes: pack({ string: a.contract }, exports.fa_1_2_type)
                        }] };
            }
            else {
                return { prim: 'Pair', args: [exports.FT_FA_2, {
                            bytes: pack({ prim: "Pair", args: [
                                    { string: a.contract }, { int: a.token_id.toString() }
                                ] }, exports.fa_2_type)
                        }] };
            }
        case "NFT":
            return { prim: 'Pair', args: [exports.FA_2, {
                        bytes: pack({ prim: "Pair", args: [
                                { string: a.contract || p.config.nft_public }, { int: a.token_id.toString() }
                            ] }, exports.fa_2_type)
                    }] };
        case "MT":
            return { prim: 'Pair', args: [exports.FA_2, {
                        bytes: pack({ prim: "Pair", args: [
                                { string: a.contract || p.config.mt_public }, { int: a.token_id.toString() }
                            ] }, exports.fa_2_type)
                    }] };
    }
}
exports.asset_type_to_struct = asset_type_to_struct;
function get_decimals(p, contract, token_id) {
    if (token_id === void 0) { token_id = new bignumber_js_1.default(0); }
    return __awaiter(this, void 0, void 0, function () {
        var st, v, v2, url, url_http, r, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (p.config.wrapper == contract)
                        return [2 /*return*/, new bignumber_js_1.default(6)];
                    return [4 /*yield*/, p.tezos.storage(contract)];
                case 1:
                    st = _a.sent();
                    if (!(st.token_metadata == undefined)) return [3 /*break*/, 2];
                    return [2 /*return*/, new bignumber_js_1.default(0)];
                case 2: return [4 /*yield*/, st.token_metadata.get(token_id.toString())];
                case 3:
                    v = _a.sent();
                    if (!(v == undefined)) return [3 /*break*/, 4];
                    return [2 /*return*/, new bignumber_js_1.default(0)];
                case 4:
                    v2 = v[Object.keys(v)[1]].get('decimals');
                    if (v2 != undefined)
                        return [2 /*return*/, new bignumber_js_1.default((0, tezos_common_1.of_hex)(v2))];
                    v2 = v[Object.keys(v)[1]].get('');
                    if (v2 == undefined)
                        return [2 /*return*/, new bignumber_js_1.default(0)];
                    url = (0, tezos_common_1.of_hex)(v2);
                    url_http = (url.substring(0, 4) == 'ipfs') ? "https://rarible.mypinata.cloud/ipfs/" + url.substring(7) : url;
                    return [4 /*yield*/, (0, node_fetch_1.default)(url_http)];
                case 5:
                    r = _a.sent();
                    if (!r.ok)
                        return [2 /*return*/, new bignumber_js_1.default(0)];
                    return [4 /*yield*/, r.json()];
                case 6:
                    json = _a.sent();
                    if (json.decimals == undefined)
                        return [2 /*return*/, new bignumber_js_1.default(0)];
                    else
                        return [2 /*return*/, new bignumber_js_1.default(json.decimals)];
                    _a.label = 7;
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.get_decimals = get_decimals;
function asset_to_struct(p, a) {
    return __awaiter(this, void 0, void 0, function () {
        var value, _a, decimals, b;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = a.asset_type.asset_class;
                    switch (_a) {
                        case "XTZ": return [3 /*break*/, 1];
                        case "FT": return [3 /*break*/, 2];
                    }
                    return [3 /*break*/, 6];
                case 1:
                    value = a.value.times(new bignumber_js_1.default(1000000)).toString();
                    return [3 /*break*/, 7];
                case 2:
                    if (!(a.asset_type.contract == p.config.wrapper && a.asset_type.token_id != undefined && a.asset_type.token_id.isZero())) return [3 /*break*/, 3];
                    value = a.value.times(new bignumber_js_1.default(1000000)).toString();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, get_decimals(p, a.asset_type.contract, a.asset_type.token_id)];
                case 4:
                    decimals = _b.sent();
                    value = a.value.times((new bignumber_js_1.default(10).pow(decimals))).toString();
                    _b.label = 5;
                case 5: return [3 /*break*/, 7];
                case 6:
                    value = a.value.toString();
                    return [3 /*break*/, 7];
                case 7:
                    b = { prim: "Pair", args: [asset_type_to_struct(p, a.asset_type), { int: value }] };
                    return [2 /*return*/, b];
            }
        });
    });
}
exports.asset_to_struct = asset_to_struct;
function data_to_struct(data) {
    return { prim: "Pair", args: [
            data.payouts.map(function (p) {
                return { prim: "Pair", args: [{ string: p.account }, { int: p.value.toString() }] };
            }),
            data.origin_fees.map(function (p) {
                return { prim: "Pair", args: [{ string: p.account }, { int: p.value.toString() }] };
            })
        ] };
}
exports.data_to_struct = data_to_struct;
function order_to_struct(p, order) {
    return __awaiter(this, void 0, void 0, function () {
        var data_type, data, _a, _b, _c;
        var _d, _e, _f, _g;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    data_type = keccak(pack({ string: order.data.data_type }, { prim: 'string' }));
                    data = pack(data_to_struct(order.data), exports.order_data_type);
                    _d = {
                        prim: "Pair"
                    };
                    _a = [some_struct({ string: order.maker_edpk })];
                    _e = { prim: "Pair" };
                    return [4 /*yield*/, asset_to_struct(p, order.make)];
                case 1:
                    _b = [
                        _h.sent()
                    ];
                    _f = { prim: "Pair" };
                    _c = [(order.taker_edpk) ? some_struct({ string: order.taker_edpk }) : none_struct()];
                    _g = { prim: "Pair" };
                    return [4 /*yield*/, asset_to_struct(p, order.take)];
                case 2: return [2 /*return*/, (_d.args = _a.concat([
                        (_e.args = _b.concat([
                            (_f.args = _c.concat([
                                (_g.args = [
                                    _h.sent(),
                                    { prim: "Pair", args: [
                                            { int: order.salt },
                                            { prim: "Pair", args: [
                                                    (order.start) ? some_struct({ int: order.start.toString() }) : none_struct(),
                                                    { prim: "Pair", args: [
                                                            (order.end) ? some_struct({ int: order.end.toString() }) : none_struct(),
                                                            { prim: "Pair", args: [
                                                                    { bytes: data_type },
                                                                    { bytes: data }
                                                                ] }
                                                        ] }
                                                ] }
                                        ] }
                                ], _g)
                            ]), _f)
                        ]), _e)
                    ]),
                        _d)];
            }
        });
    });
}
exports.order_to_struct = order_to_struct;
function sign_order(provider, order) {
    return __awaiter(this, void 0, void 0, function () {
        var o, h, signature;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, order_to_struct(provider, order)];
                case 1:
                    o = _a.sent();
                    h = pack(o, exports.order_type);
                    return [4 /*yield*/, provider.tezos.sign(h)];
                case 2:
                    signature = (_a.sent()).signature;
                    return [2 /*return*/, signature];
            }
        });
    });
}
exports.sign_order = sign_order;
function order_key(provider, order) {
    return __awaiter(this, void 0, void 0, function () {
        var maker, make_asset, take_asset, salt;
        return __generator(this, function (_a) {
            maker = pack({ string: order.maker_edpk }, { prim: "key" });
            make_asset = keccak(pack(asset_type_to_struct(provider, order.make.asset_type), exports.asset_type_type));
            take_asset = keccak(pack(asset_type_to_struct(provider, order.take.asset_type), exports.asset_type_type));
            salt = pack({ int: order.salt }, { prim: "nat" });
            return [2 /*return*/, keccak(maker + make_asset + take_asset + salt)];
        });
    });
}
exports.order_key = order_key;
