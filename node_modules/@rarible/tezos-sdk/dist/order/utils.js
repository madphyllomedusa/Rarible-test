"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fill_offchain_royalties = exports.salt = exports.order_of_json = exports.order_to_json = void 0;
var tezos_common_1 = require("@rarible/tezos-common");
var bignumber_js_1 = require("bignumber.js");
var node_fetch_1 = require("node-fetch");
var getRandomValues = require('get-random-values');
function part_to_json(p) {
    return { account: p.account, value: Number(p.value) };
}
function part_of_json(p) {
    return { account: p.account, value: new bignumber_js_1.default(p.value) };
}
function data_to_json(d) {
    var e_1, _a, e_2, _b;
    var payouts = [];
    var originFees = [];
    try {
        for (var _c = __values(d.payouts), _d = _c.next(); !_d.done; _d = _c.next()) {
            var p = _d.value;
            payouts.push(part_to_json(p));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var _e = __values(d.origin_fees), _f = _e.next(); !_f.done; _f = _e.next()) {
            var o = _f.value;
            originFees.push(part_to_json(o));
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return {
        dataType: "V1",
        payouts: d.payouts.map(part_to_json),
        originFees: d.origin_fees.map(part_to_json)
    };
}
function data_of_json(d) {
    return {
        data_type: "V1",
        payouts: d.payouts.map(part_of_json),
        origin_fees: d.originFees.map(part_of_json)
    };
}
function order_to_json(order) {
    var make = order.make, take = order.take, data = order.data, maker_edpk = order.maker_edpk, taker_edpk = order.taker_edpk, rest = __rest(order, ["make", "take", "data", "maker_edpk", "taker_edpk"]);
    return __assign({ make: (0, tezos_common_1.asset_to_json)(order.make), take: (0, tezos_common_1.asset_to_json)(order.take), data: data_to_json(data), makerEdpk: maker_edpk, takerEdpk: taker_edpk }, rest);
}
exports.order_to_json = order_to_json;
function order_of_json(order) {
    var make = order.make, take = order.take, data = order.data, makerEdpk = order.makerEdpk, takerEdpk = order.takerEdpk, rest = __rest(order, ["make", "take", "data", "makerEdpk", "takerEdpk"]);
    return __assign({ make: (0, tezos_common_1.asset_of_json)(order.make), take: (0, tezos_common_1.asset_of_json)(order.take), data: data_of_json(data), maker_edpk: makerEdpk, taker_edpk: takerEdpk }, rest);
}
exports.order_of_json = order_of_json;
function salt() {
    var a = new Uint8Array(32);
    a = getRandomValues(a);
    return a.reduce(function (acc, x) { return acc + x.toString(10).padStart(2, '0'); }, '');
}
exports.salt = salt;
function fill_offchain_royalties(provider, order) {
    return __awaiter(this, void 0, void 0, function () {
        var assett, contract, id, r, json, royalties, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if ((order.make.asset_type.asset_class == "NFT" || order.make.asset_type.asset_class == "MT") && order.take.asset_type.asset_class != "NFT" && order.take.asset_type.asset_class != "MT") {
                        assett = order.make.asset_type;
                    }
                    if (!assett)
                        return [2 /*return*/, order];
                    contract = (assett.contract) ? assett.contract
                        : (assett.asset_class == "NFT") ? provider.config.nft_public
                            : provider.config.mt_public;
                    id = contract + ':' + assett.token_id.toString();
                    return [4 /*yield*/, (0, node_fetch_1.default)(provider.config.api + '/items/' + id + '/royalties')];
                case 1:
                    r = _a.sent();
                    if (!r.ok) return [3 /*break*/, 3];
                    return [4 /*yield*/, r.json()];
                case 2:
                    json = _a.sent();
                    if (json.onchain)
                        return [2 /*return*/, order];
                    royalties = json.royalties.map(function (x) {
                        return __assign(__assign({}, x), { value: new bignumber_js_1.default(x.value) });
                    });
                    data = __assign(__assign({}, order.data), { origin_fees: order.data.origin_fees.concat(royalties) });
                    return [2 /*return*/, __assign(__assign({}, order), { data: data })];
                case 3: throw new Error("cannot get royalties for ".concat(id, ", reason:").concat(r.statusText));
            }
        });
    });
}
exports.fill_offchain_royalties = fill_offchain_royalties;
