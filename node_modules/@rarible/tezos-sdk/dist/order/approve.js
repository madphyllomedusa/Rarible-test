"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.approve = exports.approve_arg = exports.approve_fa2 = exports.approve_fa2_arg = exports.approve_fa1_2 = exports.approve_fa1_2_arg = exports.get_big_map_value = void 0;
var michel_codec_1 = require("@taquito/michel-codec");
var tezos_common_1 = require("@rarible/tezos-common");
var blake = require('blakejs');
function key_expr(value, type) {
    var b = (0, michel_codec_1.packDataBytes)(value, type).bytes;
    var hash = blake.blake2b((0, tezos_common_1.hex_to_uint8array)(b), null, 32);
    return (0, tezos_common_1.b58enc)(hash, new Uint8Array([13, 44, 64, 27]));
}
function get_big_map_value(provider, id, value, type) {
    return __awaiter(this, void 0, void 0, function () {
        var rpc, expr, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    rpc = provider.tezos.tk.rpc;
                    expr = key_expr(value, type);
                    return [4 /*yield*/, rpc.getBigMapExpr(id, expr)];
                case 1: return [2 /*return*/, _b.sent()];
                case 2:
                    _a = _b.sent();
                    return [2 /*return*/, undefined];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.get_big_map_value = get_big_map_value;
function approve_fa1_2_arg(provider, owner, contract, value, infinite, spender) {
    if (infinite === void 0) { infinite = true; }
    return __awaiter(this, void 0, void 0, function () {
        var st, key_exists, balance, r, _a, v, parameter;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    spender = spender || provider.config.transfer_proxy;
                    return [4 /*yield*/, provider.tezos.storage(contract)];
                case 1:
                    st = _b.sent();
                    key_exists = false;
                    balance = undefined;
                    _b.label = 2;
                case 2:
                    _b.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, st.ledger.get(owner)];
                case 3:
                    r = _b.sent();
                    key_exists = r != undefined;
                    if (r != undefined)
                        balance = r[Object.keys(r)[0]];
                    return [3 /*break*/, 5];
                case 4:
                    _a = _b.sent();
                    key_exists = false;
                    return [3 /*break*/, 5];
                case 5:
                    if (!key_exists) {
                        v = (!infinite) ? value.toString() :
                            (balance) ? balance.toString() :
                                Number.MAX_SAFE_INTEGER.toString();
                        parameter = [{ prim: 'Pair', args: [{ string: spender }, { int: v }] }];
                        return [2 /*return*/, { destination: contract, entrypoint: "approve", parameter: parameter }];
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.approve_fa1_2_arg = approve_fa1_2_arg;
function approve_fa1_2(provider, owner, contract, value, infinite) {
    if (infinite === void 0) { infinite = true; }
    return __awaiter(this, void 0, void 0, function () {
        var arg;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, approve_fa1_2_arg(provider, owner, contract, value, infinite)];
                case 1:
                    arg = _a.sent();
                    if (arg) {
                        try {
                            return [2 /*return*/, (0, tezos_common_1.send)(provider, arg)];
                        }
                        catch (e) {
                            return [2 /*return*/, undefined];
                        }
                    }
                    else
                        return [2 /*return*/, undefined];
                    return [2 /*return*/];
            }
        });
    });
}
exports.approve_fa1_2 = approve_fa1_2;
function approve_fa2_arg(provider, owner, contract, token_id, use_all, operator) {
    if (use_all === void 0) { use_all = false; }
    return __awaiter(this, void 0, void 0, function () {
        var st, key_exists, r, _a, parameter, r, id, value, type, r, _b, parameter;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    operator = operator || provider.config.transfer_proxy;
                    return [4 /*yield*/, provider.tezos.storage(contract)];
                case 1:
                    st = _c.sent();
                    key_exists = false;
                    if (!(use_all && st.operator_for_all)) return [3 /*break*/, 6];
                    _c.label = 2;
                case 2:
                    _c.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, st.operator_for_all.get({ 0: operator, 1: owner })];
                case 3:
                    r = _c.sent();
                    key_exists = (r != undefined);
                    return [3 /*break*/, 5];
                case 4:
                    _a = _c.sent();
                    key_exists = false;
                    return [3 /*break*/, 5];
                case 5:
                    if (!key_exists) {
                        parameter = [{ prim: 'Left', args: [{ string: operator }] }];
                        return [2 /*return*/, { destination: contract, entrypoint: "update_operators_for_all", parameter: parameter }];
                    }
                    return [3 /*break*/, 13];
                case 6:
                    _c.trys.push([6, 11, , 12]);
                    if (!st.operator) return [3 /*break*/, 8];
                    return [4 /*yield*/, st.operator.get({ 0: operator, 1: token_id, 2: owner })];
                case 7:
                    r = _c.sent();
                    key_exists = (r != undefined);
                    return [3 /*break*/, 10];
                case 8:
                    if (!st.operators) return [3 /*break*/, 10];
                    id = st.operators.toString();
                    value = { prim: "Pair", args: [{ string: owner }, { prim: "Pair", args: [{ string: operator }, { int: token_id.toString() }] }] };
                    type = { prim: "pair", args: [{ prim: "address" }, { prim: "pair", args: [{ prim: "address" }, { prim: "nat" }] }] };
                    return [4 /*yield*/, get_big_map_value(provider, id, value, type)];
                case 9:
                    r = _c.sent();
                    key_exists = (r != undefined);
                    _c.label = 10;
                case 10: return [3 /*break*/, 12];
                case 11:
                    _b = _c.sent();
                    key_exists = false;
                    return [3 /*break*/, 12];
                case 12:
                    if (!key_exists) {
                        parameter = [
                            { prim: 'Left', args: [
                                    { prim: "Pair", args: [
                                            { string: owner },
                                            { prim: 'Pair', args: [
                                                    { string: operator },
                                                    { int: token_id.toString() }
                                                ] }
                                        ] }
                                ] }
                        ];
                        return [2 /*return*/, { destination: contract, entrypoint: "update_operators", parameter: parameter }];
                    }
                    _c.label = 13;
                case 13: return [2 /*return*/];
            }
        });
    });
}
exports.approve_fa2_arg = approve_fa2_arg;
function approve_fa2(provider, owner, contract, token_id, use_all) {
    if (use_all === void 0) { use_all = false; }
    return __awaiter(this, void 0, void 0, function () {
        var arg;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, approve_fa2_arg(provider, owner, contract, token_id, use_all)];
                case 1:
                    arg = _a.sent();
                    if (arg) {
                        return [2 /*return*/, (0, tezos_common_1.send)(provider, arg)];
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.approve_fa2 = approve_fa2;
function approve_arg(provider, owner, asset, use_all, infinite, operator) {
    if (use_all === void 0) { use_all = false; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (asset.asset_type.asset_class == "FT" && asset.asset_type.token_id == undefined) {
                return [2 /*return*/, approve_fa1_2_arg(provider, owner, asset.asset_type.contract, asset.value, infinite, operator)];
            }
            else if (asset.asset_type.asset_class == "FT" && asset.asset_type.token_id != undefined) {
                return [2 /*return*/, approve_fa2_arg(provider, owner, asset.asset_type.contract, asset.asset_type.token_id, undefined, operator)];
            }
            else if (asset.asset_type.asset_class == "NFT") {
                return [2 /*return*/, approve_fa2_arg(provider, owner, asset.asset_type.contract || provider.config.nft_public, asset.asset_type.token_id, use_all, operator)];
            }
            else if (asset.asset_type.asset_class == "MT") {
                return [2 /*return*/, approve_fa2_arg(provider, owner, asset.asset_type.contract || provider.config.mt_public, asset.asset_type.token_id, use_all, operator)];
            }
            else
                throw new Error("Asset class " + asset.asset_type.asset_class + " not handled for approve");
            return [2 /*return*/];
        });
    });
}
exports.approve_arg = approve_arg;
function approve(provider, owner, asset, use_all, infinite) {
    if (use_all === void 0) { use_all = false; }
    return __awaiter(this, void 0, void 0, function () {
        var arg;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, approve_arg(provider, owner, asset, use_all, infinite)];
                case 1:
                    arg = _a.sent();
                    if (arg) {
                        return [2 /*return*/, (0, tezos_common_1.send)(provider, arg)];
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.approve = approve;
