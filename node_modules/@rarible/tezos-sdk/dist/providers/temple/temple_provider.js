"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.temple_provider = void 0;
var dapp_1 = require("@temple-wallet/dapp");
var taquito_1 = require("@taquito/taquito");
var tezos_common_1 = require("@rarible/tezos-common");
function temple_provider(wallet, tk) {
    return __awaiter(this, void 0, void 0, function () {
        var transfer, originate, batch, sign, address, public_key, storage, balance, chain_id;
        var _this = this;
        return __generator(this, function (_a) {
            tk.setWalletProvider(wallet);
            transfer = function (arg) { return __awaiter(_this, void 0, void 0, function () {
                var op;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, tk.wallet.transfer(arg).send()];
                        case 1:
                            op = _a.sent();
                            return [2 /*return*/, { hash: op.opHash, confirmation: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, op.confirmation()];
                                            case 1:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    }); }); } }];
                    }
                });
            }); };
            originate = function (arg) { return __awaiter(_this, void 0, void 0, function () {
                var op;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, tk.wallet.originate(arg).send()];
                        case 1:
                            op = _a.sent();
                            return [2 /*return*/, {
                                    hash: op.opHash,
                                    contract: (0, tezos_common_1.op_to_kt1)(op.opHash),
                                    confirmation: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, op.confirmation()];
                                            case 1:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    }); }); }
                                }];
                    }
                });
            }); };
            batch = function (args) { return __awaiter(_this, void 0, void 0, function () {
                var args2, op;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            args2 = args.map(function (a) {
                                return __assign(__assign({}, a), { kind: taquito_1.OpKind.TRANSACTION });
                            });
                            return [4 /*yield*/, tk.wallet.batch(args2).send()];
                        case 1:
                            op = _a.sent();
                            return [2 /*return*/, { hash: op.opHash, confirmation: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, op.confirmation()];
                                            case 1:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    }); }); } }];
                    }
                });
            }); };
            sign = function (bytes, type) { return __awaiter(_this, void 0, void 0, function () {
                var prefix, payload, signature;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            prefix = "";
                            payload = bytes;
                            if (type == "message") {
                                prefix = (0, tezos_common_1.tezos_signed_message_prefix)();
                                payload = (0, tezos_common_1.pack_string)(prefix + bytes);
                            }
                            return [4 /*yield*/, wallet.sign(payload)];
                        case 1:
                            signature = _a.sent();
                            return [2 /*return*/, { signature: signature, prefix: prefix }];
                    }
                });
            }); };
            address = function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, wallet.getPKH()];
                });
            }); };
            public_key = function () { return __awaiter(_this, void 0, void 0, function () {
                var perm;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, dapp_1.TempleWallet.getCurrentPermission()];
                        case 1:
                            perm = _a.sent();
                            if (perm)
                                return [2 /*return*/, perm.publicKey];
                            else
                                undefined;
                            return [2 /*return*/];
                    }
                });
            }); };
            storage = function (contract) { return __awaiter(_this, void 0, void 0, function () {
                var c;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, tk.wallet.at(contract)];
                        case 1:
                            c = _a.sent();
                            return [2 /*return*/, c.storage()];
                    }
                });
            }); };
            balance = function () { return __awaiter(_this, void 0, void 0, function () {
                var a;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, address()];
                        case 1:
                            a = _a.sent();
                            return [2 /*return*/, tk.tz.getBalance(a)];
                    }
                });
            }); };
            chain_id = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, tk.rpc.getChainId()];
            }); }); };
            return [2 /*return*/, {
                    kind: "temple",
                    transfer: transfer,
                    originate: originate,
                    batch: batch,
                    sign: sign,
                    address: address,
                    public_key: public_key,
                    storage: storage,
                    balance: balance,
                    chain_id: chain_id,
                    tk: tk,
                }];
        });
    });
}
exports.temple_provider = temple_provider;
