import { Provider, OperationResult, AssetBase, FTAssetType, XTZAssetType, NFTAssetType, MTAssetType } from "@rarible/tezos-common";
import BigNumber from "bignumber.js";
import { Part } from "../order/utils";
export interface Auction {
    sell_asset: AssetBase<NFTAssetType | MTAssetType>;
    buy_asset_type: FTAssetType | XTZAssetType;
    seller?: string;
    start?: Date;
    duration: BigNumber;
    minimal_price: BigNumber;
    buyout_price: BigNumber;
    minimal_step: BigNumber;
    payouts: Array<Part>;
    origin_fees: Array<Part>;
}
export interface AuctionBid {
    bid_asset_type: NFTAssetType | MTAssetType;
    bidding_asset_type?: FTAssetType | XTZAssetType;
    payouts: Array<Part>;
    origin_fees: Array<Part>;
    amount: BigNumber;
    bidder?: string;
}
export interface AuctionInfo {
    sell_asset: AssetBase<NFTAssetType | MTAssetType>;
    buy_asset_type: FTAssetType | XTZAssetType;
    last_bid: AuctionBid | undefined;
    seller: string;
    start: Date;
    end: Date;
    minimal_price: BigNumber;
    buyout_price: BigNumber;
    minimal_step: BigNumber;
    payouts: Array<Part>;
    origin_fees: Array<Part>;
    protocol_fee: BigNumber;
}
export declare function start_auction(provider: Provider, auction: Auction, use_all?: boolean): Promise<OperationResult>;
export declare function get_auction(provider: Provider, asset_type: NFTAssetType | MTAssetType): Promise<AuctionInfo>;
export declare function auction_bid(provider: Provider, bid: AuctionBid): Promise<OperationResult>;
export declare function cancel_auction(provider: Provider, asset_type: (NFTAssetType | MTAssetType), seller?: string, use_all?: boolean): Promise<OperationResult>;
