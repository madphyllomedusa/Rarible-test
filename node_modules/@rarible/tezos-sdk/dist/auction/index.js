"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancel_auction = exports.auction_bid = exports.get_auction = exports.start_auction = void 0;
var tezos_common_1 = require("@rarible/tezos-common");
var bignumber_js_1 = require("bignumber.js");
var sign_order_1 = require("../order/sign-order");
var approve_1 = require("../order/approve");
function option_struct(x) {
    if (x && x[0])
        return { prim: 'Some', args: [x[1](x[0])] };
    else
        return { prim: 'None' };
}
function str_struct(s) { return { string: s }; }
function int_struct(i) { return { int: i }; }
function asset_type_to_struct(p, a) {
    switch (a.asset_class) {
        case "XTZ":
            return [sign_order_1.XTZ, [option_struct(), option_struct()]];
        case "FT":
            if (a.token_id == undefined) {
                return [sign_order_1.FA_1_2, [option_struct([a.contract, str_struct]), option_struct()]];
            }
            else {
                return [sign_order_1.FT_FA_2, [option_struct([a.contract, str_struct]), option_struct([a.token_id.toString(), int_struct])]];
            }
        case "NFT":
        case "MT":
            return [sign_order_1.FA_2, [
                    option_struct([a.contract || p.config.nft_public, str_struct]),
                    option_struct([a.token_id.toString(), int_struct])
                ]];
    }
}
function asset_factor(provider, asset_type) {
    return __awaiter(this, void 0, void 0, function () {
        var decimals, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = asset_type.asset_class;
                    switch (_a) {
                        case 'XTZ': return [3 /*break*/, 1];
                        case 'FT': return [3 /*break*/, 2];
                    }
                    return [3 /*break*/, 4];
                case 1:
                    decimals = new bignumber_js_1.default(6);
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, (0, sign_order_1.get_decimals)(provider, asset_type.contract, asset_type.token_id)];
                case 3:
                    decimals = _b.sent();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/, new bignumber_js_1.default(10).pow(decimals)];
            }
        });
    });
}
function absolute_amount(provider, amount, asset_type) {
    return __awaiter(this, void 0, void 0, function () {
        var factor;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, asset_factor(provider, asset_type)];
                case 1:
                    factor = _a.sent();
                    return [2 /*return*/, amount.times(factor).integerValue()];
            }
        });
    });
}
function decimal_amount(provider, amount, asset_type) {
    return __awaiter(this, void 0, void 0, function () {
        var factor;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, asset_factor(provider, asset_type)];
                case 1:
                    factor = _a.sent();
                    return [2 /*return*/, amount.div(factor)];
            }
        });
    });
}
function start_auction(provider, auction, use_all) {
    if (use_all === void 0) { use_all = false; }
    return __awaiter(this, void 0, void 0, function () {
        var sell_asset_type, buy_asset_type, seller, _a, arg_approve, parameter, arg, args;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    sell_asset_type = asset_type_to_struct(provider, auction.sell_asset.asset_type);
                    buy_asset_type = asset_type_to_struct(provider, auction.buy_asset_type);
                    _a = auction.seller;
                    if (_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 1:
                    _a = (_b.sent());
                    _b.label = 2;
                case 2:
                    seller = _a;
                    return [4 /*yield*/, (0, approve_1.approve_arg)(provider, seller, auction.sell_asset, use_all, false, provider.config.auction)];
                case 3:
                    arg_approve = _b.sent();
                    parameter = [
                        sell_asset_type,
                        { int: auction.sell_asset.value.toString() },
                        buy_asset_type,
                        { string: seller },
                        option_struct([auction.start, function (d) { return { string: d.toISOString() }; }]),
                        { int: auction.duration.toString() },
                        { int: absolute_amount(provider, auction.minimal_price, auction.buy_asset_type).toString() },
                        { int: absolute_amount(provider, auction.buyout_price, auction.buy_asset_type).toString() },
                        { int: absolute_amount(provider, auction.minimal_step, auction.buy_asset_type).toString() },
                        auction.payouts.map(function (p) {
                            return [{ string: p.account }, { int: p.value.toString() }];
                        }),
                        auction.origin_fees.map(function (p) {
                            return [{ string: p.account }, { int: p.value.toString() }];
                        }),
                    ];
                    arg = { destination: provider.config.auction, entrypoint: "start_auction", parameter: parameter };
                    args = (arg_approve) ? [arg_approve, arg] : [arg];
                    return [2 /*return*/, (0, tezos_common_1.send_batch)(provider, args)];
            }
        });
    });
}
exports.start_auction = start_auction;
function parse_asset_type(m) {
    if (m.args[0].prim == 'Left')
        return { asset_class: 'XTZ' };
    else if (m.args[0].args[0].prim == 'Left') {
        return { asset_class: 'FT', contract: m.args[1].args[0].string, token_id: undefined };
    }
    else if (m.args[0].args[0].args[0].args[0].int == '0') {
        return { asset_class: 'FT', contract: m.args[1].args[0].string, token_id: new bignumber_js_1.default(m.args[2].args[0].int) };
    }
    else if (m.args[0].args[0].args[0].args[0].int == '1') {
        return { asset_class: 'NFT', contract: m.args[1].args[0].string, token_id: new bignumber_js_1.default(m.args[2].args[0].int) };
    }
    else
        throw new Error('Cannot parse asset type');
}
function parse_parts(m) {
    return m.map(function (p) {
        return { account: p.args[0].string, value: new bignumber_js_1.default(p.args[1].int) };
    });
}
function parse_bid(m, bid_asset_type) {
    if (m.prim == 'None')
        return undefined;
    else {
        return {
            bid_asset_type: bid_asset_type,
            payouts: parse_parts(m.args[0].args[0]),
            origin_fees: parse_parts(m.args[0].args[1]),
            amount: new bignumber_js_1.default(m.args[0].args[2].int),
            bidder: m.args[0].args[3].string
        };
    }
}
function parse_auction(provider, m) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, sell_asset_type, amount, buy_asset, last_bid, seller, start, end, minimal_price, buyout_price, minimal_step, protocol_fee, payouts, origin_fees, asset_type, sell_asset, buy_asset_type;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = __read(m.args, 13), sell_asset_type = _a[0], amount = _a[1], buy_asset = _a[2], last_bid = _a[3], seller = _a[4], start = _a[5], end = _a[6], minimal_price = _a[7], buyout_price = _a[8], minimal_step = _a[9], protocol_fee = _a[10], payouts = _a[11], origin_fees = _a[12];
                    asset_type = parse_asset_type(sell_asset_type);
                    sell_asset = { asset_type: asset_type, value: new bignumber_js_1.default(amount.int) };
                    buy_asset_type = parse_asset_type(buy_asset);
                    _b = {
                        sell_asset: sell_asset,
                        buy_asset_type: buy_asset_type,
                        last_bid: parse_bid(last_bid, asset_type),
                        seller: seller.string,
                        start: new Date(start.string),
                        end: new Date(end.string)
                    };
                    return [4 /*yield*/, decimal_amount(provider, new bignumber_js_1.default(minimal_price.int), buy_asset_type)];
                case 1:
                    _b.minimal_price = _c.sent();
                    return [4 /*yield*/, decimal_amount(provider, new bignumber_js_1.default(buyout_price.int), buy_asset_type)];
                case 2:
                    _b.buyout_price = _c.sent();
                    return [4 /*yield*/, decimal_amount(provider, new bignumber_js_1.default(minimal_step.int), buy_asset_type)];
                case 3: return [2 /*return*/, (_b.minimal_step = _c.sent(),
                        _b.protocol_fee = new bignumber_js_1.default(protocol_fee.int),
                        _b.payouts = parse_parts(payouts),
                        _b.origin_fees = parse_parts(origin_fees),
                        _b)];
            }
        });
    });
}
function get_auction(provider, asset_type) {
    return __awaiter(this, void 0, void 0, function () {
        var st, id, contract, typ, value, r;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, provider.tezos.storage(provider.config.auction_storage)];
                case 1:
                    st = _a.sent();
                    id = st.auctions.toString();
                    contract = (0, tezos_common_1.asset_type_contract)(provider, asset_type);
                    typ = { prim: 'pair', args: [{ prim: 'address' }, { prim: 'nat' }] };
                    value = { prim: 'Pair', args: [{ string: contract }, { int: asset_type.token_id.toString() }] };
                    return [4 /*yield*/, (0, approve_1.get_big_map_value)(provider, id, value, typ)];
                case 2:
                    r = _a.sent();
                    return [4 /*yield*/, parse_auction(provider, r)];
                case 3: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.get_auction = get_auction;
function calculate_amount(amount, protocol_fee, origin_fees) {
    var e_1, _a;
    amount = amount.plus(amount.times(protocol_fee).div(10000).integerValue());
    try {
        for (var origin_fees_1 = __values(origin_fees), origin_fees_1_1 = origin_fees_1.next(); !origin_fees_1_1.done; origin_fees_1_1 = origin_fees_1.next()) {
            var f = origin_fees_1_1.value;
            amount = amount.plus(amount.times(f.value).div(10000).integerValue());
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (origin_fees_1_1 && !origin_fees_1_1.done && (_a = origin_fees_1.return)) _a.call(origin_fees_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return amount;
}
function auction_bid(provider, bid) {
    return __awaiter(this, void 0, void 0, function () {
        var contract, bidder, _a, arg_approve, bidding_asset_type, auction, amount, parameter, arg, _b, args;
        var _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    contract = (0, tezos_common_1.asset_type_contract)(provider, bid.bid_asset_type);
                    _a = bid.bidder;
                    if (_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 1:
                    _a = (_d.sent());
                    _d.label = 2;
                case 2:
                    bidder = _a;
                    bidding_asset_type = bid.bidding_asset_type;
                    if (!(bidding_asset_type == undefined)) return [3 /*break*/, 4];
                    return [4 /*yield*/, get_auction(provider, bid.bid_asset_type)];
                case 3:
                    auction = _d.sent();
                    bidding_asset_type = auction.buy_asset_type;
                    _d.label = 4;
                case 4: return [4 /*yield*/, absolute_amount(provider, bid.amount, bidding_asset_type)];
                case 5:
                    amount = _d.sent();
                    amount = calculate_amount(amount, provider.config.fees, bid.origin_fees);
                    if (!(bidding_asset_type.asset_class == 'FT')) return [3 /*break*/, 7];
                    return [4 /*yield*/, (0, approve_1.approve_arg)(provider, bidder, { asset_type: bidding_asset_type, value: amount }, false, false, provider.config.auction_storage)];
                case 6:
                    arg_approve = _d.sent();
                    _d.label = 7;
                case 7:
                    parameter = [
                        { string: contract },
                        { int: bid.bid_asset_type.token_id.toString() },
                        bid.payouts.map(function (p) {
                            return [{ string: p.account }, { int: p.value.toString() }];
                        }),
                        bid.origin_fees.map(function (p) {
                            return [{ string: p.account }, { int: p.value.toString() }];
                        }),
                        { int: amount.toString() },
                        { string: bidder }
                    ];
                    _c = {
                        destination: provider.config.auction, entrypoint: "put_bid",
                        parameter: parameter
                    };
                    if (!(bidding_asset_type.asset_class == 'XTZ')) return [3 /*break*/, 9];
                    return [4 /*yield*/, decimal_amount(provider, amount, bidding_asset_type)];
                case 8:
                    _b = _d.sent();
                    return [3 /*break*/, 10];
                case 9:
                    _b = undefined;
                    _d.label = 10;
                case 10:
                    arg = (_c.amount = _b,
                        _c);
                    args = (arg_approve) ? [arg_approve, arg] : [arg];
                    return [2 /*return*/, (0, tezos_common_1.send_batch)(provider, args)];
            }
        });
    });
}
exports.auction_bid = auction_bid;
function cancel_auction(provider, asset_type, seller, use_all) {
    if (use_all === void 0) { use_all = false; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, asset, arg_approve, contract, parameter, arg, args;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = seller;
                    if (_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 1:
                    _a = (_b.sent());
                    _b.label = 2;
                case 2:
                    seller = _a;
                    asset = { asset_type: asset_type, value: new bignumber_js_1.default(0) };
                    return [4 /*yield*/, (0, approve_1.approve_arg)(provider, seller, asset, use_all, false, provider.config.auction_storage)];
                case 3:
                    arg_approve = _b.sent();
                    contract = (0, tezos_common_1.asset_type_contract)(provider, asset_type);
                    parameter = [
                        { string: contract },
                        { int: asset_type.token_id.toString() }
                    ];
                    arg = { destination: provider.config.auction, entrypoint: "cancel_auction", parameter: parameter };
                    args = (arg_approve) ? [arg_approve, arg] : [arg];
                    return [2 /*return*/, (0, tezos_common_1.send_batch)(provider, args)];
            }
        });
    });
}
exports.cancel_auction = cancel_auction;
