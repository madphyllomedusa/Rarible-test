"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testScript = void 0;
var index_1 = require("./index");
var in_memory_provider_1 = require("../providers/in_memory/in_memory_provider");
var yargs_1 = require("yargs");
var bignumber_js_1 = require("bignumber.js");
var tezos_contracts_1 = require("@rarible/tezos-contracts");
var tezos_common_1 = require("@rarible/tezos-common");
var node_fetch_1 = require("node-fetch");
function testScript(operation, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var argv, action, token_id_opt, token_id, royalties0, royalties, amount, metadata, devNode, tezos, config, devConfig, provider, to, _a, owner, _b, fee_receiver, _c, asset_class, _d, op_transfer, op_mint, op_burn, meta, op_deploy_fa2, op_deploy_royalties, op_token_metadata, op_metadata_uri, op_deploy_fill, publicKey, maker, _e, contract, tokenId, asset, request, order, publicKey, maker, _f, contract, tokenId, asset, request, order, _g, _h, _j, _k, response, order, _l, op, e_1, op_deploy_exchange, op_deploy_transfer_proxy, op_deploy_transfer_manager, arg_update, op_update;
        var _m, _o;
        return __generator(this, function (_p) {
            switch (_p.label) {
                case 0: return [4 /*yield*/, (0, yargs_1.default)(process.argv.slice(2)).options({
                        edsk: { type: 'string', default: 'edskRqrEPcFetuV7xDMMFXHLMPbsTawXZjH9yrEz4RBqH1D6H8CeZTTtjGA3ynjTqD8Sgmksi7p5g3u5KUEVqX2EWrRnq5Bymj' },
                        endpoint: { type: 'string', default: 'https://test-tezos-node.rarible.org' },
                        exchange: { type: 'string', default: 'KT1S6H2FWxrpaD7aPRSW1cTTE1xPucXBSTL5' },
                        // contract: {type: 'string', default: 'KT1VnhPmUJnEH5dfeD8WW87LCoxdhGUUVfMV'},
                        contract: { type: 'string', default: 'KT1EreNsT2gXRvuTUrpx6Ju4WMug5xcEpr43' },
                        royalties_contract: { type: 'string', default: 'KT1AZfqFGFLMUrscNFyawDYAyqXYydz714ya' },
                        token_id: { type: 'number' },
                        royalties: { type: 'string', default: '{}' },
                        amount: { type: 'number' },
                        metadata: { type: 'string', default: '{}' },
                        metadata_key: { type: 'string', default: '' },
                        metadata_value: { type: 'string', default: '' },
                        to: { type: 'string' },
                        owner: { type: 'string' },
                        receiver: { type: 'string' },
                        fee: { type: 'number', default: 0 },
                        operator: { type: 'string', default: '' },
                        fill: { type: 'string', default: 'KT1FAndThSQsVqYQVPHGSG5sQPk1XZycNBvL' },
                        transfer_proxy: { type: 'string', default: 'KT1WbVjXdmBpzzVoYSSUiNt6QFnSC3W768d1' },
                        transfer_manager: { type: 'string', default: 'KT1L1WfmvjQRTRqT8Zv4qey4vdZbyML43UT4' },
                        fee_receiver: { type: 'string' },
                        protocol_fee: { type: 'number', default: 0 },
                        wrapper: { type: 'string', default: '' },
                        item_id: { type: 'string', default: '' },
                        order_id: { type: 'string', default: '' },
                        ft_contract: { type: 'string', default: 'KT1LJSq4mhyLtPKrncLXerwAF2Xvk7eU3KJX' },
                        ft_token_id: { type: 'string', default: undefined },
                        is_dev: { type: 'boolean', default: false }
                    }).argv];
                case 1:
                    argv = _p.sent();
                    argv = __assign(__assign({}, argv), options);
                    action = operation !== null && operation !== void 0 ? operation : argv._[0];
                    token_id_opt = (argv.token_id != undefined) ? new bignumber_js_1.default(argv.token_id) : undefined;
                    token_id = (argv.token_id != undefined) ? new bignumber_js_1.default(argv.token_id) : new bignumber_js_1.default(0);
                    royalties0 = JSON.parse(argv.royalties);
                    royalties = {};
                    if (royalties0) {
                        Object.keys(royalties0).forEach(function (k) {
                            royalties[k] = new bignumber_js_1.default(royalties0[k]);
                        });
                    }
                    amount = (argv.amount) ? new bignumber_js_1.default(argv.amount) : undefined;
                    metadata = JSON.parse(argv.metadata);
                    devNode = "https://dev-tezos-node.rarible.org";
                    tezos = (0, in_memory_provider_1.in_memory_provider)(argv.edsk, argv.is_dev ? devNode : argv.endpoint);
                    config = {
                        exchange: argv.exchange,
                        transfer_proxy: argv.transfer_proxy,
                        fees: new bignumber_js_1.default(argv.protocol_fee),
                        nft_public: "",
                        mt_public: "",
                        api: "https://test-tezos-api.rarible.org/v0.1",
                        api_permit: "https://test-tezos-api.rarible.org/v0.1",
                        permit_whitelist: [],
                        wrapper: argv.wrapper,
                        auction: "",
                        auction_storage: "",
                        node_url: argv.endpoint,
                    };
                    devConfig = {
                        exchange: "KT1KDFn2Rfg597Rq14xrD2gtEEy2PP4F6kag",
                        transfer_proxy: "KT1PZGQqjcL3ww2zNyvbZY4SwBDNumTr6bmz",
                        fees: new bignumber_js_1.default(argv.protocol_fee),
                        nft_public: "",
                        mt_public: "",
                        api: "https://dev-tezos-api.rarible.org/v0.1",
                        api_permit: "https://dev-tezos-api.rarible.org/v0.1",
                        permit_whitelist: [],
                        wrapper: "",
                        auction: "",
                        auction_storage: "",
                        node_url: devNode,
                    };
                    provider = {
                        tezos: tezos,
                        config: argv.is_dev ? devConfig : config
                    };
                    console.log('is_dev=', !!argv.is_dev);
                    if (!(argv.to)) return [3 /*break*/, 2];
                    _a = argv.to;
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, provider.tezos.address()];
                case 3:
                    _a = _p.sent();
                    _p.label = 4;
                case 4:
                    to = _a;
                    if (!(argv.owner)) return [3 /*break*/, 5];
                    _b = argv.owner;
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, provider.tezos.address()];
                case 6:
                    _b = _p.sent();
                    _p.label = 7;
                case 7:
                    owner = _b;
                    if (!(argv.fee_receiver)) return [3 /*break*/, 8];
                    _c = argv.fee_receiver;
                    return [3 /*break*/, 10];
                case 8: return [4 /*yield*/, provider.tezos.address()];
                case 9:
                    _c = _p.sent();
                    _p.label = 10;
                case 10:
                    fee_receiver = _c;
                    asset_class = (amount == undefined) ? "NFT" : "MT";
                    _d = action;
                    switch (_d) {
                        case 'transfer': return [3 /*break*/, 11];
                        case 'mint': return [3 /*break*/, 14];
                        case 'burn': return [3 /*break*/, 17];
                        case 'deploy_nft': return [3 /*break*/, 20];
                        case 'deploy_royalties': return [3 /*break*/, 23];
                        case 'set_token_metadata': return [3 /*break*/, 26];
                        case 'set_metadata': return [3 /*break*/, 29];
                        case 'deploy_fill': return [3 /*break*/, 32];
                        case 'sell': return [3 /*break*/, 35];
                        case 'sell_with_ft': return [3 /*break*/, 39];
                        case "fill": return [3 /*break*/, 43];
                        case "get_decimals": return [3 /*break*/, 53];
                        case 'deploy_exchange': return [3 /*break*/, 54];
                        case 'deploy_transfer_proxy': return [3 /*break*/, 57];
                        case 'deploy_transfer_manager': return [3 /*break*/, 60];
                        case 'update_operators_for_all': return [3 /*break*/, 63];
                    }
                    return [3 /*break*/, 66];
                case 11:
                    console.log("transfer");
                    return [4 /*yield*/, (0, index_1.transfer)(provider, { asset_class: asset_class, contract: argv.contract, token_id: token_id }, to, amount)];
                case 12:
                    op_transfer = _p.sent();
                    return [4 /*yield*/, op_transfer.confirmation()];
                case 13:
                    _p.sent();
                    console.log(op_transfer.hash);
                    return [3 /*break*/, 66];
                case 14:
                    console.log("mint");
                    return [4 /*yield*/, (0, index_1.mint)(provider, argv.contract, royalties, amount, token_id_opt, metadata, argv.owner)];
                case 15:
                    op_mint = _p.sent();
                    return [4 /*yield*/, op_mint.confirmation()];
                case 16:
                    _p.sent();
                    console.log("minted item=".concat(argv.contract, ":").concat(op_mint.token_id.toString(), " hash=").concat(op_mint.hash));
                    return [2 /*return*/, "".concat(argv.contract, ":").concat(op_mint.token_id.toString())];
                case 17:
                    console.log("burn");
                    return [4 /*yield*/, (0, index_1.burn)(provider, { asset_class: asset_class, contract: argv.contract, token_id: token_id }, amount)];
                case 18:
                    op_burn = _p.sent();
                    return [4 /*yield*/, op_burn.confirmation()];
                case 19:
                    _p.sent();
                    console.log(op_burn.hash);
                    return [3 /*break*/, 66];
                case 20:
                    console.log("deploy nft");
                    meta = {
                        name: 'My NFT collection',
                        symbol: 'MYNFT',
                        contractURI: 'https://ipfs.io/ipfs/QmTKxwnqqxTxH4HE3UVM9yoJFZgbsZ8CuqqRFZCSWBF53m'
                    };
                    console.log(provider, owner, meta);
                    return [4 /*yield*/, (0, index_1.deploy_nft_public)(provider, owner, meta)];
                case 21:
                    op_deploy_fa2 = _p.sent();
                    return [4 /*yield*/, op_deploy_fa2.confirmation()];
                case 22:
                    _p.sent();
                    console.log(op_deploy_fa2.contract);
                    return [3 /*break*/, 66];
                case 23:
                    console.log("deploy royalties");
                    return [4 /*yield*/, (0, tezos_contracts_1.deploy_royalties)(provider, owner)];
                case 24:
                    op_deploy_royalties = _p.sent();
                    return [4 /*yield*/, op_deploy_royalties.confirmation()];
                case 25:
                    _p.sent();
                    console.log(op_deploy_royalties.contract);
                    return [3 /*break*/, 66];
                case 26:
                    console.log("set token metadata");
                    return [4 /*yield*/, (0, index_1.set_token_metadata)(provider, argv.contract, token_id, metadata)];
                case 27:
                    op_token_metadata = _p.sent();
                    return [4 /*yield*/, op_token_metadata.confirmation()];
                case 28:
                    _p.sent();
                    console.log(op_token_metadata.hash);
                    return [3 /*break*/, 66];
                case 29:
                    console.log("set metadata uri");
                    return [4 /*yield*/, (0, index_1.set_metadata)(provider, argv.contract, argv.metadata_key, argv.metadata_value)];
                case 30:
                    op_metadata_uri = _p.sent();
                    return [4 /*yield*/, op_metadata_uri.confirmation()];
                case 31:
                    _p.sent();
                    console.log(op_metadata_uri.hash);
                    return [3 /*break*/, 66];
                case 32:
                    console.log("deploy fill");
                    return [4 /*yield*/, (0, tezos_contracts_1.deploy_fill)(provider, owner)];
                case 33:
                    op_deploy_fill = _p.sent();
                    return [4 /*yield*/, op_deploy_fill.confirmation()];
                case 34:
                    _p.sent();
                    console.log(op_deploy_fill.contract);
                    return [3 /*break*/, 66];
                case 35:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, index_1.get_public_key)(provider)];
                case 36:
                    publicKey = _p.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    maker = (0, index_1.pk_to_pkh)(publicKey);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2)
                        throw new Error("item_id was not set or set incorrectly");
                    _e = __read(argv.item_id.split(":"), 2), contract = _e[0], tokenId = _e[1];
                    asset = {
                        contract: contract,
                        token_id: new bignumber_js_1.default(tokenId),
                    };
                    _m = {
                        maker: maker,
                        maker_edpk: publicKey
                    };
                    return [4 /*yield*/, (0, tezos_common_1.check_asset_type)(provider, asset)];
                case 37:
                    request = (_m.make_asset_type = _p.sent(),
                        _m.take_asset_type = {
                            asset_class: "XTZ"
                        },
                        _m.amount = new bignumber_js_1.default("1"),
                        _m.price = new bignumber_js_1.default("0.02"),
                        _m.payouts = [],
                        _m.origin_fees = [],
                        _m);
                    return [4 /*yield*/, (0, index_1.sell)(provider, request)];
                case 38:
                    order = _p.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 39:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, index_1.get_public_key)(provider)];
                case 40:
                    publicKey = _p.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    maker = (0, index_1.pk_to_pkh)(publicKey);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2)
                        throw new Error("item_id was not set or set incorrectly");
                    _f = __read(argv.item_id.split(":"), 2), contract = _f[0], tokenId = _f[1];
                    asset = {
                        contract: contract,
                        token_id: new bignumber_js_1.default(tokenId),
                    };
                    _o = {
                        maker: maker,
                        maker_edpk: publicKey
                    };
                    return [4 /*yield*/, (0, tezos_common_1.check_asset_type)(provider, asset)];
                case 41:
                    request = (_o.make_asset_type = _p.sent(),
                        _o.take_asset_type = {
                            asset_class: "FT",
                            contract: argv.ft_contract,
                            token_id: argv.ft_token_id ? new bignumber_js_1.default(argv.ft_token_id) : undefined,
                        },
                        _o.amount = new bignumber_js_1.default("1"),
                        _o.price = new bignumber_js_1.default("0.02"),
                        _o.payouts = [],
                        _o.origin_fees = [],
                        _o);
                    return [4 /*yield*/, (0, index_1.sell)(provider, request)];
                case 42:
                    order = _p.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 43:
                    _p.trys.push([43, 51, , 52]);
                    _h = (_g = console).log;
                    _k = (_j = "fill order=".concat(argv.order_id, " from ")).concat;
                    return [4 /*yield*/, provider.tezos.address()];
                case 44:
                    _h.apply(_g, [_k.apply(_j, [_p.sent()])]);
                    return [4 /*yield*/, (0, node_fetch_1.default)("".concat(provider.config.api, "/orders/").concat(argv.order_id))];
                case 45:
                    response = _p.sent();
                    if (!response.ok) return [3 /*break*/, 49];
                    _l = index_1.order_of_json;
                    return [4 /*yield*/, response.json()];
                case 46:
                    order = _l.apply(void 0, [_p.sent()]);
                    return [4 /*yield*/, (0, index_1.fill_order)(provider, order, {
                            amount: new bignumber_js_1.default(order.make.value)
                        })];
                case 47:
                    op = _p.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 48:
                    _p.sent();
                    console.log(op);
                    return [3 /*break*/, 50];
                case 49: throw new Error(response.statusText);
                case 50: return [3 /*break*/, 52];
                case 51:
                    e_1 = _p.sent();
                    try {
                        console.error(JSON.stringify(e_1, null, ' '));
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return [3 /*break*/, 52];
                case 52: return [3 /*break*/, 66];
                case 53:
                    {
                        try {
                            return [2 /*return*/, (0, index_1.get_decimals)(provider, argv.ft_contract, argv.ft_token_id)];
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                    _p.label = 54;
                case 54:
                    console.log("deploy exchange");
                    return [4 /*yield*/, (0, tezos_contracts_1.deploy_exchange)(provider, owner, argv.transfer_manager, argv.royalties_contract, argv.fill)];
                case 55:
                    op_deploy_exchange = _p.sent();
                    return [4 /*yield*/, op_deploy_exchange.confirmation()];
                case 56:
                    _p.sent();
                    console.log(op_deploy_exchange.contract);
                    return [3 /*break*/, 66];
                case 57:
                    console.log("deploy transfer proxy");
                    return [4 /*yield*/, (0, tezos_contracts_1.deploy_transfer_proxy)(provider, owner)];
                case 58:
                    op_deploy_transfer_proxy = _p.sent();
                    return [4 /*yield*/, op_deploy_transfer_proxy.confirmation()];
                case 59:
                    _p.sent();
                    console.log(op_deploy_transfer_proxy.contract);
                    return [3 /*break*/, 66];
                case 60:
                    console.log("deploy transfer manager");
                    return [4 /*yield*/, (0, tezos_contracts_1.deploy_transfer_manager)(provider, owner, fee_receiver, new bignumber_js_1.default(argv.protocol_fee))];
                case 61:
                    op_deploy_transfer_manager = _p.sent();
                    return [4 /*yield*/, op_deploy_transfer_manager.confirmation()];
                case 62:
                    _p.sent();
                    console.log(op_deploy_transfer_manager.contract);
                    return [3 /*break*/, 66];
                case 63:
                    console.log('update operators for all');
                    arg_update = {
                        destination: argv.contract,
                        entrypoint: "update_operators_for_all",
                        parameter: [{ prim: 'Left', args: [{ string: argv.operator }] }]
                    };
                    return [4 /*yield*/, (0, tezos_common_1.send)(provider, arg_update)];
                case 64:
                    op_update = _p.sent();
                    return [4 /*yield*/, op_update.confirmation()];
                case 65:
                    _p.sent();
                    console.log(op_update.hash);
                    return [3 /*break*/, 66];
                case 66: return [2 /*return*/];
            }
        });
    });
}
exports.testScript = testScript;
// testScript()
