"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mint = exports.mint_arg = exports.mint_mt = exports.mint_mt_arg = exports.mint_nft = exports.mint_nft_arg = exports.set_token_metadata = exports.metadata_arg = exports.get_next_token_id = void 0;
var tezos_common_1 = require("@rarible/tezos-common");
var bignumber_js_1 = require("bignumber.js");
var node_fetch_1 = require("node-fetch");
function mint_param(token_id, owner, metadata, royalties, amount) {
    var meta = Object.keys(metadata).map(function (k) { return { prim: 'Elt', args: [{ string: k }, { bytes: (0, tezos_common_1.to_hex)(metadata[k]) }] }; });
    var roya = Object.keys(royalties).map(function (k) { return [{ string: k }, { int: royalties[k].toString() }]; });
    if (amount == undefined)
        return [{ int: token_id.toString() }, { string: owner }, meta, roya];
    else
        return [{ int: token_id.toString() }, { string: owner }, { int: amount.toString() }, meta, roya];
}
function metadata_param(token_id, metadata) {
    return [
        { int: token_id.toString() },
        Object.keys(metadata).sort().map(function (k) { return { prim: 'Elt', args: [{ string: k }, { bytes: (0, tezos_common_1.to_hex)(metadata[k]) }] }; })
    ];
}
function get_next_token_id(provider, contract) {
    return __awaiter(this, void 0, void 0, function () {
        var r, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, node_fetch_1.default)(provider.config.api + '/collections/' + contract + '/generate_token_id')];
                case 1:
                    r = _a.sent();
                    if (!r.ok) return [3 /*break*/, 3];
                    return [4 /*yield*/, r.json()];
                case 2:
                    json = _a.sent();
                    return [2 /*return*/, new bignumber_js_1.default(json.tokenId)];
                case 3: throw new Error(r.statusText);
            }
        });
    });
}
exports.get_next_token_id = get_next_token_id;
function metadata_arg(contract, token_id, metadata) {
    return {
        destination: contract,
        entrypoint: "setTokenMetadata",
        parameter: metadata_param(token_id, metadata)
    };
}
exports.metadata_arg = metadata_arg;
function set_token_metadata(provider, contract, token_id, metadata) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, (0, tezos_common_1.send)(provider, metadata_arg(contract, token_id, metadata))];
        });
    });
}
exports.set_token_metadata = set_token_metadata;
function mint_nft_arg(provider, contract, royalties, token_id, metadata, owner) {
    return __awaiter(this, void 0, void 0, function () {
        var owner2, _a, meta, next_id, _b, parameter;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(owner)) return [3 /*break*/, 1];
                    _a = owner;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 2:
                    _a = _c.sent();
                    _c.label = 3;
                case 3:
                    owner2 = _a;
                    meta = (metadata == undefined) ? {} : metadata;
                    if (!(token_id != undefined)) return [3 /*break*/, 4];
                    _b = token_id;
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, get_next_token_id(provider, contract)];
                case 5:
                    _b = _c.sent();
                    _c.label = 6;
                case 6:
                    next_id = _b;
                    parameter = mint_param(next_id, owner2, meta, royalties);
                    return [2 /*return*/, [next_id, { destination: contract, entrypoint: 'mint', parameter: parameter }]];
            }
        });
    });
}
exports.mint_nft_arg = mint_nft_arg;
function mint_nft(provider, contract, royalties, token_id, metadata, owner) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, next_id, arg, op;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, mint_nft_arg(provider, contract, royalties, token_id, metadata, owner)];
                case 1:
                    _a = __read.apply(void 0, [_b.sent(), 2]), next_id = _a[0], arg = _a[1];
                    return [4 /*yield*/, (0, tezos_common_1.send)(provider, arg)];
                case 2:
                    op = _b.sent();
                    return [2 /*return*/, __assign(__assign({}, op), { token_id: next_id })];
            }
        });
    });
}
exports.mint_nft = mint_nft;
function mint_mt_arg(provider, contract, royalties, supply, token_id, metadata, owner) {
    return __awaiter(this, void 0, void 0, function () {
        var owner2, _a, meta, next_id, _b, parameter;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(owner)) return [3 /*break*/, 1];
                    _a = owner;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 2:
                    _a = _c.sent();
                    _c.label = 3;
                case 3:
                    owner2 = _a;
                    meta = (metadata == undefined) ? {} : metadata;
                    if (!(token_id != undefined)) return [3 /*break*/, 4];
                    _b = token_id;
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, get_next_token_id(provider, contract)];
                case 5:
                    _b = _c.sent();
                    _c.label = 6;
                case 6:
                    next_id = _b;
                    parameter = mint_param(next_id, owner2, meta, royalties, supply);
                    return [2 /*return*/, [next_id, { destination: contract, entrypoint: 'mint', parameter: parameter }]];
            }
        });
    });
}
exports.mint_mt_arg = mint_mt_arg;
function mint_mt(provider, contract, royalties, supply, token_id, metadata, owner) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, next_id, arg, op;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, mint_mt_arg(provider, contract, royalties, supply, token_id, metadata, owner)];
                case 1:
                    _a = __read.apply(void 0, [_b.sent(), 2]), next_id = _a[0], arg = _a[1];
                    return [4 /*yield*/, (0, tezos_common_1.send)(provider, arg)];
                case 2:
                    op = _b.sent();
                    return [2 /*return*/, __assign(__assign({}, op), { token_id: next_id })];
            }
        });
    });
}
exports.mint_mt = mint_mt;
function mint_arg(provider, contract, royalties, supply, token_id, metadata, owner) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (supply != undefined) {
                return [2 /*return*/, mint_mt_arg(provider, contract, royalties, supply, token_id, metadata, owner)];
            }
            else {
                return [2 /*return*/, mint_nft_arg(provider, contract, royalties, token_id, metadata, owner)];
            }
            return [2 /*return*/];
        });
    });
}
exports.mint_arg = mint_arg;
function mint(provider, contract, royalties, supply, token_id, metadata, owner) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (supply != undefined) {
                return [2 /*return*/, mint_mt(provider, contract, royalties, supply, token_id, metadata, owner)];
            }
            else {
                return [2 /*return*/, mint_nft(provider, contract, royalties, token_id, metadata, owner)];
            }
            return [2 /*return*/];
        });
    });
}
exports.mint = mint;
