"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transfer = exports.transfer_arg = exports.transfer_mt = exports.transfer_mt_arg = exports.transfer_nft = exports.transfer_nft_arg = void 0;
var tezos_common_1 = require("@rarible/tezos-common");
var tezos_common_2 = require("@rarible/tezos-common");
var bignumber_js_1 = require("bignumber.js");
function transfer_param(from, to, token_id, token_amount) {
    var amount = (token_amount) ? token_amount : token_id.map(function (_) { return new bignumber_js_1.default(1); });
    return [
        {
            prim: 'Pair',
            args: [
                { string: from },
                token_id.map(function (id, i) {
                    return {
                        prim: 'Pair',
                        args: [
                            { string: to },
                            { prim: 'Pair', args: [{ int: id.toString() }, { int: amount[i].toString() }] }
                        ]
                    };
                })
            ]
        }
    ];
}
function transfer_nft_arg(contract, from, to, token_id) {
    var parameter = transfer_param(from, to, [token_id]);
    return { destination: contract, entrypoint: 'transfer', parameter: parameter };
}
exports.transfer_nft_arg = transfer_nft_arg;
function transfer_nft(provider, contract, from, to, token_id) {
    return __awaiter(this, void 0, void 0, function () {
        var arg;
        return __generator(this, function (_a) {
            arg = transfer_nft_arg(contract, from, to, token_id);
            return [2 /*return*/, (0, tezos_common_1.send)(provider, arg)];
        });
    });
}
exports.transfer_nft = transfer_nft;
function transfer_mt_arg(contract, from, to, token_id, token_amount) {
    var ids = (Array.isArray(token_id)) ? token_id : [token_id];
    var amounts = (Array.isArray(token_amount)) ? token_amount : [token_amount];
    var parameter = transfer_param(from, to, ids, amounts);
    return { destination: contract, entrypoint: 'transfer', parameter: parameter };
}
exports.transfer_mt_arg = transfer_mt_arg;
function transfer_mt(provider, contract, from, to, token_id, token_amount) {
    return __awaiter(this, void 0, void 0, function () {
        var arg;
        return __generator(this, function (_a) {
            arg = transfer_mt_arg(contract, from, to, token_id, token_amount);
            return [2 /*return*/, (0, tezos_common_1.send)(provider, arg)];
        });
    });
}
exports.transfer_mt = transfer_mt;
function transfer_arg(provider, asset_type, to, amount) {
    return __awaiter(this, void 0, void 0, function () {
        var from, checked_asset, dst_nft, dst_mt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 1:
                    from = _a.sent();
                    return [4 /*yield*/, (0, tezos_common_2.check_asset_type)(provider, asset_type)];
                case 2:
                    checked_asset = _a.sent();
                    switch (checked_asset.asset_class) {
                        case "NFT":
                            dst_nft = checked_asset.contract || provider.config.nft_public;
                            if (amount == undefined || amount == new bignumber_js_1.default(1))
                                return [2 /*return*/, transfer_nft_arg(dst_nft, from, to, checked_asset.token_id)];
                            else
                                throw new Error("Cannot transfer an amount of NFT token");
                        case "MT":
                            dst_mt = checked_asset.contract || provider.config.mt_public;
                            if (amount != undefined)
                                return [2 /*return*/, transfer_mt_arg(dst_mt, from, to, checked_asset.token_id, amount)];
                            else
                                throw new Error("Cannot transfer an undefined amount of MT token");
                        default:
                            throw new Error("Cannot transfer non NFT/MT tokens");
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.transfer_arg = transfer_arg;
function transfer(provider, asset_type, to, amount) {
    return __awaiter(this, void 0, void 0, function () {
        var arg;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, transfer_arg(provider, asset_type, to, amount)];
                case 1:
                    arg = _a.sent();
                    return [2 /*return*/, (0, tezos_common_1.send)(provider, arg)];
            }
        });
    });
}
exports.transfer = transfer;
