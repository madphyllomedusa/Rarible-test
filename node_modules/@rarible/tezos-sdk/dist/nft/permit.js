"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.set_expiry = exports.add_permit = exports.make_permit = exports.get_counter = void 0;
var tezos_common_1 = require("@rarible/tezos-common");
var michel_codec_1 = require("@taquito/michel-codec");
var bignumber_js_1 = require("bignumber.js");
var blake = require('blakejs');
function pack(data, type) {
    return (0, michel_codec_1.packDataBytes)(data, type).bytes;
}
var transfer_type = {
    prim: "list", args: [
        { prim: "pair", args: [
                { prim: "address" },
                { prim: "list", args: [
                        { prim: "pair", args: [
                                { prim: "address" }, { prim: "nat" }, { prim: "nat" }
                            ] }
                    ] }
            ] }
    ]
};
var permit_type = {
    prim: "pair", args: [
        { prim: "pair", args: [{ prim: "address" }, { prim: "chain_id" }] },
        { prim: "pair", args: [{ prim: "nat" }, { prim: "bytes" }] },
    ]
};
function get_counter(provider, contract, mandator) {
    return __awaiter(this, void 0, void 0, function () {
        var st, permits, issuer, _a, info, _e_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, provider.tezos.storage(contract)];
                case 1:
                    st = _b.sent();
                    permits = st.permits;
                    if (!(mandator == undefined)) return [3 /*break*/, 3];
                    return [4 /*yield*/, provider.tezos.address()];
                case 2:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 3:
                    _a = mandator;
                    _b.label = 4;
                case 4:
                    issuer = _a;
                    _b.label = 5;
                case 5:
                    _b.trys.push([5, 7, , 8]);
                    return [4 /*yield*/, permits.get(issuer)];
                case 6:
                    info = _b.sent();
                    if (info == undefined)
                        return [2 /*return*/, new bignumber_js_1.default(0)];
                    else
                        return [2 /*return*/, info.counter];
                    return [3 /*break*/, 8];
                case 7:
                    _e_1 = _b.sent();
                    return [2 /*return*/, new bignumber_js_1.default(0)];
                case 8: return [2 /*return*/];
            }
        });
    });
}
exports.get_counter = get_counter;
function make_permit(provider, contract, transfers, counter) {
    return __awaiter(this, void 0, void 0, function () {
        var issuer, pk, transfer_data, transfer_permit, transfer_permit_array, hash_array, hash, chain_id, counter_aux, _a, permit_data, permit, signature;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, provider.tezos.address()];
                case 1:
                    issuer = _b.sent();
                    return [4 /*yield*/, provider.tezos.public_key()];
                case 2:
                    pk = _b.sent();
                    if (pk == undefined)
                        throw new Error("cannot retrieve public key from wallet");
                    transfer_data = [{
                            prim: "Pair", args: [
                                { string: issuer },
                                transfers.map(function (tr) {
                                    return { prim: "Pair", args: [
                                            { string: tr.destination },
                                            { prim: "Pair", args: [{ int: tr.token_id.toString() }, { int: (tr.amount || new bignumber_js_1.default(1)).toString() }] }
                                        ] };
                                })
                            ]
                        }];
                    transfer_permit = pack(transfer_data, transfer_type);
                    transfer_permit_array = (0, tezos_common_1.hex_to_uint8array)(transfer_permit);
                    hash_array = blake.blake2b(transfer_permit_array, null, 32);
                    hash = (0, tezos_common_1.uint8array_to_hex)(hash_array);
                    return [4 /*yield*/, provider.tezos.chain_id()];
                case 3:
                    chain_id = _b.sent();
                    if (!(counter == undefined)) return [3 /*break*/, 5];
                    return [4 /*yield*/, get_counter(provider, contract, issuer)];
                case 4:
                    _a = _b.sent();
                    return [3 /*break*/, 6];
                case 5:
                    _a = counter;
                    _b.label = 6;
                case 6:
                    counter_aux = _a;
                    permit_data = {
                        prim: "Pair", args: [
                            { prim: "Pair", args: [{ string: contract }, { string: chain_id }] },
                            { prim: "Pair", args: [{ int: counter_aux.toString() }, { bytes: hash }] }
                        ]
                    };
                    permit = pack(permit_data, permit_type);
                    return [4 /*yield*/, provider.tezos.sign(permit)];
                case 7:
                    signature = (_b.sent()).signature;
                    return [2 /*return*/, {
                            permit: { hash: hash, signature: signature, pk: pk, contract: contract },
                            transfer: {
                                destination: contract,
                                entrypoint: "transfer",
                                parameter: transfer_data,
                                amount: new bignumber_js_1.default(0)
                            }
                        }];
            }
        });
    });
}
exports.make_permit = make_permit;
function add_permit(provider, permit) {
    return __awaiter(this, void 0, void 0, function () {
        var parameter, arg;
        return __generator(this, function (_a) {
            parameter = [
                { string: permit.pk }, { string: permit.signature }, { bytes: permit.hash }
            ];
            arg = {
                destination: permit.contract, entrypoint: "permit",
                parameter: parameter,
                amount: new bignumber_js_1.default(0)
            };
            return [2 /*return*/, (0, tezos_common_1.send)(provider, arg)];
        });
    });
}
exports.add_permit = add_permit;
function set_expiry(provider, permit, expiry, global) {
    if (global === void 0) { global = false; }
    return __awaiter(this, void 0, void 0, function () {
        var parameter, arg;
        return __generator(this, function (_a) {
            parameter = [
                { prim: "Some", args: [{ int: Math.floor(expiry.valueOf() / 1000).toString() }] },
                (global) ? { prim: "None" } : { prim: "Some", args: [{ bytes: permit.hash }] }
            ];
            arg = {
                destination: permit.contract, entrypoint: "set_expiry",
                parameter: parameter,
                amount: new bignumber_js_1.default(0)
            };
            return [2 /*return*/, (0, tezos_common_1.send)(provider, arg)];
        });
    });
}
exports.set_expiry = set_expiry;
