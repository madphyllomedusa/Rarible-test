"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy_fa1 = exports.fa1_storage = exports.fa1_code = void 0;
var tezos_common_1 = require("@rarible/tezos-common");
var bignumber_js_1 = require("bignumber.js");
exports.fa1_code = [{ "prim": "parameter",
        "args": [{ "prim": "or",
                "args": [{ "prim": "pair",
                        "args": [{ "prim": "address", "annots": ["%from"] },
                            { "prim": "pair",
                                "args": [{ "prim": "address", "annots": ["%to"] },
                                    { "prim": "nat", "annots": ["%value"] }] }],
                        "annots": ["%transfer"] },
                    { "prim": "pair",
                        "args": [{ "prim": "address", "annots": ["%spender"] },
                            { "prim": "nat", "annots": ["%value"] }],
                        "annots": ["%approve"] }] }] },
    { "prim": "storage",
        "args": [{ "prim": "pair",
                "args": [{ "prim": "nat", "annots": ["%supply"] },
                    { "prim": "pair",
                        "args": [{ "prim": "big_map",
                                "args": [{ "prim": "address" },
                                    { "prim": "pair",
                                        "args": [{ "prim": "nat", "annots": ["%balance"] },
                                            { "prim": "map",
                                                "args": [{ "prim": "address" },
                                                    { "prim": "nat" }],
                                                "annots": ["%allowances"] }] }],
                                "annots": ["%ledger"] },
                            { "prim": "big_map",
                                "args": [{ "prim": "nat" },
                                    { "prim": "pair",
                                        "args": [{ "prim": "nat" },
                                            { "prim": "map",
                                                "args": [{ "prim": "string" },
                                                    { "prim": "bytes" }] }] }],
                                "annots": ["%token_metadata"] }] }] }] },
    { "prim": "code",
        "args": [[{ "prim": "UNPAIR" },
                { "prim": "IF_LEFT",
                    "args": [[{ "prim": "SWAP" }, { "prim": "DUP" },
                            { "prim": "DUG", "args": [{ "int": "2" }] },
                            { "prim": "GET", "args": [{ "int": "3" }] },
                            { "prim": "SWAP" }, { "prim": "DUP" },
                            { "prim": "DUG", "args": [{ "int": "2" }] },
                            { "prim": "CAR" }, { "prim": "GET" },
                            { "prim": "IF_NONE",
                                "args": [[{ "prim": "PUSH",
                                            "args": [{ "prim": "nat" }, { "int": "0" }] },
                                        { "prim": "EMPTY_MAP",
                                            "args": [{ "prim": "address" }, { "prim": "nat" }] },
                                        { "prim": "SWAP" }, { "prim": "PAIR" }], []] },
                            { "prim": "SWAP" }, { "prim": "DUP" },
                            { "prim": "DUG", "args": [{ "int": "2" }] },
                            { "prim": "GET", "args": [{ "int": "4" }] },
                            { "prim": "SWAP" }, { "prim": "DUP" },
                            { "prim": "DUG", "args": [{ "int": "2" }] },
                            { "prim": "CAR" }, { "prim": "SUB" }, { "prim": "ISNAT" },
                            { "prim": "IF_NONE",
                                "args": [[{ "prim": "DROP", "args": [{ "int": "3" }] },
                                        { "prim": "PUSH",
                                            "args": [{ "prim": "string" },
                                                { "string": "NotEnoughBalance" }] },
                                        { "prim": "FAILWITH" }],
                                    [{ "prim": "SENDER" },
                                        { "prim": "DUP", "args": [{ "int": "4" }] },
                                        { "prim": "CAR" }, { "prim": "COMPARE" },
                                        { "prim": "NEQ" },
                                        { "prim": "IF",
                                            "args": [[{ "prim": "SWAP" }, { "prim": "DUP" },
                                                    { "prim": "DUG",
                                                        "args": [{ "int": "2" }] },
                                                    { "prim": "SENDER" }, { "prim": "SWAP" },
                                                    { "prim": "CDR" }, { "prim": "SWAP" },
                                                    { "prim": "GET" },
                                                    { "prim": "IF_NONE",
                                                        "args": [[{ "prim": "PUSH",
                                                                    "args": [{ "prim": "nat" },
                                                                        { "int": "0" }] }], []] },
                                                    { "prim": "DUP",
                                                        "args": [{ "int": "4" }] },
                                                    { "prim": "GET",
                                                        "args": [{ "int": "4" }] },
                                                    { "prim": "SWAP" }, { "prim": "SUB" },
                                                    { "prim": "ISNAT" },
                                                    { "prim": "IF_NONE",
                                                        "args": [[{ "prim": "DROP",
                                                                    "args": [{ "int": "2" }] },
                                                                { "prim": "PUSH",
                                                                    "args": [{ "prim": "string" },
                                                                        { "string": "NotEnoughAllowance" }] },
                                                                { "prim": "FAILWITH" }],
                                                            [{ "prim": "DIG",
                                                                    "args": [{ "int": "2" }] },
                                                                { "prim": "CDR" },
                                                                { "prim": "SWAP" },
                                                                { "prim": "SOME" },
                                                                { "prim": "SENDER" },
                                                                { "prim": "UPDATE" },
                                                                { "prim": "SWAP" },
                                                                { "prim": "PAIR" }]] }],
                                                [{ "prim": "UPDATE",
                                                        "args": [{ "int": "1" }] }]] },
                                        { "prim": "DIG", "args": [{ "int": "2" }] },
                                        { "prim": "DUP" },
                                        { "prim": "GET", "args": [{ "int": "3" }] },
                                        { "prim": "DIG", "args": [{ "int": "2" }] },
                                        { "prim": "SOME" },
                                        { "prim": "DUP", "args": [{ "int": "4" }] },
                                        { "prim": "CAR" }, { "prim": "UPDATE" },
                                        { "prim": "UPDATE", "args": [{ "int": "3" }] },
                                        { "prim": "DUP" },
                                        { "prim": "GET", "args": [{ "int": "3" }] },
                                        { "prim": "DUP", "args": [{ "int": "3" }] },
                                        { "prim": "GET", "args": [{ "int": "3" }] },
                                        { "prim": "GET" },
                                        { "prim": "IF_NONE",
                                            "args": [[{ "prim": "PUSH",
                                                        "args": [{ "prim": "nat" }, { "int": "0" }] },
                                                    { "prim": "EMPTY_MAP",
                                                        "args": [{ "prim": "address" },
                                                            { "prim": "nat" }] },
                                                    { "prim": "SWAP" }, { "prim": "PAIR" }],
                                                []] }, { "prim": "DUP" },
                                        { "prim": "DUP", "args": [{ "int": "4" }] },
                                        { "prim": "GET", "args": [{ "int": "4" }] },
                                        { "prim": "DIG", "args": [{ "int": "2" }] },
                                        { "prim": "CAR" }, { "prim": "ADD" },
                                        { "prim": "UPDATE", "args": [{ "int": "1" }] },
                                        { "prim": "SWAP" }, { "prim": "DUP" },
                                        { "prim": "GET", "args": [{ "int": "3" }] },
                                        { "prim": "DIG", "args": [{ "int": "2" }] },
                                        { "prim": "SOME" },
                                        { "prim": "DIG", "args": [{ "int": "3" }] },
                                        { "prim": "GET", "args": [{ "int": "3" }] },
                                        { "prim": "UPDATE" },
                                        { "prim": "UPDATE", "args": [{ "int": "3" }] },
                                        { "prim": "NIL",
                                            "args": [{ "prim": "operation" }] },
                                        { "prim": "PAIR" }]] }],
                        [{ "prim": "SWAP" }, { "prim": "DUP" },
                            { "prim": "DUG", "args": [{ "int": "2" }] },
                            { "prim": "SENDER" }, { "prim": "SWAP" },
                            { "prim": "GET", "args": [{ "int": "3" }] },
                            { "prim": "SWAP" }, { "prim": "GET" },
                            { "prim": "IF_NONE",
                                "args": [[{ "prim": "PUSH",
                                            "args": [{ "prim": "nat" }, { "int": "0" }] },
                                        { "prim": "EMPTY_MAP",
                                            "args": [{ "prim": "address" }, { "prim": "nat" }] },
                                        { "prim": "SWAP" }, { "prim": "PAIR" }], []] },
                            { "prim": "PUSH",
                                "args": [{ "prim": "nat" }, { "int": "0" }] },
                            { "prim": "DUP", "args": [{ "int": "3" }] },
                            { "prim": "CDR" }, { "prim": "COMPARE" }, { "prim": "GT" },
                            { "prim": "PUSH",
                                "args": [{ "prim": "nat" }, { "int": "0" }] },
                            { "prim": "DUP", "args": [{ "int": "3" }] },
                            { "prim": "CDR" },
                            { "prim": "DUP", "args": [{ "int": "5" }] },
                            { "prim": "CAR" }, { "prim": "GET" },
                            { "prim": "IF_NONE",
                                "args": [[{ "prim": "PUSH",
                                            "args": [{ "prim": "nat" }, { "int": "0" }] }],
                                    []] }, { "prim": "COMPARE" }, { "prim": "GT" },
                            { "prim": "AND" },
                            { "prim": "IF",
                                "args": [[{ "prim": "PUSH",
                                            "args": [{ "prim": "string" },
                                                { "string": "UnsafeAllowanceChange" }] },
                                        { "prim": "FAILWITH" }], []] },
                            { "prim": "DIG", "args": [{ "int": "2" }] },
                            { "prim": "DUP" },
                            { "prim": "GET", "args": [{ "int": "3" }] },
                            { "prim": "DIG", "args": [{ "int": "2" }] },
                            { "prim": "DUP" }, { "prim": "CDR" },
                            { "prim": "DUP", "args": [{ "int": "5" }] },
                            { "prim": "CDR" }, { "prim": "SOME" },
                            { "prim": "DIG", "args": [{ "int": "5" }] },
                            { "prim": "CAR" }, { "prim": "UPDATE" },
                            { "prim": "UPDATE", "args": [{ "int": "2" }] },
                            { "prim": "SOME" }, { "prim": "SENDER" },
                            { "prim": "UPDATE" },
                            { "prim": "UPDATE", "args": [{ "int": "3" }] },
                            { "prim": "NIL", "args": [{ "prim": "operation" }] },
                            { "prim": "PAIR" }]] }]] },
    { "prim": "view",
        "args": [{ "string": "getBalance" }, { "prim": "address" }, { "prim": "nat" },
            [{ "prim": "UNPAIR" }, { "prim": "SWAP" },
                { "prim": "GET", "args": [{ "int": "3" }] }, { "prim": "SWAP" },
                { "prim": "GET" },
                { "prim": "IF_NONE",
                    "args": [[{ "prim": "PUSH",
                                "args": [{ "prim": "nat" }, { "int": "0" }] },
                            { "prim": "EMPTY_MAP",
                                "args": [{ "prim": "address" }, { "prim": "nat" }] },
                            { "prim": "SWAP" }, { "prim": "PAIR" }], []] },
                { "prim": "CAR" }]] },
    { "prim": "view",
        "args": [{ "string": "getAllowance" },
            { "prim": "pair",
                "args": [{ "prim": "address", "annots": ["%owner"] },
                    { "prim": "address", "annots": ["%spender"] }] },
            { "prim": "nat" },
            [{ "prim": "UNPAIR" }, { "prim": "SWAP" },
                { "prim": "GET", "args": [{ "int": "3" }] }, { "prim": "SWAP" },
                { "prim": "DUP" }, { "prim": "DUG", "args": [{ "int": "2" }] },
                { "prim": "CAR" }, { "prim": "GET" },
                { "prim": "IF_NONE",
                    "args": [[{ "prim": "PUSH",
                                "args": [{ "prim": "nat" }, { "int": "0" }] },
                            { "prim": "EMPTY_MAP",
                                "args": [{ "prim": "address" }, { "prim": "nat" }] },
                            { "prim": "SWAP" }, { "prim": "PAIR" }], []] },
                { "prim": "CDR" }, { "prim": "SWAP" }, { "prim": "CDR" },
                { "prim": "GET" },
                { "prim": "IF_NONE",
                    "args": [[{ "prim": "PUSH",
                                "args": [{ "prim": "nat" }, { "int": "0" }] }], []] }]] },
    { "prim": "view",
        "args": [{ "string": "getTotalSupply" }, { "prim": "unit" },
            { "prim": "nat" }, [{ "prim": "CDR" }, { "prim": "CAR" }]] }];
function fa1_storage(owner, supply, decimals, name, symbol, uri) {
    var sup = supply.times((new bignumber_js_1.default(10)).pow(new bignumber_js_1.default(decimals))).toString();
    var ledger = [{ "prim": "Elt", "args": [
                { "string": owner },
                { "prim": "Pair", "args": [
                        { "int": sup },
                        []
                    ] }
            ] }];
    var metadata = [
        { "prim": "Elt", "args": [{ "string": "decimals" }, { "bytes": (0, tezos_common_1.to_hex)(decimals.toString()) }] }
    ];
    if (name != undefined) {
        metadata = metadata.concat({ "prim": "Elt", "args": [{ "string": "name" }, { "bytes": (0, tezos_common_1.to_hex)(name) }] });
    }
    if (symbol != undefined) {
        metadata = metadata.concat({ "prim": "Elt", "args": [{ "string": "symbol" }, { "bytes": (0, tezos_common_1.to_hex)(symbol) }] });
    }
    if (uri != undefined) {
        metadata = metadata.concat({ "prim": "Elt", "args": [{ "string": "" }, { "bytes": (0, tezos_common_1.to_hex)(uri) }] });
    }
    var st = {
        "prim": "Pair", "args": [
            { "int": sup },
            { "prim": "Pair", "args": [
                    ledger,
                    [{ "prim": "Elt", "args": [
                                { "int": "0" },
                                { "prim": "Pair", "args": [
                                        { "int": "0" },
                                        metadata
                                    ] }
                            ] }]
                ] }
        ]
    };
    return st;
}
exports.fa1_storage = fa1_storage;
function deploy_fa1(provider, owner, supply, decimals, name, symbol, uri) {
    return __awaiter(this, void 0, void 0, function () {
        var init;
        return __generator(this, function (_a) {
            init = fa1_storage(owner, supply, decimals, name, symbol, uri);
            return [2 /*return*/, provider.tezos.originate({ init: init, code: exports.fa1_code })];
        });
    });
}
exports.deploy_fa1 = deploy_fa1;
