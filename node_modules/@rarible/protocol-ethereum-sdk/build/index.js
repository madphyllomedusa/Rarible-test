"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isErc721v1Collection = exports.isErc1155v1Collection = exports.isErc721v3Collection = exports.isErc721v2Collection = exports.isErc1155v2Collection = exports.createRaribleSdk = void 0;
var tslib_1 = require("tslib");
var config_1 = require("./config");
var upsert_order_1 = require("./order/upsert-order");
var approve_1 = require("./order/approve");
var sell_1 = require("./order/sell");
var sign_order_1 = require("./order/sign-order");
var bid_1 = require("./order/bid");
var order = (0, tslib_1.__importStar)(require("./order"));
var check_asset_type_1 = require("./order/check-asset-type");
var mint_1 = require("./nft/mint");
var transfer_1 = require("./nft/transfer");
var sign_nft_1 = require("./nft/sign-nft");
var burn_1 = require("./nft/burn");
var apis_1 = require("./common/apis");
var send_transaction_1 = require("./common/send-transaction");
var cancel_1 = require("./order/cancel");
var fill_order_1 = require("./order/fill-order");
var get_base_fee_1 = require("./common/get-base-fee");
var deploy_erc721_1 = require("./nft/deploy-erc721");
var deploy_erc1155_1 = require("./nft/deploy-erc1155");
var balances_1 = require("./common/balances");
var types_1 = require("./types");
var convert_weth_1 = require("./order/convert-weth");
var check_chain_id_1 = require("./order/check-chain-id");
var start_1 = require("./auction/start");
var cancel_2 = require("./auction/cancel");
var finish_1 = require("./auction/finish");
var put_bid_1 = require("./auction/put-bid");
var buy_out_1 = require("./auction/buy-out");
var logger_1 = require("./common/logger/logger");
var common_1 = require("./auction/common");
// noinspection JSUnusedGlobalSymbols
function createRaribleSdk(ethereum, env, sdkConfig) {
    var _a;
    var config = (0, config_1.getEthereumConfig)(env);
    var apis = (0, apis_1.createEthereumApis)(env, sdkConfig === null || sdkConfig === void 0 ? void 0 : sdkConfig.apiClientParams);
    var checkWalletChainId = check_chain_id_1.checkChainId.bind(null, ethereum, config);
    var sendWithInjects = partialCall((0, send_transaction_1.getSendWithInjects)({
        logger: {
            instance: (0, logger_1.createRemoteLogger)({ ethereum: ethereum, env: (0, logger_1.getEnvironment)(env) }),
            level: (_a = sdkConfig === null || sdkConfig === void 0 ? void 0 : sdkConfig.logs) !== null && _a !== void 0 ? _a : types_1.LogsLevel.DISABLED,
        },
    }), apis.gateway);
    var send = partialCall(sendWithInjects, checkWalletChainId);
    var checkLazyAssetType = partialCall(order.checkLazyAssetType, apis.nftItem);
    var checkLazyAsset = partialCall(order.checkLazyAsset, checkLazyAssetType);
    var checkLazyOrder = order.checkLazyOrder.bind(null, checkLazyAsset);
    var checkAssetType = partialCall(check_asset_type_1.checkAssetType, apis.nftCollection);
    var getBaseOrderFee = get_base_fee_1.getBaseFee.bind(null, config, env);
    var filler = new fill_order_1.OrderFiller(ethereum, send, config, apis, getBaseOrderFee, sdkConfig);
    var approveFn = partialCall(approve_1.approve, ethereum, send, config.transferProxies);
    var upsertService = new upsert_order_1.UpsertOrder(filler, send, checkLazyOrder, partialCall(approve_1.approve, ethereum, send, config.transferProxies), partialCall(sign_order_1.signOrder, ethereum, config), apis.order, ethereum, checkWalletChainId);
    var sellService = new sell_1.OrderSell(upsertService, checkAssetType, checkWalletChainId);
    var bidService = new bid_1.OrderBid(upsertService, checkAssetType, checkWalletChainId);
    var wethConverter = new convert_weth_1.ConvertWeth(ethereum, send, config);
    var startAuctionService = new start_1.StartAuction(ethereum, send, config, env, approveFn, apis);
    var putAuctionBidService = new put_bid_1.PutAuctionBid(ethereum, send, config, env, approveFn, apis);
    var buyOutAuctionService = new buy_out_1.BuyoutAuction(ethereum, send, config, env, approveFn, apis);
    return {
        apis: apis,
        order: {
            sell: sellService.sell,
            sellUpdate: sellService.update,
            fill: filler.fill,
            buy: filler.buy,
            acceptBid: filler.acceptBid,
            getFillTxData: filler.getTransactionData,
            getBuyTxData: filler.getBuyTx,
            bid: bidService.bid,
            bidUpdate: bidService.update,
            upsert: upsertService.upsert,
            cancel: partialCall(cancel_1.cancel, checkLazyOrder, ethereum, send, config.exchange, checkWalletChainId),
            getBaseOrderFee: getBaseOrderFee,
            getBaseOrderFillFee: filler.getBaseOrderFillFee,
        },
        auction: {
            start: startAuctionService.start,
            cancel: cancel_2.cancelAuction.bind(null, ethereum, send, config, apis),
            finish: finish_1.finishAuction.bind(null, ethereum, send, config, apis),
            putBid: putAuctionBidService.putBid,
            buyOut: buyOutAuctionService.buyout,
            getHash: common_1.getAuctionHash.bind(null, ethereum, config),
        },
        nft: {
            mint: partialCall(mint_1.mint, ethereum, send, partialCall(sign_nft_1.signNft, ethereum, config.chainId), apis.nftCollection, apis.nftLazyMint, checkWalletChainId),
            transfer: partialCall(transfer_1.transfer, ethereum, send, checkAssetType, apis.nftItem, apis.nftOwnership, checkWalletChainId),
            burn: partialCall(burn_1.burn, ethereum, send, checkAssetType, apis, checkWalletChainId),
            deploy: {
                erc721: new deploy_erc721_1.DeployErc721(ethereum, send, config),
                erc1155: new deploy_erc1155_1.DeployErc1155(ethereum, send, config),
            },
        },
        balances: {
            getBalance: new balances_1.Balances(apis).getBalance,
            convert: wethConverter.convert,
            getWethContractAddress: wethConverter.getWethContractAddress,
        },
    };
}
exports.createRaribleSdk = createRaribleSdk;
function partialCall(f) {
    var headArgs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        headArgs[_i - 1] = arguments[_i];
    }
    return function () {
        var tailArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tailArgs[_i] = arguments[_i];
        }
        return f.apply(void 0, (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], headArgs, false), tailArgs, false));
    };
}
var mint_2 = require("./nft/mint");
Object.defineProperty(exports, "isErc1155v2Collection", { enumerable: true, get: function () { return mint_2.isErc1155v2Collection; } });
Object.defineProperty(exports, "isErc721v2Collection", { enumerable: true, get: function () { return mint_2.isErc721v2Collection; } });
Object.defineProperty(exports, "isErc721v3Collection", { enumerable: true, get: function () { return mint_2.isErc721v3Collection; } });
Object.defineProperty(exports, "isErc1155v1Collection", { enumerable: true, get: function () { return mint_2.isErc1155v1Collection; } });
Object.defineProperty(exports, "isErc721v1Collection", { enumerable: true, get: function () { return mint_2.isErc721v1Collection; } });
(0, tslib_1.__exportStar)(require("./order/is-nft"), exports);
(0, tslib_1.__exportStar)(require("./common/get-ownership-id"), exports);
(0, tslib_1.__exportStar)(require("./common/parse-item-id"), exports);
(0, tslib_1.__exportStar)(require("./common/parse-ownership-id"), exports);
