"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AUCTION_DATA_V1 = exports.AUCTION_BID_DATA_V1 = exports.AUCTION_HASH_TYPE = exports.AUCTION_DATA_TYPE = exports.calculatePartsSum = exports.validateAuctionRangeTime = exports.getAssetEncodedData = exports.getAuctionHash = exports.getAuctionOperationOptions = void 0;
var ethereumjs_util_1 = require("ethereumjs-util");
var id_1 = require("../../common/id");
var add_fee_1 = require("../../order/add-fee");
function getAuctionOperationOptions(buyAssetType, value, fee) {
    if (buyAssetType.assetClass === "ETH") {
        var totalValue = (0, add_fee_1.addFee)({ assetType: buyAssetType, value: value }, fee);
        return { value: totalValue.value };
    }
    return {};
}
exports.getAuctionOperationOptions = getAuctionOperationOptions;
function getAuctionHash(ethereum, config, auctionId) {
    if (!ethereum) {
        throw new Error("Wallet is undefined");
    }
    var hash = ethereum.encodeParameter(exports.AUCTION_HASH_TYPE, {
        contractAddress: config.auction,
        auctionId: auctionId,
    });
    return "0x".concat((0, ethereumjs_util_1.keccak256)(Buffer.from(hash.substring(2), "hex")).toString("hex"));
}
exports.getAuctionHash = getAuctionHash;
function getAssetEncodedData(ethereum, asset) {
    switch (asset.assetClass) {
        case "ETH": {
            return "0x";
        }
        case "ERC20": {
            return ethereum.encodeParameter("address", asset.contract);
        }
        case "ERC721":
        case "ERC1155": {
            return ethereum.encodeParameter({
                components: [
                    {
                        name: "contractAddress",
                        type: "address",
                    },
                    {
                        name: "tokenId",
                        type: "uint256",
                    },
                ],
                name: "data",
                type: "tuple",
            }, {
                contractAddress: asset.contract,
                tokenId: asset.tokenId,
            });
        }
        default:
            throw new Error("Unrecognized asset for auction");
    }
}
exports.getAssetEncodedData = getAssetEncodedData;
function validateAuctionRangeTime(auction) {
    if (auction.data.startTime) {
        var startTime = new Date(auction.data.startTime).getTime();
        if (startTime > 0 && startTime > Date.now()) {
            return false;
        }
    }
    if (auction.endTime) {
        var endTime = new Date(auction.endTime).getTime();
        if (endTime > 0 && endTime < Date.now()) {
            return false;
        }
    }
    return true;
}
exports.validateAuctionRangeTime = validateAuctionRangeTime;
function calculatePartsSum(parts) {
    return (parts || [])
        .map(function (f) { return f.value; })
        .reduce(function (v, acc) { return v + acc; }, 0);
}
exports.calculatePartsSum = calculatePartsSum;
exports.AUCTION_DATA_TYPE = (0, id_1.id)("V1");
exports.AUCTION_HASH_TYPE = {
    components: [
        {
            name: "contractAddress",
            type: "address",
        },
        {
            name: "auctionId",
            type: "uint256",
        },
    ],
    name: "data",
    type: "tuple",
};
exports.AUCTION_BID_DATA_V1 = {
    components: [
        {
            components: [
                {
                    name: "account",
                    type: "address",
                },
                {
                    name: "value",
                    type: "uint96",
                },
            ],
            name: "payouts",
            type: "tuple[]",
        },
        {
            components: [
                {
                    name: "account",
                    type: "address",
                },
                {
                    name: "value",
                    type: "uint96",
                },
            ],
            name: "originFees",
            type: "tuple[]",
        },
    ],
    name: "data",
    type: "tuple",
};
exports.AUCTION_DATA_V1 = {
    components: [
        {
            components: [
                {
                    name: "account",
                    type: "address",
                },
                {
                    name: "value",
                    type: "uint96",
                },
            ],
            name: "payouts",
            type: "tuple[]",
        },
        {
            components: [
                {
                    name: "account",
                    type: "address",
                },
                {
                    name: "value",
                    type: "uint96",
                },
            ],
            name: "originFees",
            type: "tuple[]",
        },
        {
            name: "duration",
            type: "uint96",
        },
        {
            name: "startTime",
            type: "uint96",
        },
        {
            name: "buyOutPrice",
            type: "uint96",
        },
    ],
    name: "data",
    type: "tuple",
};
