import type { Ethereum } from "@rarible/ethereum-provider";
import type { Maybe } from "@rarible/types/build/maybe";
import type { BigNumber } from "@rarible/types";
import type { EthereumTransaction } from "@rarible/ethereum-provider";
import { Action } from "@rarible/action";
import type { AssetType } from "@rarible/ethereum-api-client";
import type { Erc20AssetType, EthAssetType, Part } from "@rarible/ethereum-api-client";
import type { BigNumberValue } from "@rarible/utils/build/bn";
import type { EthereumConfig } from "../config/type";
import type { ApproveFunction } from "../order/approve";
import type { AssetTypeRequest } from "../order/check-asset-type";
import type { RaribleEthereumApis } from "../common/apis";
import type { SendFunction } from "../common/send-transaction";
import type { EthereumNetwork } from "../types";
export declare type CreateAuctionRequest = {
    makeAssetType: AssetTypeRequest;
    amount: BigNumber;
    takeAssetType: EthAssetType | Erc20AssetType;
    minimalStepDecimal: BigNumberValue;
    minimalPriceDecimal: BigNumberValue;
    duration: number;
    startTime?: number;
    buyOutPriceDecimal: BigNumberValue;
    originFees?: Part[];
};
export declare type AuctionStartAction = Action<"approve" | "sign", CreateAuctionRequest, AuctionStartResponse>;
export declare type AuctionStartResponse = {
    tx: EthereumTransaction;
    hash: Promise<string>;
    auctionId: Promise<BigNumber>;
};
export declare class StartAuction {
    private readonly ethereum;
    private readonly send;
    private readonly config;
    private readonly env;
    private readonly approve;
    private readonly apis;
    private readonly checkAssetType;
    private readonly getAuctionHash;
    private readonly MAX_DURATION_SECONDS;
    private readonly MIN_DURATION_SECONDS;
    constructor(ethereum: Maybe<Ethereum>, send: SendFunction, config: EthereumConfig, env: EthereumNetwork, approve: ApproveFunction, apis: RaribleEthereumApis);
    readonly start: AuctionStartAction;
    validate(request: CreateAuctionRequest, makeAssetType: AssetType): boolean;
}
