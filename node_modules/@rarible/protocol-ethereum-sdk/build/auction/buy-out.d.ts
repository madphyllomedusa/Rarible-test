import type { Maybe } from "@rarible/types/build/maybe";
import type { Ethereum, EthereumTransaction } from "@rarible/ethereum-provider";
import type { Part } from "@rarible/ethereum-api-client";
import { Action } from "@rarible/action";
import type { Auction } from "@rarible/ethereum-api-client/build/models";
import type { EthereumConfig } from "../config/type";
import type { ApproveFunction } from "../order/approve";
import type { SendFunction } from "../common/send-transaction";
import type { RaribleEthereumApis } from "../common/apis";
import type { EthereumNetwork } from "../types";
export declare type BuyOutRequest = {
    hash: string;
    originFees?: Part[];
};
export declare type BuyoutAuctionAction = Action<"approve" | "sign", BuyOutRequest, EthereumTransaction>;
export declare class BuyoutAuction {
    private readonly ethereum;
    private readonly send;
    private readonly config;
    private readonly env;
    private readonly approve;
    private readonly apis;
    getBaseFee: () => Promise<number>;
    constructor(ethereum: Maybe<Ethereum>, send: SendFunction, config: EthereumConfig, env: EthereumNetwork, approve: ApproveFunction, apis: RaribleEthereumApis);
    readonly buyout: BuyoutAuctionAction;
    validate(auction: Auction): void;
}
