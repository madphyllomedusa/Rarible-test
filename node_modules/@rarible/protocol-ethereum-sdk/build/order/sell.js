"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderSell = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var bn_1 = require("@rarible/utils/build/bn");
var action_1 = require("@rarible/action");
var is_currency_1 = require("./is-currency");
var OrderSell = /** @class */ (function () {
    function OrderSell(upserter, checkAssetType, checkWalletChainId) {
        var _this = this;
        this.upserter = upserter;
        this.checkAssetType = checkAssetType;
        this.checkWalletChainId = checkWalletChainId;
        this.sell = action_1.Action
            .create({
            id: "approve",
            run: function (request) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
                var form, checked;
                return (0, tslib_1.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getSellForm(request)];
                        case 1:
                            form = _a.sent();
                            return [4 /*yield*/, this.upserter.checkLazyOrder(form)];
                        case 2:
                            checked = _a.sent();
                            return [4 /*yield*/, this.upserter.approve(checked, false)];
                        case 3:
                            _a.sent();
                            return [2 /*return*/, checked];
                    }
                });
            }); },
        })
            .thenStep({
            id: "sign",
            run: function (form) { return _this.upserter.upsertRequest(form); },
        })
            .before(function (input) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkWalletChainId()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, input];
                }
            });
        }); });
        this.update = action_1.Action
            .create({
            id: "approve",
            run: function (request) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
                var order, price, form, checked;
                return (0, tslib_1.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.upserter.getOrder(request)];
                        case 1:
                            order = _a.sent();
                            if (!(0, is_currency_1.isCurrency)(order.take.assetType)) {
                                throw new Error("Make asset type should be either ETH or ERC-20 asset, received=".concat(order.make.assetType.assetClass));
                            }
                            if (!(order.type === "CRYPTO_PUNK")) return [3 /*break*/, 2];
                            return [2 /*return*/, request];
                        case 2: return [4 /*yield*/, this.upserter.getPrice(request, order.take.assetType)];
                        case 3:
                            price = _a.sent();
                            return [4 /*yield*/, this.prepareOrderUpdateForm(order, price)];
                        case 4:
                            form = _a.sent();
                            return [4 /*yield*/, this.upserter.checkLazyOrder(form)];
                        case 5:
                            checked = _a.sent();
                            return [4 /*yield*/, this.upserter.approve(checked, false)];
                        case 6:
                            _a.sent();
                            return [2 /*return*/, checked];
                    }
                });
            }); },
        })
            .thenStep({
            id: "sign",
            run: function (form) {
                if ("type" in form && (form.type === "RARIBLE_V1" || form.type === "RARIBLE_V2")) {
                    return _this.upserter.upsertRequest(form);
                }
                return _this.upserter.updateCryptoPunkOrder(form);
            },
        })
            .before(function (input) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkWalletChainId()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, input];
                }
            });
        }); });
    }
    OrderSell.prototype.getSellForm = function (request) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var price, form, _a;
            var _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.upserter.getPrice(request, request.takeAssetType)];
                    case 1:
                        price = _d.sent();
                        return [4 /*yield*/, this.upserter.prepareOrderForm(request, true)];
                    case 2:
                        form = _d.sent();
                        _a = [(0, tslib_1.__assign)({}, form)];
                        _b = {};
                        _c = {};
                        return [4 /*yield*/, this.checkAssetType(request.makeAssetType)];
                    case 3: return [2 /*return*/, tslib_1.__assign.apply(void 0, _a.concat([(_b.make = (_c.assetType = _d.sent(),
                                _c.value = (0, types_1.toBigNumber)(request.amount.toString()),
                                _c), _b.take = {
                                assetType: request.takeAssetType,
                                value: (0, types_1.toBigNumber)((0, bn_1.toBn)(price).multipliedBy(request.amount).toString()),
                            }, _b)]))];
                }
            });
        });
    };
    OrderSell.prototype.prepareOrderUpdateForm = function (order, price) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                if (order.type === "RARIBLE_V1" || order.type === "RARIBLE_V2") {
                    return [2 /*return*/, this.upserter.getOrderFormFromOrder(order, order.make, {
                            assetType: order.take.assetType,
                            value: (0, types_1.toBigNumber)((0, bn_1.toBn)(price).multipliedBy(order.make.value).toString()),
                        })];
                }
                throw new Error("Unsupported order type: ".concat(order.type));
            });
        });
    };
    return OrderSell;
}());
exports.OrderSell = OrderSell;
