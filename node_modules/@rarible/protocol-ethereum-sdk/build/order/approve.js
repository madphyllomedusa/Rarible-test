"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.approve = void 0;
var tslib_1 = require("tslib");
var approve_erc20_1 = require("./approve-erc20");
var approve_erc721_1 = require("./approve-erc721");
var approve_erc1155_1 = require("./approve-erc1155");
var approve_crypto_punk_1 = require("./approve-crypto-punk");
function approve(ethereum, send, config, owner, asset, infinite) {
    if (infinite === void 0) { infinite = true; }
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var contract_1, operator_1, contract_2, operator_2, contract_3, operator_3, contract, operator, contract_4, operator_4, contract_5, operator_5;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (asset.assetType.assetClass) {
                case "ERC20": {
                    contract_1 = asset.assetType.contract;
                    operator_1 = config.erc20;
                    return [2 /*return*/, (0, approve_erc20_1.approveErc20)(ethereum, send, contract_1, owner, operator_1, asset.value, infinite)];
                }
                case "ERC721": {
                    contract_2 = asset.assetType.contract;
                    operator_2 = config.nft;
                    return [2 /*return*/, (0, approve_erc721_1.approveErc721)(ethereum, send, contract_2, owner, operator_2)];
                }
                case "ERC1155": {
                    contract_3 = asset.assetType.contract;
                    operator_3 = config.nft;
                    return [2 /*return*/, (0, approve_erc1155_1.approveErc1155)(ethereum, send, contract_3, owner, operator_3)];
                }
                case "ERC721_LAZY":
                    contract = asset.assetType.contract;
                    operator = config.erc721Lazy;
                    return [2 /*return*/, (0, approve_erc721_1.approveErc721)(ethereum, send, contract, owner, operator)];
                case "ERC1155_LAZY": {
                    contract_4 = asset.assetType.contract;
                    operator_4 = config.erc1155Lazy;
                    return [2 /*return*/, (0, approve_erc1155_1.approveErc1155)(ethereum, send, contract_4, owner, operator_4)];
                }
                case "CRYPTO_PUNKS": {
                    contract_5 = asset.assetType.contract;
                    operator_5 = config.cryptoPunks;
                    return [2 /*return*/, (0, approve_crypto_punk_1.approveCryptoPunk)(ethereum, send, contract_5, owner, operator_5, asset.assetType.tokenId)];
                }
                default: return [2 /*return*/, undefined];
            }
            return [2 /*return*/];
        });
    });
}
exports.approve = approve;
