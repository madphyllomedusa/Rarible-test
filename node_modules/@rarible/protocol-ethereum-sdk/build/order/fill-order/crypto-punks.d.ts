import type { Address } from "@rarible/ethereum-api-client";
import type { Ethereum, EthereumFunctionCall, EthereumSendOptions, EthereumTransaction } from "@rarible/ethereum-provider";
import type { Maybe } from "@rarible/types/build/maybe";
import type { EthereumConfig } from "../../config/type";
import type { SendFunction } from "../../common/send-transaction";
import type { SimpleCryptoPunkOrder } from "../types";
import type { SimpleOrder } from "../types";
import type { CryptoPunksOrderFillRequest, OrderFillSendData, OrderHandler } from "./types";
export declare class CryptoPunksOrderHandler implements OrderHandler<CryptoPunksOrderFillRequest> {
    private readonly ethereum;
    private readonly send;
    private readonly config;
    private readonly getBaseOrderFeeConfig;
    constructor(ethereum: Maybe<Ethereum>, send: SendFunction, config: EthereumConfig, getBaseOrderFeeConfig: (type: SimpleOrder["type"]) => Promise<number>);
    invert(request: CryptoPunksOrderFillRequest, maker: Address): SimpleCryptoPunkOrder;
    approve(order: SimpleCryptoPunkOrder, infinite: boolean): Promise<void>;
    getTransactionData(initial: SimpleCryptoPunkOrder, inverted: SimpleCryptoPunkOrder): Promise<OrderFillSendData>;
    sendTransaction(initial: SimpleCryptoPunkOrder, inverted: SimpleCryptoPunkOrder): Promise<EthereumTransaction>;
    getPunkOrderCallMethod(initial: SimpleCryptoPunkOrder): EthereumFunctionCall;
    getMatchV2Options(left: SimpleCryptoPunkOrder, right: SimpleCryptoPunkOrder): EthereumSendOptions;
    getMakeAssetWithFee(order: SimpleCryptoPunkOrder): import("@rarible/ethereum-api-client").Asset;
    getOrderFee(): number;
    getBaseOrderFee(): Promise<number>;
}
