import type { Address, OrderControllerApi } from "@rarible/ethereum-api-client";
import type { Ethereum, EthereumTransaction } from "@rarible/ethereum-provider";
import type { Maybe } from "@rarible/types/build/maybe";
import type { SendFunction } from "../../common/send-transaction";
import type { EthereumConfig } from "../../config/type";
import type { SimpleLegacyOrder } from "../types";
import type { SimpleOrder } from "../types";
import type { LegacyOrderFillRequest, OrderFillSendData, OrderHandler } from "./types";
export declare class RaribleV1OrderHandler implements OrderHandler<LegacyOrderFillRequest> {
    private readonly ethereum;
    private readonly orderApi;
    private readonly send;
    private readonly config;
    private readonly getBaseOrderFeeConfig;
    constructor(ethereum: Maybe<Ethereum>, orderApi: OrderControllerApi, send: SendFunction, config: EthereumConfig, getBaseOrderFeeConfig: (type: SimpleOrder["type"]) => Promise<number>);
    invert(request: LegacyOrderFillRequest, maker: Address): SimpleLegacyOrder;
    approve(order: SimpleLegacyOrder, infinite: boolean): Promise<void>;
    getBaseOrderFee(): Promise<number>;
    getOrderFee(order: SimpleLegacyOrder): number;
    getTransactionData(initial: SimpleLegacyOrder, inverted: SimpleLegacyOrder, request: LegacyOrderFillRequest): Promise<OrderFillSendData>;
    sendTransaction(initial: SimpleLegacyOrder, inverted: SimpleLegacyOrder, request: LegacyOrderFillRequest): Promise<EthereumTransaction>;
}
export declare function toStructLegacyOrder(order: SimpleLegacyOrder): {
    key: {
        owner: Address;
        salt: import("@rarible/ethereum-api-client").Word;
        sellAsset: {
            token: Address;
            tokenId: import("@rarible/ethereum-api-client").BigNumber;
            assetType: number;
        };
        buyAsset: {
            token: Address;
            tokenId: import("@rarible/ethereum-api-client").BigNumber;
            assetType: number;
        };
    };
    selling: import("@rarible/ethereum-api-client").BigNumber;
    buying: import("@rarible/ethereum-api-client").BigNumber;
    sellerFee: number;
};
export declare function toStructLegacyOrderKey(order: SimpleLegacyOrder): {
    owner: Address;
    salt: import("@rarible/ethereum-api-client").Word;
    sellAsset: {
        token: Address;
        tokenId: import("@rarible/ethereum-api-client").BigNumber;
        assetType: number;
    };
    buyAsset: {
        token: Address;
        tokenId: import("@rarible/ethereum-api-client").BigNumber;
        assetType: number;
    };
};
