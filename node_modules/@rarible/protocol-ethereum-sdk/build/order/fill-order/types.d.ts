import type { Address } from "@rarible/types";
import type { Part } from "@rarible/ethereum-api-client";
import type { Action } from "@rarible/action";
import type { EthereumTransaction } from "@rarible/ethereum-provider";
import type { EthereumFunctionCall, EthereumSendOptions } from "@rarible/ethereum-provider";
import type { CryptoPunksAssetType, Erc1155AssetType, Erc721AssetType } from "@rarible/ethereum-api-client";
import type { Erc1155LazyAssetType, Erc721LazyAssetType } from "@rarible/ethereum-api-client/build/models/AssetType";
import type { SimpleCryptoPunkOrder, SimpleLegacyOrder, SimpleOpenSeaV1Order, SimpleRaribleV2Order } from "../types";
import type { NftAssetType } from "../check-asset-type";
export declare type CommonFillRequestAssetType = Erc721AssetType | Erc721LazyAssetType | Erc1155AssetType | Erc1155LazyAssetType | CryptoPunksAssetType | NftAssetType;
export declare type CommonFillRequest<T> = {
    order: T;
    amount: number;
    infinite?: boolean;
    assetType?: CommonFillRequestAssetType;
};
export declare type LegacyOrderFillRequest = CommonFillRequest<SimpleLegacyOrder> & {
    payout?: Address;
    originFee: number;
};
export declare type RaribleV2OrderFillRequest = CommonFillRequest<SimpleRaribleV2Order> & {
    payouts?: Part[];
    originFees?: Part[];
};
export declare type OpenSeaV1OrderFillRequest = Omit<CommonFillRequest<SimpleOpenSeaV1Order>, "amount">;
export declare type CryptoPunksOrderFillRequest = CommonFillRequest<SimpleCryptoPunkOrder>;
export declare type FillOrderRequest = LegacyOrderFillRequest | RaribleV2OrderFillRequest | OpenSeaV1OrderFillRequest | CryptoPunksOrderFillRequest;
export declare type FillOrderAction = Action<FillOrderStageId, FillOrderRequest, EthereumTransaction>;
export declare type FillOrderStageId = "approve" | "send-tx";
export interface OrderHandler<T extends FillOrderRequest> {
    invert: (request: T, maker: Address) => T["order"] | Promise<T["order"]>;
    approve: (order: T["order"], infinite: boolean) => Promise<void>;
    sendTransaction: (initial: T["order"], inverted: T["order"], request: T) => Promise<EthereumTransaction>;
    getTransactionData: (order: T["order"], inverted: T["order"], request: T) => Promise<OrderFillSendData>;
    getBaseOrderFee(order: T["order"]): Promise<number> | number;
    getOrderFee(order: T["order"]): Promise<number> | number;
}
export declare type GetOrderFillTxData = (request: FillOrderRequest) => Promise<OrderFillTransactionData>;
export declare type OrderFillTransactionData = {
    data: string;
    options: EthereumSendOptions;
};
export declare type OrderFillSendData = {
    functionCall: EthereumFunctionCall;
    options: EthereumSendOptions;
};
export declare type GetOrderBuyTxData = (request: GetOrderBuyTxRequest) => Promise<TransactionData>;
export declare type GetOrderBuyTxRequest = {
    request: FillOrderRequest;
    from: Address;
};
export declare type TransactionData = {
    data: string;
    value: string;
    from: string;
    to: string;
};
