"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invertOrder = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var bn_1 = require("@rarible/utils/build/bn");
var is_nft_1 = require("../is-nft");
var ZERO = (0, types_1.toWord)("0x0000000000000000000000000000000000000000000000000000000000000000");
function invertOrder(order, amount, maker, salt) {
    if (salt === void 0) { salt = ZERO; }
    var _a = calculateAmounts((0, bn_1.toBn)(order.make.value), (0, bn_1.toBn)(order.take.value), amount, (0, is_nft_1.isNft)(order.take.assetType) || order.take.assetType.assetClass === "COLLECTION"), makeValue = _a[0], takeValue = _a[1];
    return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, order), { make: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, order.take), { value: (0, types_1.toBigNumber)(makeValue.toString()) }), take: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, order.make), { value: (0, types_1.toBigNumber)(takeValue.toString()) }), maker: maker, taker: order.maker, salt: salt, signature: undefined });
}
exports.invertOrder = invertOrder;
function calculateAmounts(make, take, amount, bid) {
    if (bid) {
        return [amount, (0, bn_1.toBn)(amount).multipliedBy(make).div(take)];
    }
    else {
        return [(0, bn_1.toBn)(amount).multipliedBy(take).div(make), amount];
    }
}
