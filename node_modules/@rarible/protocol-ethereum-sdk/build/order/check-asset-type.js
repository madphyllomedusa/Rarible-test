"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkAssetType = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
function checkAssetType(collectionApi, asset) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var collectionResponse;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!("assetClass" in asset)) return [3 /*break*/, 1];
                    return [2 /*return*/, asset];
                case 1: return [4 /*yield*/, collectionApi.getNftCollectionByIdRaw({ collection: asset.contract })];
                case 2:
                    collectionResponse = _a.sent();
                    if (collectionResponse.status === 200) {
                        switch (collectionResponse.value.type) {
                            case "ERC721":
                            case "ERC1155": {
                                return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, asset), { tokenId: (0, types_1.toBigNumber)("".concat(asset.tokenId)), assetClass: collectionResponse.value.type })];
                            }
                            case "CRYPTO_PUNKS": {
                                return [2 /*return*/, {
                                        assetClass: "CRYPTO_PUNKS",
                                        contract: asset.contract,
                                        tokenId: parseInt("".concat(asset.tokenId)),
                                    }];
                            }
                            default: {
                                throw new Error("Unrecognized collection asset class ".concat(collectionResponse.value.type));
                            }
                        }
                    }
                    else {
                        throw new Error("Can't get info of NFT collection with id ".concat(asset.contract));
                    }
                    _a.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.checkAssetType = checkAssetType;
