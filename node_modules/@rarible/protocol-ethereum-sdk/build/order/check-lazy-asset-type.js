"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkLazyAssetType = void 0;
var tslib_1 = require("tslib");
function checkLazyAssetType(itemApi, type) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var _a, itemResponse, lazyResponse, lazy;
        return (0, tslib_1.__generator)(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = type.assetClass;
                    switch (_a) {
                        case "ERC1155": return [3 /*break*/, 1];
                        case "ERC721": return [3 /*break*/, 1];
                    }
                    return [3 /*break*/, 4];
                case 1: return [4 /*yield*/, itemApi.getNftItemByIdRaw({ itemId: "".concat(type.contract, ":").concat(type.tokenId) })];
                case 2:
                    itemResponse = _b.sent();
                    if (itemResponse.status === 200 && itemResponse.value.lazySupply === "0") {
                        return [2 /*return*/, type];
                    }
                    return [4 /*yield*/, itemApi.getNftLazyItemByIdRaw({ itemId: "".concat(type.contract, ":").concat(type.tokenId) })];
                case 3:
                    lazyResponse = _b.sent();
                    if (lazyResponse.status === 200) {
                        lazy = lazyResponse.value;
                        switch (lazy["@type"]) {
                            case "ERC721": {
                                return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, lazy), { assetClass: "ERC721_LAZY" })];
                            }
                            case "ERC1155": {
                                return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, lazy), { assetClass: "ERC1155_LAZY" })];
                            }
                            default: return [2 /*return*/, type];
                        }
                    }
                    return [2 /*return*/, type];
                case 4: return [2 /*return*/, type];
            }
        });
    });
}
exports.checkLazyAssetType = checkLazyAssetType;
