"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvertWeth = void 0;
var tslib_1 = require("tslib");
var utils_1 = require("@rarible/utils");
var weth_1 = require("./contracts/weth");
var check_chain_id_1 = require("./check-chain-id");
var ConvertWeth = /** @class */ (function () {
    function ConvertWeth(ethereum, send, config) {
        this.ethereum = ethereum;
        this.send = send;
        this.config = config;
        this.convertEthToWeth = this.convertEthToWeth.bind(this);
        this.convertWethToEth = this.convertWethToEth.bind(this);
        this.convert = this.convert.bind(this);
        this.getWethContractAddress = this.getWethContractAddress.bind(this);
    }
    ConvertWeth.prototype.convertEthToWeth = function (value) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var contract, decimals;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.ethereum) {
                            throw new Error("Wallet is undefined");
                        }
                        contract = (0, weth_1.createWethContract)(this.ethereum, this.config.weth);
                        return [4 /*yield*/, contract.functionCall("decimals").call()];
                    case 1:
                        decimals = _a.sent();
                        return [2 /*return*/, this.send(contract.functionCall("deposit"), {
                                value: new utils_1.BigNumber(value)
                                    .multipliedBy(new utils_1.BigNumber(10).pow(Number(decimals)))
                                    .toString(),
                            })];
                }
            });
        });
    };
    ConvertWeth.prototype.convertWethToEth = function (value) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var contract, decimals, rawValue;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.ethereum) {
                            throw new Error("Wallet is undefined");
                        }
                        contract = (0, weth_1.createWethContract)(this.ethereum, this.config.weth);
                        return [4 /*yield*/, contract.functionCall("decimals").call()];
                    case 1:
                        decimals = _a.sent();
                        rawValue = new utils_1.BigNumber(value).multipliedBy(new utils_1.BigNumber(10).pow(Number(decimals))).toString();
                        return [2 /*return*/, this.send(contract.functionCall("withdraw", rawValue))];
                }
            });
        });
    };
    ConvertWeth.prototype.convert = function (from, to, value) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, check_chain_id_1.checkChainId)(this.ethereum, this.config)];
                    case 1:
                        _a.sent();
                        if (from.assetClass === "ETH" && to.assetClass === "ERC20") {
                            if (to.contract !== this.config.weth) {
                                throw new Error("Unsupported WETH contract address ".concat(to.contract, ", expected ").concat(this.config.weth));
                            }
                            return [2 /*return*/, this.convertEthToWeth(value)];
                        }
                        if (from.assetClass === "ERC20" && to.assetClass === "ETH") {
                            if (from.contract !== this.config.weth) {
                                throw new Error("Unsupported WETH contract address ".concat(from.contract, ", expected ").concat(this.config.weth));
                            }
                            return [2 /*return*/, this.convertWethToEth(value)];
                        }
                        throw new Error("Unsupported convert asset types");
                }
            });
        });
    };
    ConvertWeth.prototype.getWethContractAddress = function () {
        return this.config.weth;
    };
    return ConvertWeth;
}());
exports.ConvertWeth = ConvertWeth;
