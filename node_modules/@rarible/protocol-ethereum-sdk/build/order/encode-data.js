"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeData = void 0;
//todo wrongEncode когда применять?
function encodeData(ethereum, data, wrongEncode) {
    if (wrongEncode === void 0) { wrongEncode = false; }
    switch (data.dataType) {
        case "RARIBLE_V2_DATA_V2": {
            var encoded = ethereum.encodeParameter(DATA_V2_TYPE, {
                payouts: data.payouts,
                originFees: data.originFees,
                isMakeFill: data.isMakeFill,
            });
            return ["0x23d235ef", encoded];
        }
        case "RARIBLE_V2_DATA_V1": {
            var encoded = ethereum.encodeParameter(DATA_V1_TYPE, {
                payouts: data.payouts,
                originFees: data.originFees,
            });
            if (wrongEncode) {
                return ["0x4c234266", "0x".concat(encoded.substring(66))];
            }
            return ["0x4c234266", encoded];
        }
        default: {
            throw new Error("Data type not supported: ".concat(data.dataType));
        }
    }
}
exports.encodeData = encodeData;
var DATA_V1_TYPE = {
    components: [
        {
            components: [
                {
                    name: "account",
                    type: "address",
                },
                {
                    name: "value",
                    type: "uint96",
                },
            ],
            name: "payouts",
            type: "tuple[]",
        },
        {
            components: [
                {
                    name: "account",
                    type: "address",
                },
                {
                    name: "value",
                    type: "uint96",
                },
            ],
            name: "originFees",
            type: "tuple[]",
        },
    ],
    name: "data",
    type: "tuple",
};
var DATA_V2_TYPE = {
    components: [
        {
            components: [
                {
                    name: "account",
                    type: "address",
                },
                {
                    name: "value",
                    type: "uint96",
                },
            ],
            name: "payouts",
            type: "tuple[]",
        },
        {
            components: [
                {
                    name: "account",
                    type: "address",
                },
                {
                    name: "value",
                    type: "uint96",
                },
            ],
            name: "originFees",
            type: "tuple[]",
        },
        {
            name: "isMakeFill",
            type: "bool",
        },
    ],
    name: "data",
    type: "tuple",
};
