"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashLegacyOrder = void 0;
var ethereumjs_util_1 = require("ethereumjs-util");
var to_legacy_asset_type_1 = require("./to-legacy-asset-type");
function hashLegacyOrder(ethereum, order) {
    if (order.type !== "RARIBLE_V1") {
        throw new Error("Not supported type: ".concat(order.type));
    }
    var data = order.data;
    if (data.dataType !== "LEGACY") {
        throw new Error("Not supported data type: ".concat(data.dataType));
    }
    var makeType = (0, to_legacy_asset_type_1.toLegacyAssetType)(order.make.assetType);
    var takeType = (0, to_legacy_asset_type_1.toLegacyAssetType)(order.take.assetType);
    var struct = {
        key: {
            owner: order.maker,
            salt: order.salt,
            sellAsset: makeType,
            buyAsset: takeType,
        },
        selling: order.make.value,
        buying: order.take.value,
        sellerFee: data.fee,
    };
    var encodedOrder = ethereum.encodeParameter({ Order: ORDER }, struct);
    return "0x".concat((0, ethereumjs_util_1.keccak256)(Buffer.from(encodedOrder.substring(2), "hex")).toString("hex"));
}
exports.hashLegacyOrder = hashLegacyOrder;
var ASSET = {
    token: "address",
    tokenId: "uint256",
    assetType: "uint8",
};
var ORDER = {
    key: {
        owner: "address",
        salt: "uint256",
        sellAsset: ASSET,
        buyAsset: ASSET,
    },
    selling: "uint256",
    buying: "uint256",
    sellerFee: "uint256",
};
