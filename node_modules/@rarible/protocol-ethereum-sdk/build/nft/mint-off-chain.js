"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRequestURI = exports.mintOffChain = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var sanitize_uri_1 = require("../common/sanitize-uri");
var get_token_id_1 = require("./get-token-id");
var mint_1 = require("./mint");
var mint_on_chain_1 = require("./mint-on-chain");
var erc721_1 = require("./contracts/erc721");
var domain_1 = require("./contracts/domain");
var erc1155_1 = require("./contracts/erc1155");
function mintOffChain(ethereum, signNft, nftCollectionApi, nftLazyMintApi, data) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var creators, tokenId, mintData, _a, _b, minted, _c, _d, _e, _f, _g;
        var _h, _j, _k;
        return (0, tslib_1.__generator)(this, function (_l) {
            switch (_l.label) {
                case 0: return [4 /*yield*/, (0, mint_on_chain_1.getCreators)(data, ethereum)];
                case 1:
                    creators = _l.sent();
                    return [4 /*yield*/, (0, get_token_id_1.getTokenId)(nftCollectionApi, data.collection.id, creators[0].account, data.nftTokenId)];
                case 2:
                    tokenId = (_l.sent()).tokenId;
                    _a = getMintOffChainData;
                    _b = [(0, tslib_1.__assign)({}, data)];
                    _h = {};
                    return [4 /*yield*/, getRequestURI(ethereum, data)];
                case 3:
                    mintData = _a.apply(void 0, [tslib_1.__assign.apply(void 0, _b.concat([(_h.uri = _l.sent(), _h)])), creators, tokenId]);
                    _d = (_c = nftLazyMintApi).mintNftAsset;
                    _j = {};
                    _f = (_e = Object).assign;
                    _g = [{}, mintData];
                    _k = {
                        tokenId: tokenId
                    };
                    return [4 /*yield*/, signNft(mintData)];
                case 4: return [4 /*yield*/, _d.apply(_c, [(_j.lazyNft = _f.apply(_e, _g.concat([(_k.signatures = [_l.sent()],
                                _k)])),
                            _j)])];
                case 5:
                    minted = _l.sent();
                    return [2 /*return*/, {
                            type: mint_1.MintResponseTypeEnum.OFF_CHAIN,
                            item: minted,
                            owner: creators[0].account,
                            tokenId: tokenId,
                            contract: minted.contract,
                            itemId: "".concat(minted.contract, ":").concat(tokenId),
                        }];
            }
        });
    });
}
exports.mintOffChain = mintOffChain;
function getMintOffChainData(data, creators, tokenId) {
    var base = {
        contract: data.collection.id,
        uri: data.uri,
        royalties: data.royalties || [],
        creators: creators,
        tokenId: tokenId,
    };
    if ("supply" in data) {
        return Object.assign({}, base, {
            "@type": "ERC1155",
            supply: (0, types_1.toBigNumber)(data.supply.toString()),
        });
    }
    return Object.assign({}, base, {
        "@type": "ERC721",
    });
}
function getRequestURI(ethereum, data) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var erc721Contract, uriPrefix, erc1155Contract, uriPrefix;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(data.collection.type === "ERC721")) return [3 /*break*/, 3];
                    return [4 /*yield*/, (0, erc721_1.getErc721Contract)(ethereum, domain_1.ERC721VersionEnum.ERC721V3, data.collection.id)];
                case 1:
                    erc721Contract = _a.sent();
                    return [4 /*yield*/, erc721Contract.functionCall("baseURI").call()];
                case 2:
                    uriPrefix = _a.sent();
                    return [2 /*return*/, (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri)];
                case 3:
                    if (!(data.collection.type === "ERC1155")) return [3 /*break*/, 6];
                    return [4 /*yield*/, (0, erc1155_1.getErc1155Contract)(ethereum, domain_1.ERC1155VersionEnum.ERC1155V2, data.collection.id)];
                case 4:
                    erc1155Contract = _a.sent();
                    return [4 /*yield*/, erc1155Contract.functionCall("baseURI").call()];
                case 5:
                    uriPrefix = _a.sent();
                    return [2 /*return*/, (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri)];
                case 6: throw new Error("Wrong collection type");
            }
        });
    });
}
exports.getRequestURI = getRequestURI;
