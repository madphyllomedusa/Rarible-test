"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErc1155Contract = void 0;
var tslib_1 = require("tslib");
var domain_1 = require("../domain");
function getErc1155Contract(ethereum, version, address) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var _a, erc1155v2Abi, erc1155v1Abi;
        return (0, tslib_1.__generator)(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = version;
                    switch (_a) {
                        case domain_1.ERC1155VersionEnum.ERC1155V2: return [3 /*break*/, 1];
                        case domain_1.ERC1155VersionEnum.ERC1155V1: return [3 /*break*/, 3];
                    }
                    return [3 /*break*/, 5];
                case 1: return [4 /*yield*/, Promise.resolve().then(function () { return (0, tslib_1.__importStar)(require("./v2")); })];
                case 2:
                    erc1155v2Abi = (_b.sent()).erc1155v2Abi;
                    return [2 /*return*/, ethereum.createContract(erc1155v2Abi, address)];
                case 3: return [4 /*yield*/, Promise.resolve().then(function () { return (0, tslib_1.__importStar)(require("./v1")); })];
                case 4:
                    erc1155v1Abi = (_b.sent()).erc1155v1Abi;
                    return [2 /*return*/, ethereum.createContract(erc1155v1Abi, address)];
                case 5: throw new Error("Unsupported ERC1155 version");
            }
        });
    });
}
exports.getErc1155Contract = getErc1155Contract;
