"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isErc1155v1Collection = exports.isErc1155v2Collection = exports.isErc721v1Collection = exports.isErc721v2Collection = exports.isErc721v3Collection = exports.mint = exports.MintResponseTypeEnum = void 0;
var tslib_1 = require("tslib");
var ethereum_api_client_1 = require("@rarible/ethereum-api-client");
var mint_off_chain_1 = require("./mint-off-chain");
var mint_on_chain_1 = require("./mint-on-chain");
var MintResponseTypeEnum;
(function (MintResponseTypeEnum) {
    MintResponseTypeEnum["OFF_CHAIN"] = "off-chain";
    MintResponseTypeEnum["ON_CHAIN"] = "on-chain";
})(MintResponseTypeEnum = exports.MintResponseTypeEnum || (exports.MintResponseTypeEnum = {}));
function mint(ethereum, send, signNft, nftCollectionApi, nftLazyMintApi, checkWalletChainId, data) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, checkWalletChainId()];
                case 1:
                    _a.sent();
                    if (!ethereum) {
                        throw new Error("Wallet undefined");
                    }
                    if (isERC1155Request(data)) {
                        if (isERC1155v2Request(data)) {
                            if (data.lazy)
                                return [2 /*return*/, (0, mint_off_chain_1.mintOffChain)(ethereum, signNft, nftCollectionApi, nftLazyMintApi, data)];
                            return [2 /*return*/, (0, mint_on_chain_1.mintErc1155v2)(ethereum, send, nftCollectionApi, data)];
                        }
                        return [2 /*return*/, (0, mint_on_chain_1.mintErc1155v1)(ethereum, send, nftCollectionApi, data)];
                    }
                    if (isERC721Request(data)) {
                        if (isERC721v3Request(data)) {
                            if (data.lazy)
                                return [2 /*return*/, (0, mint_off_chain_1.mintOffChain)(ethereum, signNft, nftCollectionApi, nftLazyMintApi, data)];
                            return [2 /*return*/, (0, mint_on_chain_1.mintErc721v3)(ethereum, send, nftCollectionApi, data)];
                        }
                        if (isERC721v2Request(data)) {
                            return [2 /*return*/, (0, mint_on_chain_1.mintErc721v2)(ethereum, send, nftCollectionApi, data)];
                        }
                        return [2 /*return*/, (0, mint_on_chain_1.mintErc721v1)(ethereum, send, nftCollectionApi, data)];
                    }
                    throw new Error("Unsupported collection");
            }
        });
    });
}
exports.mint = mint;
var isERC721v2Request = function (data) { return (0, exports.isErc721v2Collection)(data.collection); };
var isERC721v3Request = function (data) { return (0, exports.isErc721v3Collection)(data.collection); };
var isERC1155v2Request = function (data) { return (0, exports.isErc1155v2Collection)(data.collection); };
var isERC1155Request = function (data) {
    return data.collection.type === "ERC1155";
};
var isERC721Request = function (data) {
    return data.collection.type === "ERC721";
};
var isErc721v3Collection = function (x) {
    return x.features.indexOf(ethereum_api_client_1.NftCollectionFeatures.MINT_AND_TRANSFER) !== -1 && x.type === "ERC721";
};
exports.isErc721v3Collection = isErc721v3Collection;
var isErc721v2Collection = function (x) {
    return x.features.indexOf(ethereum_api_client_1.NftCollectionFeatures.SECONDARY_SALE_FEES) !== -1 && x.type === "ERC721";
};
exports.isErc721v2Collection = isErc721v2Collection;
var isErc721v1Collection = function (x) {
    return !(0, exports.isErc721v3Collection)(x) && !(0, exports.isErc721v2Collection)(x) && x.type === "ERC721";
};
exports.isErc721v1Collection = isErc721v1Collection;
var isErc1155v2Collection = function (x) {
    return x.features.indexOf(ethereum_api_client_1.NftCollectionFeatures.MINT_AND_TRANSFER) !== -1 && x.type === "ERC1155";
};
exports.isErc1155v2Collection = isErc1155v2Collection;
var isErc1155v1Collection = function (x) {
    return !(0, exports.isErc1155v2Collection)(x) && x.type === "ERC1155";
};
exports.isErc1155v1Collection = isErc1155v1Collection;
