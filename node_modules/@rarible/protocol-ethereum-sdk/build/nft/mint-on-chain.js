"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCreators = exports.mintErc1155v2 = exports.mintErc1155v1 = exports.mintErc721v3 = exports.mintErc721v2 = exports.mintErc721v1 = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var create_item_id_1 = require("../common/create-item-id");
var sanitize_uri_1 = require("../common/sanitize-uri");
var mint_1 = require("./mint");
var get_token_id_1 = require("./get-token-id");
var erc721_1 = require("./contracts/erc721");
var domain_1 = require("./contracts/domain");
var erc1155_1 = require("./contracts/erc1155");
function mintErc721v1(ethereum, send, nftCollectionApi, data) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var owner, _a, erc721Contract, nftTokenId, tokenId, _b, v, r, s, uriPrefix, uri, transaction;
        return (0, tslib_1.__generator)(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = types_1.toAddress;
                    return [4 /*yield*/, ethereum.getFrom()];
                case 1:
                    owner = _a.apply(void 0, [_c.sent()]);
                    return [4 /*yield*/, (0, erc721_1.getErc721Contract)(ethereum, domain_1.ERC721VersionEnum.ERC721V1, data.collection.id)];
                case 2:
                    erc721Contract = _c.sent();
                    return [4 /*yield*/, (0, get_token_id_1.getTokenId)(nftCollectionApi, data.collection.id, owner, data.nftTokenId)];
                case 3:
                    nftTokenId = _c.sent();
                    tokenId = nftTokenId.tokenId, _b = nftTokenId.signature, v = _b.v, r = _b.r, s = _b.s;
                    return [4 /*yield*/, erc721Contract.functionCall("tokenURIPrefix").call()];
                case 4:
                    uriPrefix = _c.sent();
                    uri = (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri);
                    return [4 /*yield*/, send(erc721Contract.functionCall("mint", tokenId, v, r, s, uri))];
                case 5:
                    transaction = _c.sent();
                    return [2 /*return*/, createMintOnChainResponse({
                            transaction: transaction,
                            tokenId: tokenId,
                            contract: data.collection.id,
                            owner: owner,
                            itemId: (0, create_item_id_1.createItemId)(data.collection.id, tokenId),
                        })];
            }
        });
    });
}
exports.mintErc721v1 = mintErc721v1;
function mintErc721v2(ethereum, send, nftCollectionApi, data) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var owner, _a, erc721Contract, nftTokenId, tokenId, _b, v, r, s, royalties, uriPrefix, uri, transaction;
        return (0, tslib_1.__generator)(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = types_1.toAddress;
                    return [4 /*yield*/, ethereum.getFrom()];
                case 1:
                    owner = _a.apply(void 0, [_c.sent()]);
                    return [4 /*yield*/, (0, erc721_1.getErc721Contract)(ethereum, domain_1.ERC721VersionEnum.ERC721V2, data.collection.id)];
                case 2:
                    erc721Contract = _c.sent();
                    return [4 /*yield*/, (0, get_token_id_1.getTokenId)(nftCollectionApi, data.collection.id, owner, data.nftTokenId)];
                case 3:
                    nftTokenId = _c.sent();
                    tokenId = nftTokenId.tokenId, _b = nftTokenId.signature, v = _b.v, r = _b.r, s = _b.s;
                    royalties = (data.royalties || []).map(function (x) { return ({ recipient: x.account, value: x.value }); });
                    return [4 /*yield*/, erc721Contract.functionCall("tokenURIPrefix").call()];
                case 4:
                    uriPrefix = _c.sent();
                    uri = (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri);
                    return [4 /*yield*/, send(erc721Contract.functionCall("mint", tokenId, v, r, s, royalties, uri))];
                case 5:
                    transaction = _c.sent();
                    return [2 /*return*/, createMintOnChainResponse({
                            transaction: transaction,
                            tokenId: tokenId,
                            contract: data.collection.id,
                            owner: owner,
                            itemId: (0, create_item_id_1.createItemId)(data.collection.id, tokenId),
                        })];
            }
        });
    });
}
exports.mintErc721v2 = mintErc721v2;
function mintErc721v3(ethereum, send, nftCollectionApi, data) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var creators, owner, erc721Contract, uriPrefix, uri, tokenId, args, transaction;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getCreators(data, ethereum)];
                case 1:
                    creators = _a.sent();
                    owner = creators[0].account;
                    return [4 /*yield*/, (0, erc721_1.getErc721Contract)(ethereum, domain_1.ERC721VersionEnum.ERC721V3, data.collection.id)];
                case 2:
                    erc721Contract = _a.sent();
                    return [4 /*yield*/, erc721Contract.functionCall("baseURI").call()];
                case 3:
                    uriPrefix = _a.sent();
                    uri = (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri);
                    return [4 /*yield*/, (0, get_token_id_1.getTokenId)(nftCollectionApi, data.collection.id, owner, data.nftTokenId)];
                case 4:
                    tokenId = (_a.sent()).tokenId;
                    args = {
                        tokenId: tokenId,
                        tokenURI: uri,
                        creators: creators,
                        royalties: data.royalties || [],
                        signatures: ["0x"],
                    };
                    return [4 /*yield*/, send(erc721Contract.functionCall("mintAndTransfer", args, owner))];
                case 5:
                    transaction = _a.sent();
                    return [2 /*return*/, createMintOnChainResponse({
                            transaction: transaction,
                            tokenId: tokenId,
                            contract: data.collection.id,
                            owner: owner,
                            itemId: (0, create_item_id_1.createItemId)(data.collection.id, tokenId),
                        })];
            }
        });
    });
}
exports.mintErc721v3 = mintErc721v3;
function mintErc1155v1(ethereum, send, nftCollectionApi, data) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var owner, _a, erc155Contract, nftTokenId, tokenId, _b, v, r, s, royalties, uriPrefix, uri, transaction;
        return (0, tslib_1.__generator)(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = types_1.toAddress;
                    return [4 /*yield*/, ethereum.getFrom()];
                case 1:
                    owner = _a.apply(void 0, [_c.sent()]);
                    return [4 /*yield*/, (0, erc1155_1.getErc1155Contract)(ethereum, domain_1.ERC1155VersionEnum.ERC1155V1, data.collection.id)];
                case 2:
                    erc155Contract = _c.sent();
                    return [4 /*yield*/, (0, get_token_id_1.getTokenId)(nftCollectionApi, data.collection.id, owner, data.nftTokenId)];
                case 3:
                    nftTokenId = _c.sent();
                    tokenId = nftTokenId.tokenId, _b = nftTokenId.signature, v = _b.v, r = _b.r, s = _b.s;
                    royalties = (data.royalties || []).map(function (x) { return ({ recipient: x.account, value: x.value }); });
                    return [4 /*yield*/, erc155Contract.functionCall("tokenURIPrefix").call()];
                case 4:
                    uriPrefix = _c.sent();
                    uri = (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri);
                    return [4 /*yield*/, send(erc155Contract.functionCall("mint", tokenId, v, r, s, royalties, data.supply, uri))];
                case 5:
                    transaction = _c.sent();
                    return [2 /*return*/, createMintOnChainResponse({
                            transaction: transaction,
                            tokenId: tokenId,
                            contract: data.collection.id,
                            owner: owner,
                            itemId: (0, create_item_id_1.createItemId)(data.collection.id, tokenId),
                        })];
            }
        });
    });
}
exports.mintErc1155v1 = mintErc1155v1;
function mintErc1155v2(ethereum, send, nftCollectionApi, data) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var creators, owner, erc1155Contract, tokenId, uriPrefix, uri, args, transaction;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getCreators(data, ethereum)];
                case 1:
                    creators = _a.sent();
                    owner = creators[0].account;
                    return [4 /*yield*/, (0, erc1155_1.getErc1155Contract)(ethereum, domain_1.ERC1155VersionEnum.ERC1155V2, data.collection.id)];
                case 2:
                    erc1155Contract = _a.sent();
                    return [4 /*yield*/, (0, get_token_id_1.getTokenId)(nftCollectionApi, data.collection.id, owner, data.nftTokenId)];
                case 3:
                    tokenId = (_a.sent()).tokenId;
                    return [4 /*yield*/, erc1155Contract.functionCall("baseURI").call()];
                case 4:
                    uriPrefix = _a.sent();
                    uri = (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri);
                    args = {
                        tokenId: tokenId,
                        tokenURI: uri,
                        supply: data.supply,
                        creators: creators,
                        royalties: data.royalties || [],
                        signatures: ["0x"],
                    };
                    return [4 /*yield*/, send(erc1155Contract.functionCall("mintAndTransfer", args, owner, data.supply))];
                case 5:
                    transaction = _a.sent();
                    return [2 /*return*/, createMintOnChainResponse({
                            transaction: transaction,
                            tokenId: tokenId,
                            contract: data.collection.id,
                            owner: owner,
                            itemId: (0, create_item_id_1.createItemId)(data.collection.id, tokenId),
                        })];
            }
        });
    });
}
exports.mintErc1155v2 = mintErc1155v2;
function getCreators(data, ethereum) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var account, _a;
        return (0, tslib_1.__generator)(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (data.creators && data.creators.length > 0) {
                        return [2 /*return*/, data.creators];
                    }
                    _a = types_1.toAddress;
                    return [4 /*yield*/, ethereum.getFrom()];
                case 1:
                    account = _a.apply(void 0, [_b.sent()]);
                    return [2 /*return*/, [{
                                account: account,
                                value: 10000,
                            }]];
            }
        });
    });
}
exports.getCreators = getCreators;
function createMintOnChainResponse(props) {
    return (0, tslib_1.__assign)({ type: mint_1.MintResponseTypeEnum.ON_CHAIN }, props);
}
