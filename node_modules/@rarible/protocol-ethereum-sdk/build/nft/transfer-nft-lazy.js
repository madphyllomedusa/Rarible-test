"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferNftLazy = void 0;
var tslib_1 = require("tslib");
var erc721_1 = require("./contracts/erc721");
var domain_1 = require("./contracts/domain");
var erc1155_1 = require("./contracts/erc1155");
function transferNftLazy(ethereum, send, nftItemApi, asset, from, to, amount) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var lazyNft, params, _a, erc721Lazy, erc1155Lazy;
        return (0, tslib_1.__generator)(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, nftItemApi.getNftLazyItemById({
                        itemId: "".concat(asset.contract, ":").concat(asset.tokenId),
                    })];
                case 1:
                    lazyNft = _b.sent();
                    params = {
                        tokenId: lazyNft.tokenId,
                        tokenURI: lazyNft.uri,
                        creators: lazyNft.creators,
                        royalties: lazyNft.royalties,
                        signatures: lazyNft.signatures,
                    };
                    if (lazyNft["@type"] === "ERC1155") {
                        params.supply = lazyNft.supply;
                    }
                    _a = lazyNft["@type"];
                    switch (_a) {
                        case "ERC721": return [3 /*break*/, 2];
                        case "ERC1155": return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 6];
                case 2: return [4 /*yield*/, (0, erc721_1.getErc721Contract)(ethereum, domain_1.ERC721VersionEnum.ERC721V3, lazyNft.contract)];
                case 3:
                    erc721Lazy = _b.sent();
                    return [2 /*return*/, send(erc721Lazy.functionCall("transferFromOrMint", params, from, to))];
                case 4: return [4 /*yield*/, (0, erc1155_1.getErc1155Contract)(ethereum, domain_1.ERC1155VersionEnum.ERC1155V2, lazyNft.contract)];
                case 5:
                    erc1155Lazy = _b.sent();
                    return [2 /*return*/, send(erc1155Lazy.functionCall("transferFromOrMint", params, from, to, amount))];
                case 6: return [2 /*return*/, Promise.reject(new Error("Unsupported nft standard"))];
            }
        });
    });
}
exports.transferNftLazy = transferNftLazy;
