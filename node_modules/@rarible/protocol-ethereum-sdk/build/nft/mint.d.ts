import type { Address, BigNumber, Binary, NftCollectionControllerApi, NftItem, NftLazyMintControllerApi, NftTokenId, Part } from "@rarible/ethereum-api-client";
import type { Maybe } from "@rarible/types/build/maybe";
import type { Ethereum, EthereumTransaction } from "@rarible/ethereum-provider";
import type { SendFunction } from "../common/send-transaction";
import type { CommonNftCollection } from "../common/mint";
import type { SimpleLazyNft } from "./sign-nft";
import type { ERC1155VersionEnum, ERC721VersionEnum, NFTContractVersion } from "./contracts/domain";
declare type Collection<V extends NFTContractVersion> = CommonNftCollection & {
    version: V;
};
declare type ERC721CollectionV1 = Collection<ERC721VersionEnum.ERC721V1>;
declare type ERC721CollectionV2 = Collection<ERC721VersionEnum.ERC721V2>;
declare type ERC721CollectionV3 = Collection<ERC721VersionEnum.ERC721V3>;
declare type ERC1155CollectionV1 = Collection<ERC1155VersionEnum.ERC1155V1>;
declare type ERC1155CollectionV2 = Collection<ERC1155VersionEnum.ERC1155V2>;
declare type CommonMintRequest = {
    uri: string;
    nftTokenId?: NftTokenId;
};
export declare type ERC721RequestV1 = {
    collection: ERC721CollectionV1;
} & CommonMintRequest;
export declare type ERC721RequestV2 = {
    collection: ERC721CollectionV2;
    royalties?: Array<Part>;
} & CommonMintRequest;
export declare type ERC721RequestV3 = {
    collection: ERC721CollectionV3;
    lazy: boolean;
    creators?: Array<Part>;
    royalties?: Array<Part>;
} & CommonMintRequest;
export declare type ERC1155RequestV1 = {
    collection: ERC1155CollectionV1;
    supply: number;
    royalties?: Array<Part>;
} & CommonMintRequest;
export declare type ERC1155RequestV2 = {
    collection: ERC1155CollectionV2;
    supply: number;
    lazy: boolean;
    creators?: Array<Part>;
    royalties?: Array<Part>;
} & CommonMintRequest;
export declare type MintRequestERC721 = ERC721RequestV1 | ERC721RequestV2 | ERC721RequestV3;
export declare type MintRequestERC1155 = ERC1155RequestV1 | ERC1155RequestV2;
export declare type MintRequest = MintRequestERC721 | MintRequestERC1155;
export declare type MintResponseCommon = {
    contract: Address;
    tokenId: BigNumber;
    owner: Address;
    itemId: string;
};
export declare enum MintResponseTypeEnum {
    OFF_CHAIN = "off-chain",
    ON_CHAIN = "on-chain"
}
export declare type MintOffChainResponse = MintResponseCommon & {
    type: MintResponseTypeEnum.OFF_CHAIN;
    item: NftItem;
};
export declare type MintOnChainResponse = MintResponseCommon & {
    type: MintResponseTypeEnum.ON_CHAIN;
    transaction: EthereumTransaction;
};
export declare function mint(ethereum: Maybe<Ethereum>, send: SendFunction, signNft: (nft: SimpleLazyNft<"signatures">) => Promise<Binary>, nftCollectionApi: NftCollectionControllerApi, nftLazyMintApi: NftLazyMintControllerApi, checkWalletChainId: () => Promise<boolean>, data: MintRequest): Promise<MintOffChainResponse | MintOnChainResponse>;
export declare const isErc721v3Collection: (x: CommonNftCollection) => x is ERC721CollectionV3;
export declare const isErc721v2Collection: (x: CommonNftCollection) => x is ERC721CollectionV2;
export declare const isErc721v1Collection: (x: CommonNftCollection) => x is ERC721CollectionV1;
export declare const isErc1155v2Collection: (x: CommonNftCollection) => x is ERC1155CollectionV2;
export declare const isErc1155v1Collection: (x: CommonNftCollection) => x is ERC1155CollectionV1;
export {};
