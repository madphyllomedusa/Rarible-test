"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferErc1155 = void 0;
var tslib_1 = require("tslib");
var erc1155_1 = require("../order/contracts/erc1155");
function transferErc1155(ethereum, send, contract, from, to, tokenId, tokenAmount) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        return (0, tslib_1.__generator)(this, function (_a) {
            if (Array.isArray(tokenId) && Array.isArray((tokenAmount))) {
                if (tokenId.length === tokenAmount.length) {
                    return [2 /*return*/, sendTransaction(ethereum, send, contract, from, to, tokenId, tokenAmount)];
                }
                else {
                    throw new Error("Length of token amounts and token id's isn't equal");
                }
            }
            else {
                return [2 /*return*/, sendTransaction(ethereum, send, contract, from, to, tokenId, tokenAmount)];
            }
            return [2 /*return*/];
        });
    });
}
exports.transferErc1155 = transferErc1155;
function sendTransaction(ethereum, send, contract, from, to, tokenId, tokenAmount) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var erc1155;
        return (0, tslib_1.__generator)(this, function (_a) {
            erc1155 = (0, erc1155_1.createErc1155Contract)(ethereum, contract);
            if (Array.isArray(tokenId) && Array.isArray(tokenAmount)) {
                return [2 /*return*/, send(erc1155.functionCall("safeBatchTransferFrom", from, to, tokenId, tokenAmount, "0x0"))];
            }
            return [2 /*return*/, send(erc1155.functionCall("safeTransferFrom", from, to, tokenId, tokenAmount, "0x0"))];
        });
    });
}
