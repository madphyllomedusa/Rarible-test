import type { ContractSendMethod, SendOptions } from "web3-eth-contract";
import type { PromiEvent } from "web3-core";
import type { GatewayControllerApi } from "@rarible/ethereum-api-client";
import type { EthereumFunctionCall, EthereumSendOptions, EthereumTransaction } from "@rarible/ethereum-provider";
import type { AbstractLogger } from "@rarible/logger/build/domain";
import { LogsLevel } from "../types";
interface ILoggerConfig {
    instance: AbstractLogger;
    level: LogsLevel;
}
export declare type SendFunction = (functionCall: EthereumFunctionCall, options?: EthereumSendOptions) => Promise<EthereumTransaction>;
declare type SendMethod = (api: GatewayControllerApi, checkChainId: () => Promise<boolean>, functionCall: EthereumFunctionCall, options?: EthereumSendOptions) => Promise<EthereumTransaction>;
export declare function getSendWithInjects(injects?: {
    logger?: ILoggerConfig;
}): SendMethod;
declare type SimpleSendMethod = (checkChainId: () => Promise<boolean>, functionCall: EthereumFunctionCall, options?: EthereumSendOptions) => Promise<EthereumTransaction>;
export declare function getSimpleSendWithInjects(injects?: {
    logger?: ILoggerConfig;
}): SimpleSendMethod;
export declare function createPendingLogs(api: GatewayControllerApi, tx: EthereumTransaction): Promise<import("@rarible/ethereum-api-client").LogEvent[]>;
export declare function sentTx(source: ContractSendMethod, options: SendOptions): Promise<string>;
export declare function waitForHash<T>(promiEvent: PromiEvent<T>): Promise<string>;
export {};
