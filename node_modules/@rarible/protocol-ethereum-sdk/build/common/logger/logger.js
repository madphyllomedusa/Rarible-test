"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRemoteLogger = exports.getErrorMessageString = exports.getEnvironment = void 0;
var tslib_1 = require("tslib");
var axios_1 = (0, tslib_1.__importDefault)(require("axios"));
var build_1 = require("@rarible/logger/build");
/**
 * Convert network name to stage environment name
 *
 * @param network
 */
function getEnvironment(network) {
    switch (network) {
        case "mainnet":
        case "polygon":
            return "prod";
        case "mumbai-dev":
            return "dev";
        case "ropsten":
        case "mumbai":
        case "rinkeby":
            return "staging";
        case "e2e":
        default:
            return "e2e";
    }
}
exports.getEnvironment = getEnvironment;
var loggerConfig = {
    service: "ethereum-sdk",
    elkUrl: "https://logging.rarible.com/",
};
function getErrorMessageString(err) {
    if (!err) {
        return "not defined";
    }
    else if (typeof err === "string") {
        return err;
    }
    else if (err instanceof Error) {
        return err.message;
    }
    else if (err.message) {
        return typeof err.message === "string" ? err.message : JSON.stringify(err.message);
    }
    else if (err.status !== undefined && err.statusText !== undefined) {
        return JSON.stringify({
            url: err.url,
            status: err.status,
            statusText: err.statusText,
        });
    }
    else {
        return JSON.stringify(err);
    }
}
exports.getErrorMessageString = getErrorMessageString;
function createRemoteLogger(context) {
    var _this = this;
    var getContext = function () { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
        var _a, _b;
        var _c;
        var _d, _e, _f, _g, _h;
        return (0, tslib_1.__generator)(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _c = {
                        service: loggerConfig.service,
                        environment: context.env
                    };
                    _a = "web3Address";
                    return [4 /*yield*/, ((_d = context.ethereum) === null || _d === void 0 ? void 0 : _d.getFrom())];
                case 1:
                    _c[_a] = (_e = (_j.sent())) !== null && _e !== void 0 ? _e : "unknown";
                    _b = "ethNetwork";
                    return [4 /*yield*/, ((_f = context.ethereum) === null || _f === void 0 ? void 0 : _f.getChainId())];
                case 2: return [2 /*return*/, (_c[_b] = (_h = (_g = (_j.sent())) === null || _g === void 0 ? void 0 : _g.toString()) !== null && _h !== void 0 ? _h : "unknown",
                        _c)];
            }
        });
    }); };
    return new build_1.RemoteLogger(function (msg) { return axios_1.default.post(loggerConfig.elkUrl, msg); }, {
        initialContext: getContext(),
        maxByteSize: 3 * 10240,
    });
}
exports.createRemoteLogger = createRemoteLogger;
