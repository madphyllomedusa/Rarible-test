"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowNftOwnershipControllerApi = void 0;
var tslib_1 = require("tslib");
var runtime = (0, tslib_1.__importStar)(require("../runtime"));
/**
 * no description
 */
var FlowNftOwnershipControllerApi = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(FlowNftOwnershipControllerApi, _super);
    function FlowNftOwnershipControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     */
    FlowNftOwnershipControllerApi.prototype.getNftAllOwnershipsRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b;
            return (0, tslib_1.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/ownerships/all",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _c.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _c.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 500)) return [3 /*break*/, 5];
                        _b = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _c.sent(),
                            _b)];
                    case 5: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOwnershipControllerApi.prototype.getNftAllOwnerships = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftAllOwnershipsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOwnershipControllerApi.prototype.getNftOwnershipByIdRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b;
            return (0, tslib_1.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters.ownershipId === null || requestParameters.ownershipId === undefined) {
                            throw new runtime.RequiredError('ownershipId', 'Required parameter requestParameters.ownershipId was null or undefined when calling getNftOwnershipById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/ownerships/{ownershipId}".replace("{".concat("ownershipId", "}"), encodeURIComponent(String(requestParameters.ownershipId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _c.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _c.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 500)) return [3 /*break*/, 5];
                        _b = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _c.sent(),
                            _b)];
                    case 5: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOwnershipControllerApi.prototype.getNftOwnershipById = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftOwnershipByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOwnershipControllerApi.prototype.getNftOwnershipsByItemRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b;
            return (0, tslib_1.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters.contract === null || requestParameters.contract === undefined) {
                            throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getNftOwnershipsByItem.');
                        }
                        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                            throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getNftOwnershipsByItem.');
                        }
                        queryParameters = {};
                        if (requestParameters.contract !== undefined) {
                            queryParameters['contract'] = requestParameters.contract;
                        }
                        if (requestParameters.tokenId !== undefined) {
                            queryParameters['tokenId'] = requestParameters.tokenId;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/ownerships/byItem",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _c.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _c.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 500)) return [3 /*break*/, 5];
                        _b = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _c.sent(),
                            _b)];
                    case 5: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOwnershipControllerApi.prototype.getNftOwnershipsByItem = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftOwnershipsByItemRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    return FlowNftOwnershipControllerApi;
}(runtime.BaseAPI));
exports.FlowNftOwnershipControllerApi = FlowNftOwnershipControllerApi;
