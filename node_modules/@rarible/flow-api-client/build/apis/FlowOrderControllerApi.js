"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowOrderControllerApi = void 0;
var tslib_1 = require("tslib");
var runtime = (0, tslib_1.__importStar)(require("../runtime"));
/**
 * no description
 */
var FlowOrderControllerApi = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(FlowOrderControllerApi, _super);
    function FlowOrderControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     */
    FlowOrderControllerApi.prototype.getBidCurrenciesRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
                            throw new runtime.RequiredError('itemId', 'Required parameter requestParameters.itemId was null or undefined when calling getBidCurrencies.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/bids/currencies/{itemId}".replace("{".concat("itemId", "}"), encodeURIComponent(String(requestParameters.itemId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getBidCurrencies = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBidCurrenciesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getBidsByItemRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.contract === null || requestParameters.contract === undefined) {
                            throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getBidsByItem.');
                        }
                        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                            throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getBidsByItem.');
                        }
                        if (requestParameters.status === null || requestParameters.status === undefined) {
                            throw new runtime.RequiredError('status', 'Required parameter requestParameters.status was null or undefined when calling getBidsByItem.');
                        }
                        queryParameters = {};
                        if (requestParameters.contract !== undefined) {
                            queryParameters['contract'] = requestParameters.contract;
                        }
                        if (requestParameters.tokenId !== undefined) {
                            queryParameters['tokenId'] = requestParameters.tokenId;
                        }
                        if (requestParameters.status) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.maker !== undefined) {
                            queryParameters['maker'] = requestParameters.maker;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.startDate !== undefined) {
                            queryParameters['startDate'] = requestParameters.startDate.toISOString();
                        }
                        if (requestParameters.endDate !== undefined) {
                            queryParameters['endDate'] = requestParameters.endDate.toISOString();
                        }
                        if (requestParameters.currencyAddress !== undefined) {
                            queryParameters['currencyAddress'] = requestParameters.currencyAddress;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/bids/byItem",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getBidsByItem = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBidsByItemRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getOrderBidsByItemRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.contract === null || requestParameters.contract === undefined) {
                            throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getOrderBidsByItem.');
                        }
                        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                            throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getOrderBidsByItem.');
                        }
                        queryParameters = {};
                        if (requestParameters.contract !== undefined) {
                            queryParameters['contract'] = requestParameters.contract;
                        }
                        if (requestParameters.tokenId !== undefined) {
                            queryParameters['tokenId'] = requestParameters.tokenId;
                        }
                        if (requestParameters.maker !== undefined) {
                            queryParameters['maker'] = requestParameters.maker;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.currencyAddress !== undefined) {
                            queryParameters['currencyAddress'] = requestParameters.currencyAddress;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/bids/byItem",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getOrderBidsByItem = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrderBidsByItemRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getOrderBidsByMakerRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.maker === null || requestParameters.maker === undefined) {
                            throw new runtime.RequiredError('maker', 'Required parameter requestParameters.maker was null or undefined when calling getOrderBidsByMaker.');
                        }
                        if (requestParameters.status === null || requestParameters.status === undefined) {
                            throw new runtime.RequiredError('status', 'Required parameter requestParameters.status was null or undefined when calling getOrderBidsByMaker.');
                        }
                        queryParameters = {};
                        if (requestParameters.maker !== undefined) {
                            queryParameters['maker'] = requestParameters.maker;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.status) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.startDate !== undefined) {
                            queryParameters['startDate'] = requestParameters.startDate.toISOString();
                        }
                        if (requestParameters.endDate !== undefined) {
                            queryParameters['endDate'] = requestParameters.endDate.toISOString();
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/bids/byMaker",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getOrderBidsByMaker = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrderBidsByMakerRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getOrderByOrderIdRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b;
            return (0, tslib_1.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
                            throw new runtime.RequiredError('orderId', 'Required parameter requestParameters.orderId was null or undefined when calling getOrderByOrderId.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/{orderId}".replace("{".concat("orderId", "}"), encodeURIComponent(String(requestParameters.orderId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _c.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _c.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 500)) return [3 /*break*/, 5];
                        _b = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _c.sent(),
                            _b)];
                    case 5: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getOrderByOrderId = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrderByOrderIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns all orders by specified parameters
     */
    FlowOrderControllerApi.prototype.getOrdersAllRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/all",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns all orders by specified parameters
     */
    FlowOrderControllerApi.prototype.getOrdersAll = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrdersAllRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getOrdersAllByStatusRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.status) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/all/byStatus",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getOrdersAllByStatus = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrdersAllByStatusRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns all orders by order hash
     */
    FlowOrderControllerApi.prototype.getOrdersByIdsRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.flowOrderIds === null || requestParameters.flowOrderIds === undefined) {
                            throw new runtime.RequiredError('flowOrderIds', 'Required parameter requestParameters.flowOrderIds was null or undefined when calling getOrdersByIds.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/byIds",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.flowOrderIds,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns all orders by order hash
     */
    FlowOrderControllerApi.prototype.getOrdersByIds = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrdersByIdsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellCurrenciesRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
                            throw new runtime.RequiredError('itemId', 'Required parameter requestParameters.itemId was null or undefined when calling getSellCurrencies.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/sell/currencies/{itemId}".replace("{".concat("itemId", "}"), encodeURIComponent(String(requestParameters.itemId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellCurrencies = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSellCurrenciesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellOrdersRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/sell",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellOrders = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSellOrdersRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellOrdersByCollectionRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.collection === null || requestParameters.collection === undefined) {
                            throw new runtime.RequiredError('collection', 'Required parameter requestParameters.collection was null or undefined when calling getSellOrdersByCollection.');
                        }
                        queryParameters = {};
                        if (requestParameters.collection !== undefined) {
                            queryParameters['collection'] = requestParameters.collection;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/sell/byCollection",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellOrdersByCollection = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSellOrdersByCollectionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellOrdersByItemRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.contract === null || requestParameters.contract === undefined) {
                            throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getSellOrdersByItem.');
                        }
                        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                            throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getSellOrdersByItem.');
                        }
                        queryParameters = {};
                        if (requestParameters.contract !== undefined) {
                            queryParameters['contract'] = requestParameters.contract;
                        }
                        if (requestParameters.tokenId !== undefined) {
                            queryParameters['tokenId'] = requestParameters.tokenId;
                        }
                        if (requestParameters.maker !== undefined) {
                            queryParameters['maker'] = requestParameters.maker;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/sell/byItem",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellOrdersByItem = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSellOrdersByItemRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellOrdersByItemAndByStatusRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.contract === null || requestParameters.contract === undefined) {
                            throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getSellOrdersByItemAndByStatus.');
                        }
                        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                            throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getSellOrdersByItemAndByStatus.');
                        }
                        queryParameters = {};
                        if (requestParameters.contract !== undefined) {
                            queryParameters['contract'] = requestParameters.contract;
                        }
                        if (requestParameters.tokenId !== undefined) {
                            queryParameters['tokenId'] = requestParameters.tokenId;
                        }
                        if (requestParameters.maker !== undefined) {
                            queryParameters['maker'] = requestParameters.maker;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.status) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.currencyAddress !== undefined) {
                            queryParameters['currencyAddress'] = requestParameters.currencyAddress;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/sell/byItemAndByStatus",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellOrdersByItemAndByStatus = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSellOrdersByItemAndByStatusRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellOrdersByMakerRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.maker === null || requestParameters.maker === undefined) {
                            throw new runtime.RequiredError('maker', 'Required parameter requestParameters.maker was null or undefined when calling getSellOrdersByMaker.');
                        }
                        queryParameters = {};
                        if (requestParameters.maker !== undefined) {
                            queryParameters['maker'] = requestParameters.maker;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/sell/byMaker",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowOrderControllerApi.prototype.getSellOrdersByMaker = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSellOrdersByMakerRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    return FlowOrderControllerApi;
}(runtime.BaseAPI));
exports.FlowOrderControllerApi = FlowOrderControllerApi;
