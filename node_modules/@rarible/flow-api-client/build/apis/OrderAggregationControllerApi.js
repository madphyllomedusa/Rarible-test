"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderAggregationControllerApi = void 0;
var tslib_1 = require("tslib");
var runtime = (0, tslib_1.__importStar)(require("../runtime"));
/**
 * no description
 */
var OrderAggregationControllerApi = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(OrderAggregationControllerApi, _super);
    function OrderAggregationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Aggregate nft purchase by collection
     */
    OrderAggregationControllerApi.prototype.aggregateNftPurchaseBuyCollectionRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
                            throw new runtime.RequiredError('startDate', 'Required parameter requestParameters.startDate was null or undefined when calling aggregateNftPurchaseBuyCollection.');
                        }
                        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
                            throw new runtime.RequiredError('endDate', 'Required parameter requestParameters.endDate was null or undefined when calling aggregateNftPurchaseBuyCollection.');
                        }
                        queryParameters = {};
                        if (requestParameters.startDate !== undefined) {
                            queryParameters['startDate'] = requestParameters.startDate;
                        }
                        if (requestParameters.endDate !== undefined) {
                            queryParameters['endDate'] = requestParameters.endDate;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/aggregations/nftPurchaseByCollection",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _b.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _b.sent(),
                            _a)];
                    case 3: throw response;
                }
            });
        });
    };
    /**
     * Aggregate nft purchase by collection
     */
    OrderAggregationControllerApi.prototype.aggregateNftPurchaseBuyCollection = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.aggregateNftPurchaseBuyCollectionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Aggregate nft purchase by taker
     */
    OrderAggregationControllerApi.prototype.aggregateNftPurchaseByTakerRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
                            throw new runtime.RequiredError('startDate', 'Required parameter requestParameters.startDate was null or undefined when calling aggregateNftPurchaseByTaker.');
                        }
                        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
                            throw new runtime.RequiredError('endDate', 'Required parameter requestParameters.endDate was null or undefined when calling aggregateNftPurchaseByTaker.');
                        }
                        queryParameters = {};
                        if (requestParameters.startDate !== undefined) {
                            queryParameters['startDate'] = requestParameters.startDate;
                        }
                        if (requestParameters.endDate !== undefined) {
                            queryParameters['endDate'] = requestParameters.endDate;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/aggregations/nftPurchaseByTaker",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _b.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _b.sent(),
                            _a)];
                    case 3: throw response;
                }
            });
        });
    };
    /**
     * Aggregate nft purchase by taker
     */
    OrderAggregationControllerApi.prototype.aggregateNftPurchaseByTaker = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.aggregateNftPurchaseByTakerRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Aggregate nft sell order by maker
     */
    OrderAggregationControllerApi.prototype.aggregateNftSellByMakerRaw = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
                            throw new runtime.RequiredError('startDate', 'Required parameter requestParameters.startDate was null or undefined when calling aggregateNftSellByMaker.');
                        }
                        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
                            throw new runtime.RequiredError('endDate', 'Required parameter requestParameters.endDate was null or undefined when calling aggregateNftSellByMaker.');
                        }
                        queryParameters = {};
                        if (requestParameters.startDate !== undefined) {
                            queryParameters['startDate'] = requestParameters.startDate;
                        }
                        if (requestParameters.endDate !== undefined) {
                            queryParameters['endDate'] = requestParameters.endDate;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/aggregations/nftSellByMaker",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _b.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _b.sent(),
                            _a)];
                    case 3: throw response;
                }
            });
        });
    };
    /**
     * Aggregate nft sell order by maker
     */
    OrderAggregationControllerApi.prototype.aggregateNftSellByMaker = function (requestParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.aggregateNftSellByMakerRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    return OrderAggregationControllerApi;
}(runtime.BaseAPI));
exports.OrderAggregationControllerApi = OrderAggregationControllerApi;
