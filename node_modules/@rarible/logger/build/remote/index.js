"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteLogger = void 0;
var tslib_1 = require("tslib");
var json_stringify_safe_1 = (0, tslib_1.__importDefault)(require("json-stringify-safe"));
var is_error_1 = require("../utils/is-error");
var batcher_1 = require("../utils/batcher");
var size_of_1 = require("../utils/size-of");
var domain_1 = require("../domain");
var RemoteLogger = /** @class */ (function () {
    function RemoteLogger(handler, config) {
        this.config = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, defaultConfig), config);
        this.batchManager = new batcher_1.Batcher(this.config.dropBatchInterval, handler);
    }
    RemoteLogger.prototype.debug = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        this.log.apply(this, (0, tslib_1.__spreadArray)([domain_1.LogLevel.DEBUG], params, true)).then();
    };
    RemoteLogger.prototype.error = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        this.log.apply(this, (0, tslib_1.__spreadArray)([domain_1.LogLevel.ERROR], params, true)).then();
    };
    RemoteLogger.prototype.info = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        this.log.apply(this, (0, tslib_1.__spreadArray)([domain_1.LogLevel.INFO], params, true)).then();
    };
    RemoteLogger.prototype.trace = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        this.log.apply(this, (0, tslib_1.__spreadArray)([domain_1.LogLevel.TRACE], params, true)).then();
    };
    RemoteLogger.prototype.warn = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        this.log.apply(this, (0, tslib_1.__spreadArray)([domain_1.LogLevel.WARN], params, true)).then();
    };
    RemoteLogger.prototype.log = function (level) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var data, e_1;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.withContext({
                                level: level,
                                message: this.getMessage(params),
                            })];
                    case 1:
                        data = _a.sent();
                        this.batchManager.add(data);
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        console.error("Cannot connect to ELK", e_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RemoteLogger.prototype.withContext = function (values) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var context;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.config.initialContext];
                    case 1:
                        context = _a.sent();
                        return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, context), this.config.context), values)];
                }
            });
        });
    };
    RemoteLogger.prototype.getMessage = function (values) {
        var fixed = (0, size_of_1.fixWithLimit)(values, this.config.maxByteSize);
        var optional = fixed.map(function (p) { return (0, is_error_1.isError)(p) ? "" + p : (0, json_stringify_safe_1.default)(p); });
        return optional.length > 0 ? " " + optional.join(", ") : "";
    };
    return RemoteLogger;
}());
exports.RemoteLogger = RemoteLogger;
var defaultConfig = {
    maxByteSize: 10240,
    dropBatchInterval: 3000,
    context: {},
    initialContext: Promise.resolve({}),
};
