"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mintToken = exports.checkTokenBalance = exports.requestSol = exports.genTestWallet = exports.getTestWallet = exports.testWallets = void 0;
var tslib_1 = require("tslib");
var web3_js_1 = require("@solana/web3.js");
var solana_wallet_1 = require("@rarible/solana-wallet");
exports.testWallets = [{
        privateKeyString: "2zCVNyb3KhunreVgamvMPDiFZpkHKHnhNeuyoanQcPaN5yHzKBM8f9PF2h6zSaBm2UUDYf98yBGNS7iRbRHGvYrm",
        privateKeyArray: Uint8Array.from([
            99, 87, 171, 135, 138, 126, 92, 128, 190, 64, 22,
            156, 36, 13, 155, 14, 214, 77, 78, 101, 109, 150,
            94, 234, 196, 21, 218, 230, 47, 10, 188, 156, 22,
            203, 117, 122, 86, 152, 247, 27, 69, 100, 69, 12,
            18, 49, 12, 192, 255, 53, 207, 73, 136, 97, 31,
            162, 159, 106, 115, 88, 189, 176, 183, 218,
        ]),
        publicKeyString: "2XyukL1KvwDkfNcdBpfXbj6UtPqF7zcUdTDURNjLFAMo",
    }, {
        privateKeyString: "2uCT82XZqTxbpVL7AoQCPi4jPxQD5zNU7PT9dYdXGeTbyzrgTRPnCKFXTSUfgMRk3Sahyhwd29YggDQHEdkWve61",
        privateKeyArray: Uint8Array.from([
            95, 7, 178, 206, 40, 211, 26, 11, 231, 5, 170,
            238, 66, 255, 253, 120, 206, 37, 238, 179, 226, 149,
            152, 249, 70, 149, 165, 216, 57, 48, 186, 183, 37,
            133, 254, 50, 205, 43, 152, 131, 54, 75, 66, 244,
            110, 229, 101, 18, 38, 62, 201, 39, 245, 109, 226,
            73, 236, 37, 143, 180, 126, 229, 117, 206,
        ]),
        publicKeyString: "3XUb9y7Z3ADxptxgfMJHcBTxxyCpfcuLDkaTfvW2DGwf",
    }];
function getTestWallet(walletIndex) {
    if (walletIndex === void 0) { walletIndex = 0; }
    return solana_wallet_1.SolanaKeypairWallet.createFrom(exports.testWallets[walletIndex].privateKeyString);
}
exports.getTestWallet = getTestWallet;
function genTestWallet(seed) {
    return solana_wallet_1.SolanaKeypairWallet.generate(seed);
}
exports.genTestWallet = genTestWallet;
function requestSol(connection, publicKey, sol) {
    if (sol === void 0) { sol = 2; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var fromAirdropSignature;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connection.requestAirdrop(publicKey, sol * web3_js_1.LAMPORTS_PER_SOL)];
                case 1:
                    fromAirdropSignature = _a.sent();
                    return [4 /*yield*/, connection.confirmTransaction(fromAirdropSignature)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, connection.getBalance(publicKey)];
                case 3: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.requestSol = requestSol;
function checkTokenBalance(connection, owner, mint, expectedValue) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var balance;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, connection.getTokenAccountsByOwner(owner, { mint: mint })];
                case 1:
                    balance = _b.sent();
                    expect((_a = balance.value) === null || _a === void 0 ? void 0 : _a.length).toBeGreaterThanOrEqual(expectedValue);
                    return [2 /*return*/, balance];
            }
        });
    });
}
exports.checkTokenBalance = checkTokenBalance;
function mintToken(_a) {
    var sdk = _a.sdk, wallet = _a.wallet;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var mintPrepare, mintTx, balance;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, sdk.nft.mint({
                        signer: wallet,
                        metadataUrl: "https://arweave.net/Vt0uj2ql0ck-U5dLWDWJnwQaZPrvqkfxils8agrTiOc",
                        maxSupply: 1,
                        collection: null,
                    })];
                case 1:
                    mintPrepare = _b.sent();
                    return [4 /*yield*/, mintPrepare.tx.submit("max")];
                case 2:
                    mintTx = _b.sent();
                    expect(mintTx.txId).toBeTruthy();
                    expect(mintPrepare.mint).toBeTruthy();
                    // required confirmation
                    return [4 /*yield*/, sdk.connection.confirmTransaction(mintTx.txId, "finalized")];
                case 3:
                    // required confirmation
                    _b.sent();
                    return [4 /*yield*/, checkTokenBalance(sdk.connection, wallet.publicKey, mintPrepare.mint, 1)];
                case 4:
                    balance = _b.sent();
                    return [2 /*return*/, { mintTx: mintTx, mint: mintPrepare.mint, balance: balance }];
            }
        });
    });
}
exports.mintToken = mintToken;
