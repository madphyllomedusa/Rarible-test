"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaOrderSdk = void 0;
var tslib_1 = require("tslib");
var prepared_transaction_1 = require("../prepared-transaction");
var sell_1 = require("./auction-house/sell");
var buy_1 = require("./auction-house/buy");
var execute_sell_1 = require("./auction-house/execute-sell");
var cancel_1 = require("./auction-house/cancel");
var SolanaOrderSdk = /** @class */ (function () {
    function SolanaOrderSdk(connection, logger) {
        this.connection = connection;
        this.logger = logger;
    }
    SolanaOrderSdk.prototype.sell = function (request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var instructions;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, sell_1.getAuctionHouseSellInstructions)({
                            connection: this.connection,
                            auctionHouse: request.auctionHouse,
                            price: request.price,
                            mint: request.mint,
                            signer: request.signer,
                            tokensAmount: request.tokensAmount,
                        })];
                    case 1:
                        instructions = _a.sent();
                        return [2 /*return*/, new prepared_transaction_1.PreparedTransaction(this.connection, instructions, request.signer, this.logger, function () {
                                _this.logger.log("Set", request.tokensAmount, request.mint.toString(), "for sale for", request.price, "from your account with Auction House", request.auctionHouse.toString());
                            })];
                }
            });
        });
    };
    SolanaOrderSdk.prototype.buy = function (request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var instructions;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, buy_1.getActionHouseBuyInstructions)({
                            connection: this.connection,
                            auctionHouse: request.auctionHouse,
                            price: request.price,
                            mint: request.mint,
                            signer: request.signer,
                            tokensAmount: request.tokensAmount,
                            tokenAccount: request.tokenAccount,
                        })];
                    case 1:
                        instructions = _a.sent();
                        return [2 /*return*/, new prepared_transaction_1.PreparedTransaction(this.connection, instructions, request.signer, this.logger, function () {
                                _this.logger.log("Made offer for ", request.mint.toString(), "for", request.price);
                            })];
                }
            });
        });
    };
    SolanaOrderSdk.prototype.cancel = function (request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var instructions;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, cancel_1.getAuctionHouseCancelInstructions)({
                            connection: this.connection,
                            auctionHouse: request.auctionHouse,
                            price: request.price,
                            mint: request.mint,
                            signer: request.signer,
                            tokensAmount: request.tokensAmount,
                        })];
                    case 1:
                        instructions = _a.sent();
                        return [2 /*return*/, new prepared_transaction_1.PreparedTransaction(this.connection, instructions, request.signer, this.logger, function () {
                                _this.logger.log("Cancelled order of", request.tokensAmount, request.mint.toString(), "for", request.price);
                            })];
                }
            });
        });
    };
    SolanaOrderSdk.prototype.acceptBid = function (request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.sell(request)];
            });
        });
    };
    SolanaOrderSdk.prototype.bid = function (request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.buy(request)];
            });
        });
    };
    SolanaOrderSdk.prototype.executeSell = function (request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var instructions;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, execute_sell_1.getAuctionHouseExecuteSellInstructions)({
                            connection: this.connection,
                            auctionHouse: request.auctionHouse,
                            signer: request.signer,
                            buyerWallet: request.buyerWallet,
                            sellerWallet: request.sellerWallet,
                            mint: request.mint,
                            tokenAccount: request.tokenAccount,
                            price: request.price,
                            tokensAmount: request.tokensAmount,
                        })];
                    case 1:
                        instructions = _a.sent();
                        return [2 /*return*/, new prepared_transaction_1.PreparedTransaction(this.connection, instructions, request.signer, this.logger, function () {
                                _this.logger.log("Accepted", request.tokensAmount, request.mint.toString(), "sale from wallet", request.sellerWallet.toString(), "to", request.buyerWallet.toString(), "for", request.price, "from your account with Auction House", request.auctionHouse.toString());
                            })];
                }
            });
        });
    };
    return SolanaOrderSdk;
}());
exports.SolanaOrderSdk = SolanaOrderSdk;
