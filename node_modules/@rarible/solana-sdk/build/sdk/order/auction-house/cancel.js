"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuctionHouseCancelInstructions = void 0;
var tslib_1 = require("tslib");
var anchor_1 = require("@project-serum/anchor");
var mpl_auction_house_1 = require("@metaplex-foundation/mpl-auction-house");
var helpers_1 = require("./helpers");
function getAuctionHouseCancelInstructions(request) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var anchorProgram, auctionHouseObj, buyPriceAdjusted, _a, tokenSizeAdjusted, _b, tla, tokenAccountKey, _c, tradeState, instruction;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, (0, helpers_1.loadAuctionHouseProgram)(request.connection, request.signer)];
                case 1:
                    anchorProgram = _d.sent();
                    return [4 /*yield*/, anchorProgram.account.auctionHouse.fetch(request.auctionHouse)];
                case 2:
                    auctionHouseObj = _d.sent();
                    _a = anchor_1.BN.bind;
                    return [4 /*yield*/, (0, helpers_1.getPriceWithMantissa)(request.price, auctionHouseObj.treasuryMint, request.signer, anchorProgram)];
                case 3:
                    buyPriceAdjusted = new (_a.apply(anchor_1.BN, [void 0, _d.sent()]))();
                    _b = anchor_1.BN.bind;
                    return [4 /*yield*/, (0, helpers_1.getPriceWithMantissa)(request.tokensAmount, request.mint, request.signer, anchorProgram)];
                case 4:
                    tokenSizeAdjusted = new (_b.apply(anchor_1.BN, [void 0, _d.sent()]))();
                    return [4 /*yield*/, anchorProgram.provider.connection.getTokenLargestAccounts(request.mint)];
                case 5:
                    tla = _d.sent();
                    if (tla.value.length === 0) {
                        throw new Error("The Mint(NFT, Tokens) largest token account can't be found, this could be " +
                            "network instability or you have the wrong mint address.");
                    }
                    tokenAccountKey = tla.value[0].address;
                    return [4 /*yield*/, (0, helpers_1.getAuctionHouseTradeState)(request.auctionHouse, request.signer.publicKey, tokenAccountKey, auctionHouseObj.treasuryMint, request.mint, tokenSizeAdjusted, buyPriceAdjusted)];
                case 6:
                    _c = tslib_1.__read.apply(void 0, [_d.sent(), 1]), tradeState = _c[0];
                    instruction = mpl_auction_house_1.AuctionHouseProgram.instructions.createCancelInstruction({
                        wallet: request.signer.publicKey,
                        tokenAccount: tokenAccountKey,
                        tokenMint: request.mint,
                        authority: auctionHouseObj.authority,
                        auctionHouse: request.auctionHouse,
                        auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,
                        tradeState: tradeState,
                    }, {
                        buyerPrice: buyPriceAdjusted,
                        tokenSize: tokenSizeAdjusted,
                    });
                    return [2 /*return*/, { instructions: [instruction], signers: [] }];
            }
        });
    });
}
exports.getAuctionHouseCancelInstructions = getAuctionHouseCancelInstructions;
