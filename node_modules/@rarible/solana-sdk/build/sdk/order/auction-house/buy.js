"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getActionHouseBuyInstructions = void 0;
var tslib_1 = require("tslib");
var solana_wallet_1 = require("@rarible/solana-wallet");
var anchor_1 = require("@project-serum/anchor");
var spl_token_1 = require("@solana/spl-token");
var mpl_auction_house_1 = require("@metaplex-foundation/mpl-auction-house");
var contracts_1 = require("../../../common/contracts");
var helpers_1 = require("../../../common/helpers");
var helpers_2 = require("./helpers");
function getActionHouseBuyInstructions(request) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var walletKeyPair, anchorProgram, auctionHouseObj, buyPriceAdjusted, _a, tokenSizeAdjusted, _b, _c, escrowPaymentAccount, escrowBump, tokenAccountKey, tla, _d, tradeState, tradeBump, isNative, ata, transferAuthority, signers, instruction, _e, _f, instructions;
        var _g;
        return tslib_1.__generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    walletKeyPair = request.signer;
                    return [4 /*yield*/, (0, helpers_2.loadAuctionHouseProgram)(request.connection, request.signer)];
                case 1:
                    anchorProgram = _h.sent();
                    return [4 /*yield*/, anchorProgram.account.auctionHouse.fetch(request.auctionHouse)];
                case 2:
                    auctionHouseObj = _h.sent();
                    _a = anchor_1.BN.bind;
                    return [4 /*yield*/, (0, helpers_2.getPriceWithMantissa)(request.price, auctionHouseObj.treasuryMint, walletKeyPair, anchorProgram)];
                case 3:
                    buyPriceAdjusted = new (_a.apply(anchor_1.BN, [void 0, _h.sent()]))();
                    _b = anchor_1.BN.bind;
                    return [4 /*yield*/, (0, helpers_2.getPriceWithMantissa)(request.tokensAmount, request.mint, walletKeyPair, anchorProgram)];
                case 4:
                    tokenSizeAdjusted = new (_b.apply(anchor_1.BN, [void 0, _h.sent()]))();
                    return [4 /*yield*/, (0, helpers_2.getAuctionHouseBuyerEscrow)(request.auctionHouse, walletKeyPair.publicKey)];
                case 5:
                    _c = tslib_1.__read.apply(void 0, [_h.sent(), 2]), escrowPaymentAccount = _c[0], escrowBump = _c[1];
                    if (!request.tokenAccount) return [3 /*break*/, 6];
                    tokenAccountKey = request.tokenAccount;
                    return [3 /*break*/, 8];
                case 6: return [4 /*yield*/, anchorProgram.provider.connection.getTokenLargestAccounts(request.mint)];
                case 7:
                    tla = _h.sent();
                    tokenAccountKey = tla.value[0].address;
                    _h.label = 8;
                case 8: return [4 /*yield*/, (0, helpers_2.getAuctionHouseTradeState)(request.auctionHouse, walletKeyPair.publicKey, tokenAccountKey, auctionHouseObj.treasuryMint, request.mint, tokenSizeAdjusted, buyPriceAdjusted)];
                case 9:
                    _d = tslib_1.__read.apply(void 0, [_h.sent(), 2]), tradeState = _d[0], tradeBump = _d[1];
                    isNative = auctionHouseObj.treasuryMint.equals(contracts_1.WRAPPED_SOL_MINT);
                    return [4 /*yield*/, (0, helpers_2.getAssociatedTokenAccountForMint)(auctionHouseObj.treasuryMint, walletKeyPair.publicKey)];
                case 10:
                    ata = (_h.sent())[0];
                    transferAuthority = solana_wallet_1.SolanaKeypairWallet.generate();
                    signers = isNative ? [] : [transferAuthority];
                    _f = (_e = mpl_auction_house_1.AuctionHouseProgram.instructions).createBuyInstruction;
                    _g = {
                        wallet: request.signer.publicKey,
                        paymentAccount: isNative ? walletKeyPair.publicKey : ata,
                        transferAuthority: isNative ? walletKeyPair.publicKey : transferAuthority.publicKey,
                        treasuryMint: auctionHouseObj.treasuryMint,
                        tokenAccount: tokenAccountKey
                    };
                    return [4 /*yield*/, (0, helpers_1.getMetadata)(request.mint)];
                case 11:
                    instruction = _f.apply(_e, [(_g.metadata = _h.sent(),
                            _g.escrowPaymentAccount = escrowPaymentAccount,
                            _g.authority = auctionHouseObj.authority,
                            _g.auctionHouse = request.auctionHouse,
                            _g.auctionHouseFeeAccount = auctionHouseObj.auctionHouseFeeAccount,
                            _g.buyerTradeState = tradeState,
                            _g), {
                            tradeStateBump: tradeBump,
                            escrowPaymentBump: escrowBump,
                            buyerPrice: buyPriceAdjusted,
                            tokenSize: tokenSizeAdjusted,
                        }]);
                    if (!isNative) {
                        instruction.keys
                            .filter(function (k) { return k.pubkey.equals(transferAuthority.publicKey); })
                            .map(function (k) { return (k.isSigner = true); });
                    }
                    instructions = tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read((isNative
                        ? []
                        : [
                            spl_token_1.Token.createApproveInstruction(spl_token_1.TOKEN_PROGRAM_ID, ata, transferAuthority.publicKey, walletKeyPair.publicKey, [], buyPriceAdjusted.toNumber()),
                        ])), false), [
                        instruction
                    ], false), tslib_1.__read((isNative
                        ? []
                        : [
                            spl_token_1.Token.createRevokeInstruction(spl_token_1.TOKEN_PROGRAM_ID, ata, walletKeyPair.publicKey, []),
                        ])), false);
                    return [2 /*return*/, { instructions: instructions, signers: signers }];
            }
        });
    });
}
exports.getActionHouseBuyInstructions = getActionHouseBuyInstructions;
