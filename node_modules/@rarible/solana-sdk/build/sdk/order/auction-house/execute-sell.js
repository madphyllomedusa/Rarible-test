"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuctionHouseExecuteSellInstructions = void 0;
var tslib_1 = require("tslib");
var anchor_1 = require("@project-serum/anchor");
var web3 = tslib_1.__importStar(require("@solana/web3.js"));
var spl_token_1 = require("@solana/spl-token");
var schema_1 = require("../../../common/schema");
var contracts_1 = require("../../../common/contracts");
var helpers_1 = require("../../../common/helpers");
var helpers_2 = require("./helpers");
function getAuctionHouseExecuteSellInstructions(request) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var anchorProgram, auctionHouseObj, isNative, buyPriceAdjusted, _a, tokenSizeAdjusted, _b, tokenAccountKey, buyerTradeState, sellerTradeState, _c, freeTradeState, freeTradeStateBump, _d, escrowPaymentAccount, escrowBump, _e, programAsSigner, programAsSignerBump, metadata, metadataObj, metadataDecoded, remainingAccounts, i, _f, _g, signers, tMint, instruction, _h, _j, _k, _l;
        var _m, _o, _p;
        return tslib_1.__generator(this, function (_q) {
            switch (_q.label) {
                case 0: return [4 /*yield*/, (0, helpers_2.loadAuctionHouseProgram)(request.connection, request.signer)];
                case 1:
                    anchorProgram = _q.sent();
                    return [4 /*yield*/, anchorProgram.account.auctionHouse.fetch(request.auctionHouse)];
                case 2:
                    auctionHouseObj = _q.sent();
                    isNative = auctionHouseObj.treasuryMint.equals(contracts_1.WRAPPED_SOL_MINT);
                    _a = anchor_1.BN.bind;
                    return [4 /*yield*/, (0, helpers_2.getPriceWithMantissa)(request.price, auctionHouseObj.treasuryMint, request.signer, anchorProgram)];
                case 3:
                    buyPriceAdjusted = new (_a.apply(anchor_1.BN, [void 0, _q.sent()]))();
                    _b = anchor_1.BN.bind;
                    return [4 /*yield*/, (0, helpers_2.getPriceWithMantissa)(request.tokensAmount, request.mint, request.signer, anchorProgram)];
                case 4:
                    tokenSizeAdjusted = new (_b.apply(anchor_1.BN, [void 0, _q.sent()]))();
                    return [4 /*yield*/, (0, helpers_2.getAssociatedTokenAccountForMint)(request.mint, request.sellerWallet)];
                case 5:
                    tokenAccountKey = (_q.sent())[0];
                    return [4 /*yield*/, (0, helpers_2.getAuctionHouseTradeState)(request.auctionHouse, request.buyerWallet, tokenAccountKey, 
                        //@ts-ignore
                        auctionHouseObj.treasuryMint, request.mint, tokenSizeAdjusted, buyPriceAdjusted)];
                case 6:
                    buyerTradeState = (_q.sent())[0];
                    return [4 /*yield*/, (0, helpers_2.getAuctionHouseTradeState)(request.auctionHouse, request.sellerWallet, tokenAccountKey, 
                        //@ts-ignore
                        auctionHouseObj.treasuryMint, request.mint, tokenSizeAdjusted, buyPriceAdjusted)];
                case 7:
                    sellerTradeState = (_q.sent())[0];
                    return [4 /*yield*/, (0, helpers_2.getAuctionHouseTradeState)(request.auctionHouse, request.sellerWallet, tokenAccountKey, 
                        //@ts-ignore
                        auctionHouseObj.treasuryMint, request.mint, tokenSizeAdjusted, new anchor_1.BN(0))];
                case 8:
                    _c = tslib_1.__read.apply(void 0, [_q.sent(), 2]), freeTradeState = _c[0], freeTradeStateBump = _c[1];
                    return [4 /*yield*/, (0, helpers_2.getAuctionHouseBuyerEscrow)(request.auctionHouse, request.buyerWallet)];
                case 9:
                    _d = tslib_1.__read.apply(void 0, [_q.sent(), 2]), escrowPaymentAccount = _d[0], escrowBump = _d[1];
                    return [4 /*yield*/, (0, helpers_2.getAuctionHouseProgramAsSigner)()];
                case 10:
                    _e = tslib_1.__read.apply(void 0, [_q.sent(), 2]), programAsSigner = _e[0], programAsSignerBump = _e[1];
                    return [4 /*yield*/, (0, helpers_1.getMetadata)(request.mint)];
                case 11:
                    metadata = _q.sent();
                    return [4 /*yield*/, anchorProgram.provider.connection.getAccountInfo(metadata)];
                case 12:
                    metadataObj = _q.sent();
                    if (!metadataObj) {
                        throw new Error("Account info doesn't fetched");
                    }
                    metadataDecoded = (0, schema_1.decodeMetadata)(Buffer.from(metadataObj.data));
                    remainingAccounts = [];
                    if (!metadataDecoded.data.creators) return [3 /*break*/, 16];
                    i = 0;
                    _q.label = 13;
                case 13:
                    if (!(i < metadataDecoded.data.creators.length)) return [3 /*break*/, 16];
                    remainingAccounts.push({
                        pubkey: new web3.PublicKey(metadataDecoded.data.creators[i].address),
                        isWritable: true,
                        isSigner: false,
                    });
                    if (!!isNative) return [3 /*break*/, 15];
                    _g = (_f = remainingAccounts).push;
                    _m = {};
                    return [4 /*yield*/, (0, helpers_2.getAssociatedTokenAccountForMint)(
                        //@ts-ignore
                        auctionHouseObj.treasuryMint, remainingAccounts[remainingAccounts.length - 1].pubkey)];
                case 14:
                    _g.apply(_f, [(_m.pubkey = (_q.sent())[0],
                            _m.isWritable = true,
                            _m.isSigner = false,
                            _m)]);
                    _q.label = 15;
                case 15:
                    i++;
                    return [3 /*break*/, 13];
                case 16:
                    signers = [];
                    tMint = auctionHouseObj.treasuryMint;
                    _j = (_h = anchorProgram.instruction).executeSale;
                    _k = [escrowBump,
                        freeTradeStateBump,
                        programAsSignerBump,
                        buyPriceAdjusted,
                        tokenSizeAdjusted];
                    _o = {};
                    _p = {
                        buyer: request.buyerWallet,
                        seller: request.sellerWallet,
                        metadata: metadata,
                        tokenAccount: tokenAccountKey,
                        tokenMint: request.mint,
                        escrowPaymentAccount: escrowPaymentAccount,
                        treasuryMint: tMint
                    };
                    if (!isNative) return [3 /*break*/, 17];
                    _l = request.sellerWallet;
                    return [3 /*break*/, 19];
                case 17: return [4 /*yield*/, (0, helpers_2.getAssociatedTokenAccountForMint)(tMint, request.sellerWallet)];
                case 18:
                    _l = (_q.sent())[0];
                    _q.label = 19;
                case 19:
                    _p.sellerPaymentReceiptAccount = _l;
                    return [4 /*yield*/, (0, helpers_2.getAssociatedTokenAccountForMint)(request.mint, request.buyerWallet)];
                case 20: return [4 /*yield*/, _j.apply(_h, _k.concat([(_o.accounts = (_p.buyerReceiptTokenAccount = (_q.sent())[0],
                            _p.authority = auctionHouseObj.authority,
                            _p.auctionHouse = request.auctionHouse,
                            _p.auctionHouseFeeAccount = auctionHouseObj.auctionHouseFeeAccount,
                            _p.auctionHouseTreasury = auctionHouseObj.auctionHouseTreasury,
                            _p.sellerTradeState = sellerTradeState,
                            _p.buyerTradeState = buyerTradeState,
                            _p.tokenProgram = spl_token_1.TOKEN_PROGRAM_ID,
                            _p.systemProgram = web3.SystemProgram.programId,
                            _p.ataProgram = spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
                            _p.programAsSigner = programAsSigner,
                            _p.rent = web3.SYSVAR_RENT_PUBKEY,
                            _p.freeTradeState = freeTradeState,
                            _p),
                            _o.remainingAccounts = remainingAccounts,
                            _o.signers = signers,
                            _o)]))];
                case 21:
                    instruction = _q.sent();
                    instruction.keys
                        .filter(function (k) { return k.pubkey.equals(request.signer.publicKey); })
                        .map(function (k) { return (k.isSigner = true); });
                    return [2 /*return*/, { instructions: [instruction], signers: signers }];
            }
        });
    });
}
exports.getAuctionHouseExecuteSellInstructions = getAuctionHouseExecuteSellInstructions;
