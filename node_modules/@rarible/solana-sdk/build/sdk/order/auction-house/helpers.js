"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuctionHouseBuyerEscrow = exports.getAuctionHouseTradeState = exports.getAuctionHouseProgramAsSigner = exports.getAssociatedTokenAccountForMint = exports.getPriceWithMantissa = exports.loadAuctionHouseProgram = void 0;
var tslib_1 = require("tslib");
var web3_js_1 = require("@solana/web3.js");
var anchor_1 = require("@project-serum/anchor");
var spl_token_1 = require("@solana/spl-token");
var contracts_1 = require("../../../common/contracts");
var utils_1 = require("../../../common/utils");
function loadAuctionHouseProgram(connection, signer) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var provider, idl;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    provider = new anchor_1.Provider(connection, signer, {
                        preflightCommitment: "recent",
                    });
                    return [4 /*yield*/, anchor_1.Program.fetchIdl(contracts_1.AUCTION_HOUSE_PROGRAM_ID, provider)];
                case 1:
                    idl = _a.sent();
                    return [2 /*return*/, new anchor_1.Program(idl, contracts_1.AUCTION_HOUSE_PROGRAM_ID, provider)];
            }
        });
    });
}
exports.loadAuctionHouseProgram = loadAuctionHouseProgram;
function getPriceWithMantissa(price, mint, walletKeyPair, anchorProgram) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var token, mintInfo, mantissa;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    token = new spl_token_1.Token(anchorProgram.provider.connection, new web3_js_1.PublicKey(mint), spl_token_1.TOKEN_PROGRAM_ID, walletKeyPair);
                    return [4 /*yield*/, token.getMintInfo()];
                case 1:
                    mintInfo = _a.sent();
                    mantissa = Math.pow(10, mintInfo.decimals);
                    return [2 /*return*/, Math.ceil(price * mantissa)];
            }
        });
    });
}
exports.getPriceWithMantissa = getPriceWithMantissa;
function getAssociatedTokenAccountForMint(mint, buyer) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([
                        buyer.toBuffer(),
                        spl_token_1.TOKEN_PROGRAM_ID.toBuffer(),
                        mint.toBuffer(),
                    ], contracts_1.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getAssociatedTokenAccountForMint = getAssociatedTokenAccountForMint;
function getAuctionHouseProgramAsSigner() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([Buffer.from(contracts_1.AUCTION_HOUSE), Buffer.from("signer")], contracts_1.AUCTION_HOUSE_PROGRAM_ID)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getAuctionHouseProgramAsSigner = getAuctionHouseProgramAsSigner;
function getAuctionHouseTradeState(auctionHouse, wallet, tokenAccount, treasuryMint, tokenMint, tokenSize, buyPrice) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([
                        Buffer.from(contracts_1.AUCTION_HOUSE),
                        wallet.toBuffer(),
                        auctionHouse.toBuffer(),
                        tokenAccount.toBuffer(),
                        treasuryMint.toBuffer(),
                        tokenMint.toBuffer(),
                        (0, utils_1.bnToBuffer)(buyPrice, "le", 8),
                        (0, utils_1.bnToBuffer)(tokenSize, "le", 8),
                    ], contracts_1.AUCTION_HOUSE_PROGRAM_ID)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getAuctionHouseTradeState = getAuctionHouseTradeState;
function getAuctionHouseBuyerEscrow(auctionHouse, wallet) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([Buffer.from(contracts_1.AUCTION_HOUSE), auctionHouse.toBuffer(), wallet.toBuffer()], contracts_1.AUCTION_HOUSE_PROGRAM_ID)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getAuctionHouseBuyerEscrow = getAuctionHouseBuyerEscrow;
