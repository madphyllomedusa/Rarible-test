"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuctionHouseSellInstructions = void 0;
var tslib_1 = require("tslib");
var anchor_1 = require("@project-serum/anchor");
var mpl_auction_house_1 = require("@metaplex-foundation/mpl-auction-house");
var helpers_1 = require("../../../common/helpers");
var helpers_2 = require("./helpers");
function getAuctionHouseSellInstructions(request) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var anchorProgram, auctionHouseObj, buyPriceAdjusted, _a, tokenSizeAdjusted, _b, tokenAccountKey, _c, programAsSigner, programAsSignerBump, _d, tradeState, tradeBump, _e, freeTradeState, freeTradeBump, signers, instruction, _f, _g;
        var _h;
        return tslib_1.__generator(this, function (_j) {
            switch (_j.label) {
                case 0: return [4 /*yield*/, (0, helpers_2.loadAuctionHouseProgram)(request.connection, request.signer)];
                case 1:
                    anchorProgram = _j.sent();
                    return [4 /*yield*/, anchorProgram.account.auctionHouse.fetch(request.auctionHouse)];
                case 2:
                    auctionHouseObj = _j.sent();
                    _a = anchor_1.BN.bind;
                    return [4 /*yield*/, (0, helpers_2.getPriceWithMantissa)(request.price, auctionHouseObj.treasuryMint, request.signer, anchorProgram)];
                case 3:
                    buyPriceAdjusted = new (_a.apply(anchor_1.BN, [void 0, _j.sent()]))();
                    _b = anchor_1.BN.bind;
                    return [4 /*yield*/, (0, helpers_2.getPriceWithMantissa)(request.tokensAmount, request.mint, request.signer, anchorProgram)];
                case 4:
                    tokenSizeAdjusted = new (_b.apply(anchor_1.BN, [void 0, _j.sent()]))();
                    return [4 /*yield*/, (0, helpers_2.getAssociatedTokenAccountForMint)(request.mint, request.signer.publicKey)];
                case 5:
                    tokenAccountKey = (_j.sent())[0];
                    return [4 /*yield*/, (0, helpers_2.getAuctionHouseProgramAsSigner)()
                        // const metadata = await getMetadata(request.mint);
                    ];
                case 6:
                    _c = tslib_1.__read.apply(void 0, [_j.sent()
                        // const metadata = await getMetadata(request.mint);
                        , 2]), programAsSigner = _c[0], programAsSignerBump = _c[1];
                    return [4 /*yield*/, (0, helpers_2.getAuctionHouseTradeState)(request.auctionHouse, request.signer.publicKey, tokenAccountKey, auctionHouseObj.treasuryMint, request.mint, tokenSizeAdjusted, buyPriceAdjusted)];
                case 7:
                    _d = tslib_1.__read.apply(void 0, [_j.sent(), 2]), tradeState = _d[0], tradeBump = _d[1];
                    return [4 /*yield*/, (0, helpers_2.getAuctionHouseTradeState)(request.auctionHouse, request.signer.publicKey, tokenAccountKey, auctionHouseObj.treasuryMint, request.mint, tokenSizeAdjusted, new anchor_1.BN(0))];
                case 8:
                    _e = tslib_1.__read.apply(void 0, [_j.sent(), 2]), freeTradeState = _e[0], freeTradeBump = _e[1];
                    signers = [];
                    _g = (_f = mpl_auction_house_1.AuctionHouseProgram.instructions).createSellInstruction;
                    _h = {
                        wallet: request.signer.publicKey,
                        tokenAccount: tokenAccountKey
                    };
                    return [4 /*yield*/, (0, helpers_1.getMetadata)(request.mint)];
                case 9:
                    instruction = _g.apply(_f, [(_h.metadata = _j.sent(),
                            _h.authority = auctionHouseObj.authority,
                            _h.auctionHouse = request.auctionHouse,
                            _h.auctionHouseFeeAccount = auctionHouseObj.auctionHouseFeeAccount,
                            _h.sellerTradeState = tradeState,
                            _h.freeSellerTradeState = freeTradeState,
                            _h.programAsSigner = programAsSigner,
                            _h), {
                            tradeStateBump: tradeBump,
                            freeTradeStateBump: freeTradeBump,
                            programAsSignerBump: programAsSignerBump,
                            buyerPrice: buyPriceAdjusted,
                            tokenSize: tokenSizeAdjusted,
                        }]);
                    instruction.keys
                        .filter(function (k) { return k.pubkey.equals(request.signer.publicKey); })
                        .map(function (k) { return (k.isSigner = true); });
                    return [2 /*return*/, { instructions: [instruction], signers: signers }];
            }
        });
    });
}
exports.getAuctionHouseSellInstructions = getAuctionHouseSellInstructions;
