"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaSdk = void 0;
var tslib_1 = require("tslib");
var web3_js_1 = require("@solana/web3.js");
var debug_logger_1 = require("../logger/debug-logger");
var transactions_1 = require("../common/transactions");
var balance_1 = require("./balance/balance");
var nft_1 = require("./nft/nft");
var order_1 = require("./order/order");
var collection_1 = require("./collection/collection");
var SolanaSdk = /** @class */ (function () {
    function SolanaSdk(connection, cluster, logging) {
        this.connection = connection;
        this.cluster = cluster;
        this.logging = logging;
        this.debugLogger = new debug_logger_1.DebugLogger(logging.debug);
        this.balances = new balance_1.SolanaBalancesSdk(connection, this.debugLogger);
        this.nft = new nft_1.SolanaNftSdk(connection, this.debugLogger);
        this.order = new order_1.SolanaOrderSdk(connection, this.debugLogger);
        this.collection = new collection_1.SolanaCollectionSdk(connection, this.debugLogger);
    }
    SolanaSdk.prototype.confirmTransaction = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (_a = this.connection).confirmTransaction.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(args), false));
    };
    SolanaSdk.prototype.unionInstructionsAndSend = function (signer, preparedTransactions, commitment) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, transactions_1.sendTransactionWithRetry)(this.connection, signer, preparedTransactions.reduce(function (acc, trans) {
                            acc.push.apply(acc, tslib_1.__spreadArray([], tslib_1.__read(trans.data.instructions), false));
                            return acc;
                        }, []), preparedTransactions.reduce(function (acc, trans) {
                            acc.push.apply(acc, tslib_1.__spreadArray([], tslib_1.__read(trans.data.signers), false));
                            return acc;
                        }, []), commitment, this.debugLogger)];
                    case 1:
                        res = _a.sent();
                        preparedTransactions.forEach(function (trans) {
                            var _a;
                            (_a = trans.onSubmit) === null || _a === void 0 ? void 0 : _a.call(trans, res);
                        });
                        return [2 /*return*/, res];
                }
            });
        });
    };
    SolanaSdk.create = function (config) {
        var connection = new web3_js_1.Connection((0, web3_js_1.clusterApiUrl)(config.connection.cluster), config.connection.commitmentOrConfig);
        return new SolanaSdk(connection, config.connection.cluster, { debug: !!config.debug });
    };
    return SolanaSdk;
}());
exports.SolanaSdk = SolanaSdk;
