"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaBalancesSdk = void 0;
var tslib_1 = require("tslib");
var web3_js_1 = require("@solana/web3.js");
var SolanaBalancesSdk = /** @class */ (function () {
    function SolanaBalancesSdk(connection, logger) {
        this.connection = connection;
        this.logger = logger;
    }
    SolanaBalancesSdk.prototype.getBalance = function (publicKey, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.connection.getBalance(publicKey, options.commitment)];
                    case 1: return [2 /*return*/, (_a.sent()) / web3_js_1.LAMPORTS_PER_SOL];
                }
            });
        });
    };
    SolanaBalancesSdk.prototype.getTokenBalance = function (owner, mint) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var accounts, res, _c, _d, tokenAccount, balance, e_1_1;
            var e_1, _e;
            return tslib_1.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4 /*yield*/, this.connection.getTokenAccountsByOwner(owner, { mint: mint })];
                    case 1:
                        accounts = _f.sent();
                        res = 0;
                        _f.label = 2;
                    case 2:
                        _f.trys.push([2, 7, 8, 9]);
                        _c = tslib_1.__values(accounts.value), _d = _c.next();
                        _f.label = 3;
                    case 3:
                        if (!!_d.done) return [3 /*break*/, 6];
                        tokenAccount = _d.value;
                        return [4 /*yield*/, this.connection.getTokenAccountBalance(tokenAccount.pubkey, "max")];
                    case 4:
                        balance = _f.sent();
                        res += (_b = (_a = balance === null || balance === void 0 ? void 0 : balance.value) === null || _a === void 0 ? void 0 : _a.uiAmount) !== null && _b !== void 0 ? _b : 0;
                        _f.label = 5;
                    case 5:
                        _d = _c.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_1_1 = _f.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_d && !_d.done && (_e = _c.return)) _e.call(_c);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 9:
                        this.logger.log(mint.toString(), "token balance is", res);
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return SolanaBalancesSdk;
}());
exports.SolanaBalancesSdk = SolanaBalancesSdk;
