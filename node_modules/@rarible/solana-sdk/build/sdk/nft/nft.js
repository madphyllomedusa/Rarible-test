"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaNftSdk = void 0;
var tslib_1 = require("tslib");
var js_1 = require("@metaplex/js");
var prepared_transaction_1 = require("../prepared-transaction");
var mint_1 = require("./mint/mint");
var SolanaNftSdk = /** @class */ (function () {
    function SolanaNftSdk(connection, logger) {
        this.connection = connection;
        this.logger = logger;
    }
    SolanaNftSdk.prototype.mint = function (request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, mint, instructions;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, mint_1.getMintNftInstructions)(this.connection, request.signer, request.metadataUrl, true, // mutable metadata ?
                        request.collection, // verify strategy ?
                        request.maxSupply, true)];
                    case 1:
                        _a = _b.sent(), mint = _a.mint, instructions = tslib_1.__rest(_a, ["mint"]);
                        return [2 /*return*/, {
                                tx: new prepared_transaction_1.PreparedTransaction(this.connection, instructions, request.signer, this.logger, function (tx) {
                                    _this.logger.log("NFT created ".concat(tx.txId));
                                    _this.logger.log("NFT: Mint Address is ".concat(mint.toString()));
                                }),
                                mint: mint,
                            }];
                }
            });
        });
    };
    SolanaNftSdk.prototype.transfer = function (request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, js_1.actions.sendToken({
                        connection: this.connection,
                        wallet: request.signer,
                        source: request.tokenAccount,
                        destination: request.to,
                        mint: request.mint,
                        amount: request.amount,
                    })];
            });
        });
    };
    SolanaNftSdk.prototype.burn = function (request) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_b) {
                return [2 /*return*/, js_1.actions.burnToken({
                        connection: this.connection,
                        wallet: request.signer,
                        token: request.tokenAccount,
                        mint: request.mint,
                        amount: request.amount,
                        owner: request.owner,
                        close: (_a = request.closeAssociatedAccount) !== null && _a !== void 0 ? _a : true,
                    })];
            });
        });
    };
    return SolanaNftSdk;
}());
exports.SolanaNftSdk = SolanaNftSdk;
