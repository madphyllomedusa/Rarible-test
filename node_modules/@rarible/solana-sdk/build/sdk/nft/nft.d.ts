import type { Connection, PublicKey } from "@solana/web3.js";
import type { u64 } from "@solana/spl-token";
import type { IWalletSigner } from "@rarible/solana-wallet";
import type { DebugLogger } from "../../logger/debug-logger";
import type { TransactionResult } from "../../types";
import { PreparedTransaction } from "../prepared-transaction";
export interface IMintRequest {
    metadataUrl: string;
    signer: IWalletSigner;
    maxSupply: number;
    collection: PublicKey | null;
}
export declare type IMintResponse = {
    tx: PreparedTransaction;
    mint: PublicKey;
};
export interface ITransferRequest {
    signer: IWalletSigner;
    tokenAccount: PublicKey;
    to: PublicKey;
    mint: PublicKey;
    amount: number | u64;
}
export interface IBurnRequest {
    signer: IWalletSigner;
    mint: PublicKey;
    owner?: PublicKey;
    tokenAccount: PublicKey;
    amount: number | u64;
    closeAssociatedAccount?: boolean;
}
export interface ISolanaNftSdk {
    mint(request: IMintRequest): Promise<IMintResponse>;
    transfer(request: ITransferRequest): Promise<TransactionResult>;
    burn(request: IBurnRequest): Promise<TransactionResult>;
}
export declare class SolanaNftSdk implements ISolanaNftSdk {
    private readonly connection;
    private readonly logger;
    constructor(connection: Connection, logger: DebugLogger);
    mint(request: IMintRequest): Promise<IMintResponse>;
    transfer(request: ITransferRequest): Promise<TransactionResult>;
    burn(request: IBurnRequest): Promise<TransactionResult>;
}
