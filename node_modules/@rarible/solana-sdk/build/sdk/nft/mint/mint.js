"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMintNftInstructions = exports.createMetadata = void 0;
var tslib_1 = require("tslib");
var web3_js_1 = require("@solana/web3.js");
var spl_token_1 = require("@solana/spl-token");
var anchor_1 = require("@project-serum/anchor");
var mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
var node_fetch_1 = tslib_1.__importDefault(require("node-fetch"));
var solana_wallet_1 = require("@rarible/solana-wallet");
var helpers_1 = require("../../../common/helpers");
function fetchMetadata(url) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var e_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, (0, node_fetch_1.default)(url, { method: "GET" })];
                case 1: return [4 /*yield*/, (_a.sent()).json()];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    e_1 = _a.sent();
                    console.log(e_1);
                    throw new Error("Metadata fetch failed ".concat(url));
                case 4: return [2 /*return*/];
            }
        });
    });
}
function validateMetadata(metadata) {
    if (!metadata.name ||
        !metadata.image ||
        isNaN(metadata.seller_fee_basis_points) ||
        !metadata.properties ||
        !Array.isArray(metadata.properties.creators)) {
        throw new Error("Invalid metadata file ".concat(metadata));
    }
    // Validate creators
    var metaCreators = metadata.properties.creators;
    if (metaCreators.some(function (creator) { return !creator.address; }) ||
        metaCreators.reduce(function (sum, creator) { return creator.share + sum; }, 0) !== 100) {
        throw new Error("Invalid creators");
    }
}
function createMetadata(metadataLink, collection, verifyCreators, uses) {
    if (verifyCreators === void 0) { verifyCreators = {}; }
    if (uses === void 0) { uses = null; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var metadata, metaCreators, creators;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetchMetadata(metadataLink)
                    // Validate metadata
                ];
                case 1:
                    metadata = _a.sent();
                    // Validate metadata
                    validateMetadata(metadata);
                    metaCreators = metadata.properties.creators;
                    creators = metaCreators.map(function (creator) {
                        var _a;
                        return new mpl_token_metadata_1.Creator({
                            address: creator.address,
                            share: creator.share,
                            verified: (_a = verifyCreators === null || verifyCreators === void 0 ? void 0 : verifyCreators[creator.address]) !== null && _a !== void 0 ? _a : false,
                        });
                    });
                    return [2 /*return*/, new mpl_token_metadata_1.DataV2({
                            symbol: metadata.symbol,
                            name: metadata.name,
                            uri: metadataLink,
                            sellerFeeBasisPoints: metadata.seller_fee_basis_points,
                            creators: creators,
                            collection: collection
                                ? new mpl_token_metadata_1.Collection({ key: collection.toBase58(), verified: false })
                                : null,
                            uses: uses,
                        })];
            }
        });
    });
}
exports.createMetadata = createMetadata;
function getMintNftInstructions(connection, signer, metadataLink, mutableMetadata, collection, maxSupply, verifyCreators, use) {
    if (mutableMetadata === void 0) { mutableMetadata = true; }
    if (collection === void 0) { collection = null; }
    if (maxSupply === void 0) { maxSupply = 0; }
    if (verifyCreators === void 0) { verifyCreators = false; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var data, mintRent, mint, instructions, signers, userTokenAccoutAddress, metadataAccount, editionAccount;
        var _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, createMetadata(metadataLink, collection, verifyCreators ? (_a = {}, _a[signer.publicKey.toString()] = true, _a) : undefined, use)];
                case 1:
                    data = _b.sent();
                    if (!data) {
                        throw new Error("Empty metadata");
                    }
                    return [4 /*yield*/, connection.getMinimumBalanceForRentExemption(spl_token_1.MintLayout.span)
                        // Generate a mint
                    ];
                case 2:
                    mintRent = _b.sent();
                    mint = solana_wallet_1.SolanaKeypairWallet.generate();
                    instructions = [];
                    signers = [mint, signer];
                    instructions.push(web3_js_1.SystemProgram.createAccount({
                        fromPubkey: signer.publicKey,
                        // eslint-disable-next-line unicorn/no-keyword-prefix
                        newAccountPubkey: mint.publicKey,
                        lamports: mintRent,
                        space: spl_token_1.MintLayout.span,
                        programId: spl_token_1.TOKEN_PROGRAM_ID,
                    }));
                    instructions.push(spl_token_1.Token.createInitMintInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, 0, signer.publicKey, signer.publicKey));
                    return [4 /*yield*/, (0, helpers_1.getTokenWallet)(signer.publicKey, mint.publicKey)];
                case 3:
                    userTokenAccoutAddress = _b.sent();
                    instructions.push((0, helpers_1.createAssociatedTokenAccountInstruction)(userTokenAccoutAddress, signer.publicKey, signer.publicKey, mint.publicKey));
                    return [4 /*yield*/, (0, helpers_1.getMetadata)(mint.publicKey)];
                case 4:
                    metadataAccount = _b.sent();
                    instructions.push.apply(instructions, tslib_1.__spreadArray([], tslib_1.__read(new mpl_token_metadata_1.CreateMetadataV2({ feePayer: signer.publicKey }, {
                        metadata: metadataAccount,
                        metadataData: data,
                        updateAuthority: signer.publicKey,
                        mint: mint.publicKey,
                        mintAuthority: signer.publicKey,
                    }).instructions), false));
                    instructions.push(spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, userTokenAccoutAddress, signer.publicKey, [], 1));
                    return [4 /*yield*/, (0, helpers_1.getMasterEdition)(mint.publicKey)];
                case 5:
                    editionAccount = _b.sent();
                    instructions.push.apply(instructions, tslib_1.__spreadArray([], tslib_1.__read(new mpl_token_metadata_1.CreateMasterEditionV3({
                        feePayer: signer.publicKey,
                    }, {
                        edition: editionAccount,
                        metadata: metadataAccount,
                        mint: mint.publicKey,
                        mintAuthority: signer.publicKey,
                        updateAuthority: signer.publicKey,
                        maxSupply: new anchor_1.BN(maxSupply),
                    }).instructions), false));
                    return [2 /*return*/, { instructions: instructions, signers: signers, mint: mint.publicKey }];
            }
        });
    });
}
exports.getMintNftInstructions = getMintNftInstructions;
