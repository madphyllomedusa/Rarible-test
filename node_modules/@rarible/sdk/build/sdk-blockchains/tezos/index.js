"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTezosSdk = void 0;
var middleware_1 = require("../../common/middleware/middleware");
var sell_1 = require("./sell");
var fill_1 = require("./fill");
var bid_1 = require("./bid");
var common_1 = require("./common");
var mint_1 = require("./mint");
var transfer_1 = require("./transfer");
var burn_1 = require("./burn");
var token_id_1 = require("./token-id");
var cancel_1 = require("./cancel");
var balance_1 = require("./balance");
var create_collection_1 = require("./create-collection");
var restriction_1 = require("./restriction");
function createTezosSdk(wallet, _apis, network) {
    var apis = (0, common_1.getTezosAPIs)(network);
    var maybeProvider = (0, common_1.getMaybeTezosProvider)(wallet === null || wallet === void 0 ? void 0 : wallet.provider, network);
    var sellService = new sell_1.TezosSell(maybeProvider, apis);
    var mintService = new mint_1.TezosMint(maybeProvider, apis, network);
    var balanceService = new balance_1.TezosBalance(maybeProvider, network);
    var bidService = new bid_1.TezosBid(maybeProvider, apis, balanceService, network);
    var fillService = new fill_1.TezosFill(maybeProvider, apis, network);
    var createCollectionService = new create_collection_1.TezosCreateCollection(maybeProvider, network);
    return {
        nft: {
            mint: mintService.mint,
            burn: new burn_1.TezosBurn(maybeProvider, apis, network).burn,
            transfer: new transfer_1.TezosTransfer(maybeProvider, apis, network).transfer,
            generateTokenId: new token_id_1.TezosTokenId(maybeProvider, apis).generateTokenId,
            deploy: createCollectionService.createCollection,
            createCollection: createCollectionService.createCollection,
            preprocessMeta: middleware_1.Middlewarer.skipMiddleware(mintService.preprocessMeta),
        },
        order: {
            fill: fillService.fill,
            buy: fillService.fill,
            acceptBid: fillService.fill,
            sell: sellService.sell,
            sellUpdate: sellService.update,
            bid: bidService.bid,
            bidUpdate: bidService.update,
            cancel: new cancel_1.TezosCancel(maybeProvider, apis, network).cancel,
        },
        balances: {
            getBalance: balanceService.getBalance,
            convert: balanceService.convert,
        },
        restriction: {
            canTransfer: new restriction_1.TezosCanTransfer(maybeProvider).canTransfer,
        },
    };
}
exports.createTezosSdk = createTezosSdk;
