"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TezosFill = void 0;
var tslib_1 = require("tslib");
var action_1 = require("@rarible/action");
// eslint-disable-next-line camelcase
var tezos_sdk_1 = require("@rarible/tezos-sdk");
var types_1 = require("@rarible/types");
var sdk_transaction_1 = require("@rarible/sdk-transaction");
var bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
var api_client_1 = require("@rarible/api-client");
var domain_1 = require("../../types/order/fill/domain");
var common_1 = require("./common");
var TezosFill = /** @class */ (function () {
    function TezosFill(provider, apis, network) {
        this.provider = provider;
        this.apis = apis;
        this.network = network;
        this.fill = this.fill.bind(this);
    }
    TezosFill.prototype.convertTezosOrderToForm = function (order) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, {
                        type: "RARIBLE_V2",
                        maker: order.maker,
                        maker_edpk: order.makerEdpk,
                        taker_edpk: order.takerEdpk,
                        make: (0, common_1.covertToLibAsset)(order.make),
                        take: (0, common_1.covertToLibAsset)(order.take),
                        salt: order.salt,
                        start: order.start,
                        end: order.end,
                        signature: order.signature,
                        data: {
                            data_type: "V1",
                            payouts: this.convertOrderPayout(order.data.payouts),
                            origin_fees: this.convertOrderPayout(order.data.originFees),
                        },
                        makeStock: (0, types_1.toBigNumber)(order.makeStock),
                    }];
            });
        });
    };
    TezosFill.prototype.convertOrderPayout = function (payout) {
        return (payout === null || payout === void 0 ? void 0 : payout.map(function (p) { return ({
            account: p.account,
            value: new bignumber_js_1.default(p.value),
        }); })) || [];
    };
    TezosFill.prototype.getPreparedOrder = function (request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, domain, hash, order;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!("order" in request)) return [3 /*break*/, 1];
                        return [2 /*return*/, (0, common_1.convertOrderToFillOrder)(request.order)];
                    case 1:
                        if (!("orderId" in request)) return [3 /*break*/, 3];
                        _a = tslib_1.__read(request.orderId.split(":"), 2), domain = _a[0], hash = _a[1];
                        if (domain !== api_client_1.Blockchain.TEZOS) {
                            throw new Error("Not an tezos order");
                        }
                        return [4 /*yield*/, this.apis.order.getOrderByHash({
                                hash: hash,
                            })];
                    case 2:
                        order = _b.sent();
                        return [2 /*return*/, this.convertTezosOrderToForm(order)];
                    case 3: throw new Error("Request error");
                }
            });
        });
    };
    TezosFill.prototype.getMaxAmount = function (order) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var provider, _a, contract, token_id, ownershipId, _b, _c, response;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        provider = (0, common_1.getRequiredProvider)(this.provider);
                        if (!(order.take.asset_type.asset_class === "MT" || order.take.asset_type.asset_class === "NFT")) return [3 /*break*/, 3];
                        _a = order.take.asset_type, contract = _a.contract, token_id = _a.token_id;
                        _c = (_b = "".concat(contract, ":").concat(token_id.toString(), ":")).concat;
                        return [4 /*yield*/, (0, tezos_sdk_1.get_address)(provider)];
                    case 1:
                        ownershipId = _c.apply(_b, [_d.sent()]);
                        return [4 /*yield*/, this.apis.ownership.getNftOwnershipById({
                                ownershipId: ownershipId,
                            })];
                    case 2:
                        response = _d.sent();
                        return [2 /*return*/, (0, types_1.toBigNumber)(response.value)];
                    case 3: return [2 /*return*/, (0, types_1.toBigNumber)(order.makeStock)];
                }
            });
        });
    };
    TezosFill.prototype.isMultiple = function (order) {
        return order.take.asset_type.asset_class === "MT" || order.make.asset_type.asset_class === "MT";
    };
    TezosFill.prototype.fill = function (request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var preparedOrder, submit;
            var _a;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getPreparedOrder(request)];
                    case 1:
                        preparedOrder = _b.sent();
                        submit = action_1.Action.create({
                            id: "send-tx",
                            run: function (fillRequest) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var provider, request, fillResponse;
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            provider = (0, common_1.getRequiredProvider)(this.provider);
                                            request = {
                                                amount: new bignumber_js_1.default(fillRequest.amount),
                                                payouts: convertUnionParts(fillRequest.payouts),
                                                origin_fees: convertUnionParts(fillRequest.originFees),
                                                infinite: fillRequest.infiniteApproval,
                                                use_all: true,
                                            };
                                            return [4 /*yield*/, (0, tezos_sdk_1.fill_order)(provider, preparedOrder, request, fillRequest.unwrap)];
                                        case 1:
                                            fillResponse = _a.sent();
                                            return [2 /*return*/, new sdk_transaction_1.BlockchainTezosTransaction(fillResponse, this.network)];
                                    }
                                });
                            }); },
                        });
                        _a = {
                            multiple: this.isMultiple(preparedOrder)
                        };
                        return [4 /*yield*/, this.getMaxAmount(preparedOrder)];
                    case 2: return [2 /*return*/, (_a.maxAmount = _b.sent(),
                            _a.baseFee = parseInt(this.provider.config.fees.toString()),
                            _a.originFeeSupport = domain_1.OriginFeeSupport.FULL,
                            _a.payoutsSupport = domain_1.PayoutsSupport.MULTIPLE,
                            _a.supportsPartialFill = true,
                            _a.submit = submit,
                            _a)];
                }
            });
        });
    };
    return TezosFill;
}());
exports.TezosFill = TezosFill;
function convertUnionParts(parts) {
    return (parts === null || parts === void 0 ? void 0 : parts.map(function (p) { return ({
        account: (0, common_1.getTezosAddress)(p.account),
        value: new bignumber_js_1.default(p.value),
    }); })) || [];
}
