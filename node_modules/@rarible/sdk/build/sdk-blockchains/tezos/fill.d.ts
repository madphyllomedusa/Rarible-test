import type { Part, Part as TezosPart } from "@rarible/tezos-sdk/dist/order";
import type { BigNumber as RaribleBigNumber } from "@rarible/types";
import type { Order as TezosOrder } from "tezos-api-client";
import type { TezosNetwork, TezosProvider } from "@rarible/tezos-sdk";
import type { PrepareFillRequest, PrepareFillResponse } from "../../types/order/fill/domain";
import type { ITezosAPI, MaybeProvider, PreparedOrder } from "./common";
export declare class TezosFill {
    private provider;
    private apis;
    private network;
    constructor(provider: MaybeProvider<TezosProvider>, apis: ITezosAPI, network: TezosNetwork);
    convertTezosOrderToForm(order: TezosOrder): Promise<PreparedOrder>;
    convertOrderPayout(payout?: Array<Part> | Array<{
        account: string;
        value: number;
    }>): Array<TezosPart>;
    getPreparedOrder(request: PrepareFillRequest): Promise<PreparedOrder>;
    getMaxAmount(order: PreparedOrder): Promise<RaribleBigNumber>;
    isMultiple(order: PreparedOrder): boolean;
    fill(request: PrepareFillRequest): Promise<PrepareFillResponse>;
}
