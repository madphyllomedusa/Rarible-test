"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaBalance = void 0;
var tslib_1 = require("tslib");
var get_currency_asset_type_1 = require("../../common/get-currency-asset-type");
var address_converters_1 = require("./common/address-converters");
var SolanaBalance = /** @class */ (function () {
    function SolanaBalance(sdk, wallet, config) {
        this.sdk = sdk;
        this.wallet = wallet;
        this.config = config;
        this.getBalance = this.getBalance.bind(this);
    }
    SolanaBalance.prototype.getBalance = function (address, currency) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var assetType;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assetType = (0, get_currency_asset_type_1.getCurrencyAssetType)(currency);
                        if (!(assetType["@type"] === "SOLANA_SOL")) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.sdk.balances.getBalance((0, address_converters_1.extractPublicKey)(address), { commitment: "max" })];
                    case 1: return [2 /*return*/, (_a.sent()).toString()];
                    case 2:
                        if (!(assetType["@type"] === "SOLANA_NFT")) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.sdk.balances.getTokenBalance((0, address_converters_1.extractPublicKey)(address), (0, address_converters_1.extractPublicKey)(assetType.itemId))];
                    case 3: return [2 /*return*/, (_a.sent()).toString()];
                    case 4: throw new Error("Unsupported asset type");
                }
            });
        });
    };
    return SolanaBalance;
}());
exports.SolanaBalance = SolanaBalance;
