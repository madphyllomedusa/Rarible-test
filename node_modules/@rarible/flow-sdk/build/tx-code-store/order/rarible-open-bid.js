"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBidCode = void 0;
var tslib_1 = require("tslib");
var t = (0, tslib_1.__importStar)(require("@onflow/types"));
var flow_sdk_scripts_1 = require("@rarible/flow-sdk-scripts");
var conver_fee_to_cadence_1 = require("../common/conver-fee-to-cadence");
var fix_amount_1 = require("../../common/fix-amount");
var prepare_order_code_1 = require("./prepare-order-code");
function getBidCode(fcl, collectionName) {
    return {
        create: function (currency, itemId, price, fees) {
            return {
                cadence: (0, prepare_order_code_1.prepareOrderCode)(flow_sdk_scripts_1.openBidTransactionCode.openBid, collectionName, currency),
                args: fcl.args([
                    fcl.arg(itemId, t.UInt64), fcl.arg((0, fix_amount_1.fixAmount)(price), t.UFix64), fcl.arg((0, conver_fee_to_cadence_1.prepareFees)(fees), t.Dictionary({
                        key: t.Address,
                        value: t.UFix64,
                    })),
                ]),
            };
        },
        update: function (currency, bidId, price, fees) {
            return {
                cadence: (0, prepare_order_code_1.prepareOrderCode)(flow_sdk_scripts_1.openBidTransactionCode.updateBid, collectionName, currency),
                args: fcl.args([
                    fcl.arg(bidId, t.UInt64),
                    fcl.arg((0, fix_amount_1.fixAmount)(price), t.UFix64),
                    fcl.arg((0, conver_fee_to_cadence_1.prepareFees)(fees), t.Dictionary({
                        key: t.Address,
                        value: t.UFix64,
                    })),
                ]),
            };
        },
        close: function (currency, bidId, openBidAddress, fees) {
            return {
                cadence: (0, prepare_order_code_1.prepareOrderCode)(flow_sdk_scripts_1.openBidTransactionCode.closeBid, collectionName, currency),
                args: fcl.args([
                    fcl.arg(bidId, t.UInt64), fcl.arg(openBidAddress, t.Address), fcl.arg((0, conver_fee_to_cadence_1.prepareFees)(fees), t.Dictionary({
                        key: t.Address,
                        value: t.UFix64,
                    })),
                ]),
            };
        },
        cancel: function (bidId) {
            return {
                cadence: flow_sdk_scripts_1.openBidTransactionCode.cancelBid,
                args: fcl.args([fcl.arg(bidId, t.UInt64)]),
            };
        },
    };
}
exports.getBidCode = getBidCode;
