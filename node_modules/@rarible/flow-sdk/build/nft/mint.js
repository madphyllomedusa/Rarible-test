"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mint = void 0;
var tslib_1 = require("tslib");
var transaction_1 = require("../common/transaction");
var nft_1 = require("../tx-code-store/nft");
var get_config_1 = require("../common/collection/get-config");
var item_1 = require("../common/item");
var validate_royalties_1 = require("./common/validate-royalties");
function mint(fcl, auth, network, collection, metadata, royalties) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var _a, map, address, config, name, validatedRoyalties, txId, txResult, mintEvent;
        return (0, tslib_1.__generator)(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for mint");
                    }
                    _a = (0, get_config_1.getCollectionConfig)(network, collection), map = _a.map, address = _a.address, config = _a.config, name = _a.name;
                    if (!config.features.includes("MINT")) return [3 /*break*/, 3];
                    validatedRoyalties = (0, validate_royalties_1.validateRoyalties)(royalties);
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, nft_1.getNftCode)(name).mint(fcl, address, metadata, validatedRoyalties), auth)];
                case 1:
                    txId = _b.sent();
                    return [4 /*yield*/, (0, transaction_1.waitForSeal)(fcl, txId)];
                case 2:
                    txResult = _b.sent();
                    if (txResult.events.length) {
                        mintEvent = txResult.events.find(function (e) { return e.type.split(".")[3] === "Mint"; });
                        if (mintEvent) {
                            return [2 /*return*/, (0, tslib_1.__assign)({ tokenId: (0, item_1.toFlowItemId)("".concat(collection, ":").concat(mintEvent.data.id)) }, txResult)];
                        }
                        throw new Error("Mint event not found in transaction response");
                    }
                    throw new Error("Something went wrong, transaction sent but events is empty");
                case 3: throw new Error("This collection doesn't support 'mint'");
            }
        });
    });
}
exports.mint = mint;
