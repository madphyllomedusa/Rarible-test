"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transfer = void 0;
var tslib_1 = require("tslib");
var transaction_1 = require("../common/transaction");
var nft_1 = require("../tx-code-store/nft");
var get_config_1 = require("../common/collection/get-config");
function transfer(fcl, auth, network, collection, tokenId, to) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var _a, config, map, name_1, checkReceiver, txId;
        return (0, tslib_1.__generator)(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!fcl) return [3 /*break*/, 6];
                    _a = (0, get_config_1.getCollectionConfig)(network, collection), config = _a.config, map = _a.map, name_1 = _a.name;
                    if (!config.features.includes("TRANSFER")) return [3 /*break*/, 5];
                    return [4 /*yield*/, (0, transaction_1.runScript)(fcl, (0, nft_1.getNftCode)(name_1).check(fcl, to), map)];
                case 1:
                    checkReceiver = _b.sent();
                    if (!checkReceiver) return [3 /*break*/, 4];
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, nft_1.getNftCode)(name_1).transfer(fcl, tokenId, to), auth)];
                case 2:
                    txId = _b.sent();
                    return [4 /*yield*/, (0, transaction_1.waitForSeal)(fcl, txId)];
                case 3: return [2 /*return*/, _b.sent()];
                case 4: throw new Error("The recipient has't yet initialized this collection on their account, and can't receive NFT from this collection");
                case 5: throw new Error("This collection doesn't support 'transfer' action");
                case 6: throw new Error("Fcl is required for transfer");
            }
        });
    });
}
exports.transfer = transfer;
