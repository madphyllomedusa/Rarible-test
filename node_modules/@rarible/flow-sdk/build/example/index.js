"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fcl = (0, tslib_1.__importStar)(require("@onflow/fcl"));
var types_1 = require("@rarible/types");
var index_1 = require("../index");
var config_1 = require("../config/config");
/** Configure fcl first */
/** Learn more about fcl configuration https://docs.onflow.org/fcl/#wallet-interactions */
fcl.config()
    .put("accessNode.api", "https://access-mainnet-beta.onflow.org")
    .put("challenge.handshake", "https://flow-wallet.blocto.app/authn");
var feesArray = [{ account: types_1.FLOW_ZERO_ADDRESS, value: (0, types_1.toBigNumber)("0.1") }];
/** Create SDK */
var sdk = (0, index_1.createFlowSdk)(fcl, "mainnet");
/** Nft features: mint, burn, transfer */
var collection = (0, index_1.toFlowContractAddress)(config_1.TestnetCollections.RARIBLE);
sdk.nft.mint(collection, "ipfs:ipfs://...", feesArray).then(function (response) {
    console.log("transaction id: ", response.txId);
    console.log("minted token id: ", response.tokenId);
});
sdk.nft.transfer(collection, 123, (0, types_1.toFlowAddress)("")).then(function (response) {
    console.log("transaction id: ", response.txId);
});
sdk.nft.burn(collection, 123).then(function (response) {
    console.log("transaction id: ", response.txId);
});
/** Order features: create, update, cancel, fill, createBid, updateBid, cancelBid, acceptBid*/
sdk.order.sell({
    collection: collection,
    itemId: (0, index_1.toFlowItemId)("A.".concat(types_1.FLOW_ZERO_ADDRESS, ".RaribleNFT:123")),
    originFees: feesArray,
    sellItemPrice: (0, types_1.toBigNumber)("0.3"),
    currency: "FLOW",
}).then(function (response) {
    console.log("order id: ", response.orderId);
});
sdk.order.updateOrder({
    collection: collection,
    currency: "FUSD",
    order: 123,
    sellItemPrice: (0, types_1.toBigNumber)("0.1"),
}).then(function (response) {
    console.log("order id: ", response.orderId);
});
sdk.order.cancelOrder(collection, 123).then(function (response) {
    console.log("transaction id: ", response.txId);
});
sdk.order.bid(collection, "FLOW", (0, index_1.toFlowItemId)("flow item id"), (0, types_1.toBigNumber)("0.1")).then(function (response) {
    console.log("bid order id: ", response.orderId);
});
sdk.order.bidUpdate(collection, "FLOW", 123, (0, types_1.toBigNumber)("0.1")).then(function (response) {
    console.log("bid order id: ", response.orderId);
});
sdk.order.cancelBid(collection, 123).then(function (response) {
    console.log("transaction id: ", response.txId);
});
// fill order function can close both order types, sell and bid
sdk.order.fill(collection, "FLOW", 123, types_1.FLOW_ZERO_ADDRESS, feesArray).then(function (response) {
    console.log("transaction id: ", response.txId);
});
/** get fungible balance feature*/
sdk.wallet.getFungibleBalance(types_1.FLOW_ZERO_ADDRESS, "FUSD").then(function (balance) {
    console.log("balance: ", balance);
});
