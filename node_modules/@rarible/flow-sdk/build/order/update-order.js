"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateOrder = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var transaction_1 = require("../common/transaction");
var get_config_1 = require("../common/collection/get-config");
var check_price_1 = require("../common/check-price");
var parse_tx_events_1 = require("../common/parse-tx-events");
var storefront_1 = require("../tx-code-store/order/storefront");
var get_order_details_from_blockchain_1 = require("./common/get-order-details-from-blockchain");
var get_prepared_order_1 = require("./common/get-prepared-order");
var calculate_update_order_sale_cuts_1 = require("./common/calculate-update-order-sale-cuts");
function updateOrder(fcl, orderApi, auth, network, request) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var collection, currency, sellItemPrice, order, from, _a, _b, _c, preparedOrder, _d, name_1, map, orderSaleCuts, txId, tx, simpleOrderId;
        return (0, tslib_1.__generator)(this, function (_e) {
            switch (_e.label) {
                case 0:
                    collection = request.collection, currency = request.currency, sellItemPrice = request.sellItemPrice, order = request.order;
                    (0, check_price_1.checkPrice)(sellItemPrice);
                    if (!fcl) return [3 /*break*/, 9];
                    if (!auth) return [3 /*break*/, 2];
                    _b = types_1.toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_e.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = types_1.toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_e.sent()).addr]);
                    _e.label = 4;
                case 4:
                    from = _a;
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    return [4 /*yield*/, (0, get_prepared_order_1.getPreparedOrder)(orderApi, order)];
                case 5:
                    preparedOrder = _e.sent();
                    _d = (0, get_config_1.getCollectionConfig)(network, collection), name_1 = _d.name, map = _d.map;
                    return [4 /*yield*/, (0, get_order_details_from_blockchain_1.getOrderDetailsFromBlockchain)(fcl, network, "sell", from, preparedOrder.id)];
                case 6:
                    orderSaleCuts = _e.sent();
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, storefront_1.getOrderCode)(fcl, name_1).update(currency, preparedOrder.id, (0, calculate_update_order_sale_cuts_1.calculateUpdateOrderSaleCuts)(preparedOrder.take.value, request.sellItemPrice, orderSaleCuts.saleCuts)), auth)];
                case 7:
                    txId = _e.sent();
                    return [4 /*yield*/, (0, transaction_1.waitForSeal)(fcl, txId)];
                case 8:
                    tx = _e.sent();
                    simpleOrderId = (0, parse_tx_events_1.parseEvents)(tx.events, "ListingAvailable", "listingResourceID");
                    return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, tx), { orderId: parseInt(simpleOrderId) })];
                case 9: throw new Error("Fcl is required for updating order");
            }
        });
    });
}
exports.updateOrder = updateOrder;
