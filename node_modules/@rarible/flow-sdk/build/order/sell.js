"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sell = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var transaction_1 = require("../common/transaction");
var get_config_1 = require("../common/collection/get-config");
var check_price_1 = require("../common/check-price");
var parse_tx_events_1 = require("../common/parse-tx-events");
var item_1 = require("../common/item");
var storefront_1 = require("../tx-code-store/order/storefront");
var fix_amount_1 = require("../common/fix-amount");
var get_protocol_fee_1 = require("./get-protocol-fee");
var calculate_sale_cuts_1 = require("./common/calculate-sale-cuts");
var fetch_item_royalties_1 = require("./common/fetch-item-royalties");
function sell(fcl, itemApi, auth, network, request) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var collection, currency, itemId, sellItemPrice, payouts, originFees, from, _a, _b, _c, royalties, _d, _e, name_1, map, txId, tx, simpleOrderId;
        return (0, tslib_1.__generator)(this, function (_f) {
            switch (_f.label) {
                case 0:
                    collection = request.collection, currency = request.currency, itemId = request.itemId, sellItemPrice = request.sellItemPrice, payouts = request.payouts, originFees = request.originFees;
                    (0, check_price_1.checkPrice)(sellItemPrice);
                    if (!fcl) return [3 /*break*/, 10];
                    if (!auth) return [3 /*break*/, 2];
                    _b = types_1.toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_f.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = types_1.toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_f.sent()).addr]);
                    _f.label = 4;
                case 4:
                    from = _a;
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    if (!(network === "emulator")) return [3 /*break*/, 5];
                    _d = [];
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, (0, fetch_item_royalties_1.fetchItemRoyalties)(itemApi, itemId)];
                case 6:
                    _d = _f.sent();
                    _f.label = 7;
                case 7:
                    royalties = _d;
                    _e = (0, get_config_1.getCollectionConfig)(network, collection), name_1 = _e.name, map = _e.map;
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, storefront_1.getOrderCode)(fcl, name_1).create(currency, (0, item_1.extractTokenId)(itemId), (0, calculate_sale_cuts_1.calculateSaleCuts)(from, (0, fix_amount_1.fixAmount)(sellItemPrice), (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([
                            get_protocol_fee_1.getProtocolFee.percents(network).sellerFee
                        ], (originFees || []), true), (royalties || []), true), (0, tslib_1.__spreadArray)([], (payouts || []), true))), auth)];
                case 8:
                    txId = _f.sent();
                    return [4 /*yield*/, (0, transaction_1.waitForSeal)(fcl, txId)];
                case 9:
                    tx = _f.sent();
                    simpleOrderId = (0, parse_tx_events_1.parseEvents)(tx.events, "ListingAvailable", "listingResourceID");
                    return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, tx), { orderId: parseInt(simpleOrderId) })];
                case 10: throw new Error("Fcl is required for creating order");
            }
        });
    });
}
exports.sell = sell;
