"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bid = void 0;
var tslib_1 = require("tslib");
var transaction_1 = require("../common/transaction");
var get_config_1 = require("../common/collection/get-config");
var rarible_open_bid_1 = require("../tx-code-store/order/rarible-open-bid");
var parse_tx_events_1 = require("../common/parse-tx-events");
var item_1 = require("../common/item");
var calculate_fees_1 = require("../common/calculate-fees");
var fix_amount_1 = require("../common/fix-amount");
var get_protocol_fee_1 = require("./get-protocol-fee");
function bid(fcl, auth, network, collection, currency, itemId, price, originFee) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var _a, name_1, map, protocolFees, requestFees, txId, txResponse, simpleOrderId;
        return (0, tslib_1.__generator)(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!fcl) return [3 /*break*/, 3];
                    _a = (0, get_config_1.getCollectionConfig)(network, collection), name_1 = _a.name, map = _a.map;
                    protocolFees = [get_protocol_fee_1.getProtocolFee.percents(network).buyerFee];
                    requestFees = originFee || [];
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, rarible_open_bid_1.getBidCode)(fcl, name_1).create(currency, (0, item_1.extractTokenId)(itemId), (0, fix_amount_1.fixAmount)(price), (0, tslib_1.__spreadArray)([], (0, calculate_fees_1.calculateFees)(price, (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], protocolFees, true), requestFees, true)), true)), auth)];
                case 1:
                    txId = _b.sent();
                    return [4 /*yield*/, (0, transaction_1.waitForSeal)(fcl, txId)];
                case 2:
                    txResponse = _b.sent();
                    simpleOrderId = (0, parse_tx_events_1.parseEvents)(txResponse.events, "BidAvailable", "bidId");
                    return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, txResponse), { orderId: parseInt(simpleOrderId) })];
                case 3: throw new Error("Fcl is required for purchasing");
            }
        });
    });
}
exports.bid = bid;
