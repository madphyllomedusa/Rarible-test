import type { CommonFlowTransaction } from "@rarible/fcl-types";
import type { FlowRoyalty } from "@rarible/flow-api-client";
export declare type FlowCurrency = "FLOW" | "FUSD";
export declare type FlowNetwork = "emulator" | "testnet" | "mainnet";
export interface FlowFee extends FlowRoyalty {
}
export declare type FlowOriginFees = FlowFee[];
export declare type FlowPayouts = FlowFee[];
export declare type FungibleContracts = FUSDType | FlowTokenType;
export declare const NON_FUNGIBLE_CONTRACTS: readonly ["RaribleNFT", "Evolution", "MotoGPCard", "TopShot", "MugenNFT", "CNN_NFT", "MatrixWorldFlowFestNFT", "MatrixWorldVoucher", "DisruptArt", "Art", "StarlyCard", "OneFootballCollectible", "ChainmonstersRewards", "BarterYardPackNFT", "Moments", "FanfareNFTContract", "Kicks", "SomePlaceCollectible", "IrNFT", "IrVoucher", "GeniaceNFT", "CryptoPiggo"];
export declare type NonFungibleContracts = typeof NON_FUNGIBLE_CONTRACTS;
export declare type NonFungibleContract = NonFungibleContracts[number];
export declare type FlowContractName = NonFungibleTokenType | FungibleTokenType | NFTStorefrontType | RaribleFeeType | RaribleOrderType | LicensedNFTType | TopShotFeeType | RaribleOpenBid | MetadataViews | FungibleContracts | NonFungibleContract;
export declare type AuthWithPrivateKey = undefined | ((account?: any) => Promise<any>);
export interface FlowTransaction extends CommonFlowTransaction {
    txId: string;
}
export type { FlowEnv } from "./config/env";
export declare type NonFungibleTokenType = "NonFungibleToken";
export declare type FungibleTokenType = "FungibleToken";
export declare type FUSDType = "FUSD";
export declare type FlowTokenType = "FlowToken";
export declare type NFTStorefrontType = "NFTStorefront";
export declare type RaribleFeeType = "RaribleFee";
export declare type RaribleOrderType = "RaribleOrder";
export declare type LicensedNFTType = "LicensedNFT";
export declare type TopShotFeeType = "TopShotFee";
export declare type RaribleOpenBid = "RaribleOpenBid";
export declare type MetadataViews = "MetadataViews";
