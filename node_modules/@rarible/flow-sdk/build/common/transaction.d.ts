import type { Fcl } from "@rarible/fcl-types";
import type { AuthWithPrivateKey, FlowTransaction } from "../types";
export declare type MethodArgs = {
    cadence: string;
    args?: any;
};
export declare const runScript: (fcl: Fcl, params: MethodArgs, addressMap: Record<string, string>) => Promise<any>;
export declare const runTransaction: (fcl: Fcl, addressMap: Record<string, string>, params: MethodArgs, signature: AuthWithPrivateKey, gasLimit?: number) => Promise<string>;
export declare const waitForSeal: (fcl: Fcl, txId: string) => Promise<FlowTransaction>;
export declare function subscribeForTxResult(fcl: Fcl, txId: string, cb: (tx: FlowTransaction) => void): void;
export declare const contractAddressHex: <T extends Record<string, any>>(fcl: Fcl<T>, label: keyof T) => Promise<string | null>;
