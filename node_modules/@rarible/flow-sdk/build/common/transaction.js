"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contractAddressHex = exports.subscribeForTxResult = exports.waitForSeal = exports.runTransaction = exports.runScript = void 0;
var tslib_1 = require("tslib");
var template_replacer_1 = require("./template-replacer");
var runScript = function (fcl, params, addressMap) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
    var cadence, result;
    return (0, tslib_1.__generator)(this, function (_a) {
        switch (_a.label) {
            case 0:
                cadence = (0, template_replacer_1.replaceImportAddresses)(params.cadence, addressMap);
                return [4 /*yield*/, fcl.send([fcl.script(templateObject_1 || (templateObject_1 = (0, tslib_1.__makeTemplateObject)(["", ""], ["", ""])), cadence), params.args])];
            case 1:
                result = _a.sent();
                return [4 /*yield*/, fcl.decode(result)];
            case 2: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.runScript = runScript;
var runTransaction = function (fcl, addressMap, params, signature, gasLimit) {
    if (gasLimit === void 0) { gasLimit = 999; }
    return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
        var code, ix, tx;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0:
                    code = (0, template_replacer_1.replaceImportAddresses)(params.cadence, addressMap);
                    ix = [fcl.limit(gasLimit)];
                    ix.push(fcl.payer(signature || fcl.authz), fcl.proposer(signature || fcl.authz), fcl.authorizations([signature || fcl.authz]));
                    if (params.args) {
                        ix.push(params.args);
                    }
                    ix.push(fcl.transaction(code));
                    return [4 /*yield*/, fcl.send(ix)];
                case 1:
                    tx = _a.sent();
                    return [2 /*return*/, tx.transactionId];
            }
        });
    });
};
exports.runTransaction = runTransaction;
var waitForSeal = function (fcl, txId) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
    var sealed;
    return (0, tslib_1.__generator)(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fcl.tx(txId).onceSealed()];
            case 1:
                sealed = _a.sent();
                return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, sealed), { txId: txId })];
        }
    });
}); };
exports.waitForSeal = waitForSeal;
function subscribeForTxResult(fcl, txId, cb) {
    var unsub = fcl
        .tx(txId)
        .subscribe(function (transaction) {
        cb((0, tslib_1.__assign)({ txId: txId }, transaction));
        if (fcl.tx.isSealed(transaction)) {
            unsub();
        }
    });
}
exports.subscribeForTxResult = subscribeForTxResult;
var contractAddressHex = function (fcl, label) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
    var contract;
    return (0, tslib_1.__generator)(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fcl.config().get(label)];
            case 1:
                contract = _a.sent();
                return [2 /*return*/, fcl.sansPrefix(contract)];
        }
    });
}); };
exports.contractAddressHex = contractAddressHex;
var templateObject_1;
