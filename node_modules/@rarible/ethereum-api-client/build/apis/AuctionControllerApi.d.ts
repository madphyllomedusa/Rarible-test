/**
 * OpenAPI definition
 * Indexers use OpenAPI to describe APIs (and events). Clients (Kotlin, TypeScript, etc.) and server controller interfaces automatically generated using YAML OpenAPI files.
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Auction, AuctionBidsPagination, AuctionIds, AuctionSort, AuctionStatus, AuctionsPagination, EthereumApiErrorBadRequest, EthereumApiErrorEntityNotFound, EthereumApiErrorServerError, Platform } from '../models';
export interface GetAuctionBidsByHashRequest {
    hash: string;
    continuation?: string;
    size?: number;
}
export interface GetAuctionByHashRequest {
    hash: string;
}
export interface GetAuctionsAllRequest {
    sort?: AuctionSort;
    status?: Array<AuctionStatus>;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetAuctionsByCollectionRequest {
    contract: string;
    seller?: string;
    origin?: string;
    status?: Array<AuctionStatus>;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetAuctionsByIdsRequest {
    auctionIds: AuctionIds;
}
export interface GetAuctionsByItemRequest {
    contract: string;
    tokenId: string;
    seller?: string;
    sort?: AuctionSort;
    origin?: string;
    status?: Array<AuctionStatus>;
    currencyId?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetAuctionsBySellerRequest {
    seller: string;
    status?: Array<AuctionStatus>;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
/**
 * no description
 */
export declare class AuctionControllerApi extends runtime.BaseAPI {
    /**
     * Returns auction bids by the auction hash
     */
    getAuctionBidsByHashRaw(requestParameters: GetAuctionBidsByHashRequest): Promise<GetAuctionBidsByHashResponse>;
    /**
     * Returns auction bids by the auction hash
     */
    getAuctionBidsByHash(requestParameters: GetAuctionBidsByHashRequest): Promise<AuctionBidsPagination>;
    /**
     * Returns the auction by hash
     */
    getAuctionByHashRaw(requestParameters: GetAuctionByHashRequest): Promise<GetAuctionByHashResponse>;
    /**
     * Returns the auction by hash
     */
    getAuctionByHash(requestParameters: GetAuctionByHashRequest): Promise<Auction>;
    /**
     * Returns all auctions by specified parameters
     */
    getAuctionsAllRaw(requestParameters: GetAuctionsAllRequest): Promise<GetAuctionsAllResponse>;
    /**
     * Returns all auctions by specified parameters
     */
    getAuctionsAll(requestParameters: GetAuctionsAllRequest): Promise<AuctionsPagination>;
    /**
     * Returns all auctions by collection
     */
    getAuctionsByCollectionRaw(requestParameters: GetAuctionsByCollectionRequest): Promise<GetAuctionsByCollectionResponse>;
    /**
     * Returns all auctions by collection
     */
    getAuctionsByCollection(requestParameters: GetAuctionsByCollectionRequest): Promise<AuctionsPagination>;
    /**
     * Returns all auctions by auction hash
     */
    getAuctionsByIdsRaw(requestParameters: GetAuctionsByIdsRequest): Promise<GetAuctionsByIdsResponse>;
    /**
     * Returns all auctions by auction hash
     */
    getAuctionsByIds(requestParameters: GetAuctionsByIdsRequest): Promise<Array<Auction>>;
    /**
     * Returns all auctions by item
     */
    getAuctionsByItemRaw(requestParameters: GetAuctionsByItemRequest): Promise<GetAuctionsByItemResponse>;
    /**
     * Returns all auctions by item
     */
    getAuctionsByItem(requestParameters: GetAuctionsByItemRequest): Promise<AuctionsPagination>;
    /**
     * Returns all auctions by seller
     */
    getAuctionsBySellerRaw(requestParameters: GetAuctionsBySellerRequest): Promise<GetAuctionsBySellerResponse>;
    /**
     * Returns all auctions by seller
     */
    getAuctionsBySeller(requestParameters: GetAuctionsBySellerRequest): Promise<AuctionsPagination>;
}
export declare type GetAuctionBidsByHash200 = {
    status: 200;
    value: AuctionBidsPagination;
};
export declare type GetAuctionBidsByHash404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type GetAuctionBidsByHash400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetAuctionBidsByHash500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetAuctionBidsByHashResponse = GetAuctionBidsByHash200 | GetAuctionBidsByHash404 | GetAuctionBidsByHash400 | GetAuctionBidsByHash500;
export declare type GetAuctionByHash200 = {
    status: 200;
    value: Auction;
};
export declare type GetAuctionByHash404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type GetAuctionByHash400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetAuctionByHash500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetAuctionByHashResponse = GetAuctionByHash200 | GetAuctionByHash404 | GetAuctionByHash400 | GetAuctionByHash500;
export declare type GetAuctionsAll200 = {
    status: 200;
    value: AuctionsPagination;
};
export declare type GetAuctionsAll400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetAuctionsAll500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetAuctionsAllResponse = GetAuctionsAll200 | GetAuctionsAll400 | GetAuctionsAll500;
export declare type GetAuctionsByCollection200 = {
    status: 200;
    value: AuctionsPagination;
};
export declare type GetAuctionsByCollection400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetAuctionsByCollection500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetAuctionsByCollectionResponse = GetAuctionsByCollection200 | GetAuctionsByCollection400 | GetAuctionsByCollection500;
export declare type GetAuctionsByIds200 = {
    status: 200;
    value: Array<Auction>;
};
export declare type GetAuctionsByIds400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetAuctionsByIds500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetAuctionsByIdsResponse = GetAuctionsByIds200 | GetAuctionsByIds400 | GetAuctionsByIds500;
export declare type GetAuctionsByItem200 = {
    status: 200;
    value: AuctionsPagination;
};
export declare type GetAuctionsByItem400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetAuctionsByItem500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetAuctionsByItemResponse = GetAuctionsByItem200 | GetAuctionsByItem400 | GetAuctionsByItem500;
export declare type GetAuctionsBySeller200 = {
    status: 200;
    value: AuctionsPagination;
};
export declare type GetAuctionsBySeller400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetAuctionsBySeller500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetAuctionsBySellerResponse = GetAuctionsBySeller200 | GetAuctionsBySeller400 | GetAuctionsBySeller500;
