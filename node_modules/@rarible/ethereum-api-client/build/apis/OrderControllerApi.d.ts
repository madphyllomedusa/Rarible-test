/**
 * OpenAPI definition
 * Indexers use OpenAPI to describe APIs (and events). Clients (Kotlin, TypeScript, etc.) and server controller interfaces automatically generated using YAML OpenAPI files.
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { EthereumApiErrorBadRequest, EthereumApiErrorEntityNotFound, EthereumApiErrorServerError, EthereumOrderUpdateApiError, Order, OrderCurrencies, OrderForm, OrderIds, OrderSort, OrderStatus, OrdersPagination, Platform, PrepareOrderTxForm, PrepareOrderTxResponse, PreparedOrderTx } from '../models';
export interface BuyerFeeSignatureRequest {
    fee: number;
    orderForm: OrderForm;
}
export interface GetCurrenciesByBidOrdersOfItemRequest {
    contract: string;
    tokenId: string;
}
export interface GetCurrenciesBySellOrdersOfItemRequest {
    contract: string;
    tokenId: string;
}
export interface GetOrderBidsByItemRequest {
    contract: string;
    tokenId: string;
    maker?: Array<string>;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetOrderBidsByItemAndByStatusRequest {
    contract: string;
    tokenId: string;
    status: Array<OrderStatus>;
    maker?: Array<string>;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    currencyId?: string;
    startDate?: number;
    endDate?: number;
}
export interface GetOrderBidsByMakerRequest {
    maker: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetOrderBidsByMakerAndByStatusRequest {
    maker: string;
    status: Array<OrderStatus>;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    startDate?: number;
    endDate?: number;
}
export interface GetOrderByHashRequest {
    hash: string;
}
export interface GetOrdersAllRequest {
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetOrdersAllByStatusRequest {
    sort?: OrderSort;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
}
export interface GetOrdersByIdsRequest {
    orderIds: OrderIds;
}
export interface GetSellOrdersRequest {
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetSellOrdersByCollectionRequest {
    collection: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetSellOrdersByCollectionAndByStatusRequest {
    collection: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
}
export interface GetSellOrdersByItemRequest {
    contract: string;
    tokenId: string;
    maker?: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetSellOrdersByItemAndByStatusRequest {
    contract: string;
    tokenId: string;
    maker?: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
    currencyId?: string;
}
export interface GetSellOrdersByMakerRequest {
    maker: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetSellOrdersByMakerAndByStatusRequest {
    maker: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
}
export interface GetSellOrdersByStatusRequest {
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
    sort?: OrderSort;
}
export interface PrepareOrderCancelTransactionRequest {
    hash: string;
}
export interface PrepareOrderTransactionRequest {
    hash: string;
    prepareOrderTxForm: PrepareOrderTxForm;
}
export interface UpdateOrderMakeStockRequest {
    hash: string;
}
export interface UpsertOrderRequest {
    orderForm: OrderForm;
}
/**
 * no description
 */
export declare class OrderControllerApi extends runtime.BaseAPI {
    /**
     * Buyer\'s signature for a fee
     */
    buyerFeeSignatureRaw(requestParameters: BuyerFeeSignatureRequest): Promise<BuyerFeeSignatureResponse>;
    /**
     * Buyer\'s signature for a fee
     */
    buyerFeeSignature(requestParameters: BuyerFeeSignatureRequest): Promise<string>;
    /**
     * Returns currencies made as payment in all bid orders of the item
     */
    getCurrenciesByBidOrdersOfItemRaw(requestParameters: GetCurrenciesByBidOrdersOfItemRequest): Promise<GetCurrenciesByBidOrdersOfItemResponse>;
    /**
     * Returns currencies made as payment in all bid orders of the item
     */
    getCurrenciesByBidOrdersOfItem(requestParameters: GetCurrenciesByBidOrdersOfItemRequest): Promise<OrderCurrencies>;
    /**
     * Returns currencies taken as payment in all sell orders of the item
     */
    getCurrenciesBySellOrdersOfItemRaw(requestParameters: GetCurrenciesBySellOrdersOfItemRequest): Promise<GetCurrenciesBySellOrdersOfItemResponse>;
    /**
     * Returns currencies taken as payment in all sell orders of the item
     */
    getCurrenciesBySellOrdersOfItem(requestParameters: GetCurrenciesBySellOrdersOfItemRequest): Promise<OrderCurrencies>;
    /**
     * Returns all order bids by item
     */
    getOrderBidsByItemRaw(requestParameters: GetOrderBidsByItemRequest): Promise<GetOrderBidsByItemResponse>;
    /**
     * Returns all order bids by item
     */
    getOrderBidsByItem(requestParameters: GetOrderBidsByItemRequest): Promise<OrdersPagination>;
    /**
     * Returns all order bids by item and order status
     */
    getOrderBidsByItemAndByStatusRaw(requestParameters: GetOrderBidsByItemAndByStatusRequest): Promise<GetOrderBidsByItemAndByStatusResponse>;
    /**
     * Returns all order bids by item and order status
     */
    getOrderBidsByItemAndByStatus(requestParameters: GetOrderBidsByItemAndByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns all order bids by maker
     */
    getOrderBidsByMakerRaw(requestParameters: GetOrderBidsByMakerRequest): Promise<GetOrderBidsByMakerResponse>;
    /**
     * Returns all order bids by maker
     */
    getOrderBidsByMaker(requestParameters: GetOrderBidsByMakerRequest): Promise<OrdersPagination>;
    /**
     * Returns all order bids by maker and order status
     */
    getOrderBidsByMakerAndByStatusRaw(requestParameters: GetOrderBidsByMakerAndByStatusRequest): Promise<GetOrderBidsByMakerAndByStatusResponse>;
    /**
     * Returns all order bids by maker and order status
     */
    getOrderBidsByMakerAndByStatus(requestParameters: GetOrderBidsByMakerAndByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns the order by order hash
     */
    getOrderByHashRaw(requestParameters: GetOrderByHashRequest): Promise<GetOrderByHashResponse>;
    /**
     * Returns the order by order hash
     */
    getOrderByHash(requestParameters: GetOrderByHashRequest): Promise<Order>;
    /**
     * Returns all orders by specified parameters
     */
    getOrdersAllRaw(requestParameters: GetOrdersAllRequest): Promise<GetOrdersAllResponse>;
    /**
     * Returns all orders by specified parameters
     */
    getOrdersAll(requestParameters: GetOrdersAllRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders with status sorting
     */
    getOrdersAllByStatusRaw(requestParameters: GetOrdersAllByStatusRequest): Promise<GetOrdersAllByStatusResponse>;
    /**
     * Returns all orders with status sorting
     */
    getOrdersAllByStatus(requestParameters: GetOrdersAllByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders by order hash
     */
    getOrdersByIdsRaw(requestParameters: GetOrdersByIdsRequest): Promise<GetOrdersByIdsResponse>;
    /**
     * Returns all orders by order hash
     */
    getOrdersByIds(requestParameters: GetOrdersByIdsRequest): Promise<Array<Order>>;
    /**
     * Returns all orders for sale by specified parameters
     */
    getSellOrdersRaw(requestParameters: GetSellOrdersRequest): Promise<GetSellOrdersResponse>;
    /**
     * Returns all orders for sale by specified parameters
     */
    getSellOrders(requestParameters: GetSellOrdersRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by collection
     */
    getSellOrdersByCollectionRaw(requestParameters: GetSellOrdersByCollectionRequest): Promise<GetSellOrdersByCollectionResponse>;
    /**
     * Returns all orders for sale by collection
     */
    getSellOrdersByCollection(requestParameters: GetSellOrdersByCollectionRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by collection and order status
     */
    getSellOrdersByCollectionAndByStatusRaw(requestParameters: GetSellOrdersByCollectionAndByStatusRequest): Promise<GetSellOrdersByCollectionAndByStatusResponse>;
    /**
     * Returns all orders for sale by collection and order status
     */
    getSellOrdersByCollectionAndByStatus(requestParameters: GetSellOrdersByCollectionAndByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by item
     */
    getSellOrdersByItemRaw(requestParameters: GetSellOrdersByItemRequest): Promise<GetSellOrdersByItemResponse>;
    /**
     * Returns all orders for sale by item
     */
    getSellOrdersByItem(requestParameters: GetSellOrdersByItemRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by item and order status
     */
    getSellOrdersByItemAndByStatusRaw(requestParameters: GetSellOrdersByItemAndByStatusRequest): Promise<GetSellOrdersByItemAndByStatusResponse>;
    /**
     * Returns all orders for sale by item and order status
     */
    getSellOrdersByItemAndByStatus(requestParameters: GetSellOrdersByItemAndByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by maker
     */
    getSellOrdersByMakerRaw(requestParameters: GetSellOrdersByMakerRequest): Promise<GetSellOrdersByMakerResponse>;
    /**
     * Returns all orders for sale by maker
     */
    getSellOrdersByMaker(requestParameters: GetSellOrdersByMakerRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by maker and order status
     */
    getSellOrdersByMakerAndByStatusRaw(requestParameters: GetSellOrdersByMakerAndByStatusRequest): Promise<GetSellOrdersByMakerAndByStatusResponse>;
    /**
     * Returns all orders for sale by maker and order status
     */
    getSellOrdersByMakerAndByStatus(requestParameters: GetSellOrdersByMakerAndByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by order status
     */
    getSellOrdersByStatusRaw(requestParameters: GetSellOrdersByStatusRequest): Promise<GetSellOrdersByStatusResponse>;
    /**
     * Returns all orders for sale by order status
     */
    getSellOrdersByStatus(requestParameters: GetSellOrdersByStatusRequest): Promise<OrdersPagination>;
    /**
     * Prepare order for cancel transaction
     */
    prepareOrderCancelTransactionRaw(requestParameters: PrepareOrderCancelTransactionRequest): Promise<PrepareOrderCancelTransactionResponse>;
    /**
     * Prepare order for cancel transaction
     */
    prepareOrderCancelTransaction(requestParameters: PrepareOrderCancelTransactionRequest): Promise<PreparedOrderTx>;
    /**
     * Prepare order transaction. Deprecated. Use Rarible Protocol Ethereum SDK https://github.com/rarible/ethereum-sdk/tree/master
     */
    prepareOrderTransactionRaw(requestParameters: PrepareOrderTransactionRequest): Promise<PrepareOrderTransactionResponse>;
    /**
     * Prepare order transaction. Deprecated. Use Rarible Protocol Ethereum SDK https://github.com/rarible/ethereum-sdk/tree/master
     */
    prepareOrderTransaction(requestParameters: PrepareOrderTransactionRequest): Promise<PrepareOrderTxResponse>;
    /**
     * Update stock of the order by order hash
     */
    updateOrderMakeStockRaw(requestParameters: UpdateOrderMakeStockRequest): Promise<UpdateOrderMakeStockResponse>;
    /**
     * Update stock of the order by order hash
     */
    updateOrderMakeStock(requestParameters: UpdateOrderMakeStockRequest): Promise<Order>;
    /**
     * Create or update order
     */
    upsertOrderRaw(requestParameters: UpsertOrderRequest): Promise<UpsertOrderResponse>;
    /**
     * Create or update order
     */
    upsertOrder(requestParameters: UpsertOrderRequest): Promise<Order>;
}
export declare type BuyerFeeSignature200 = {
    status: 200;
    value: string;
};
export declare type BuyerFeeSignature400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type BuyerFeeSignature500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type BuyerFeeSignatureResponse = BuyerFeeSignature200 | BuyerFeeSignature400 | BuyerFeeSignature500;
export declare type GetCurrenciesByBidOrdersOfItem200 = {
    status: 200;
    value: OrderCurrencies;
};
export declare type GetCurrenciesByBidOrdersOfItem400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetCurrenciesByBidOrdersOfItem500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetCurrenciesByBidOrdersOfItemResponse = GetCurrenciesByBidOrdersOfItem200 | GetCurrenciesByBidOrdersOfItem400 | GetCurrenciesByBidOrdersOfItem500;
export declare type GetCurrenciesBySellOrdersOfItem200 = {
    status: 200;
    value: OrderCurrencies;
};
export declare type GetCurrenciesBySellOrdersOfItem400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetCurrenciesBySellOrdersOfItem500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetCurrenciesBySellOrdersOfItemResponse = GetCurrenciesBySellOrdersOfItem200 | GetCurrenciesBySellOrdersOfItem400 | GetCurrenciesBySellOrdersOfItem500;
export declare type GetOrderBidsByItem200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetOrderBidsByItem400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetOrderBidsByItem500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetOrderBidsByItemResponse = GetOrderBidsByItem200 | GetOrderBidsByItem400 | GetOrderBidsByItem500;
export declare type GetOrderBidsByItemAndByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetOrderBidsByItemAndByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetOrderBidsByItemAndByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetOrderBidsByItemAndByStatusResponse = GetOrderBidsByItemAndByStatus200 | GetOrderBidsByItemAndByStatus400 | GetOrderBidsByItemAndByStatus500;
export declare type GetOrderBidsByMaker200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetOrderBidsByMaker400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetOrderBidsByMaker500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetOrderBidsByMakerResponse = GetOrderBidsByMaker200 | GetOrderBidsByMaker400 | GetOrderBidsByMaker500;
export declare type GetOrderBidsByMakerAndByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetOrderBidsByMakerAndByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetOrderBidsByMakerAndByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetOrderBidsByMakerAndByStatusResponse = GetOrderBidsByMakerAndByStatus200 | GetOrderBidsByMakerAndByStatus400 | GetOrderBidsByMakerAndByStatus500;
export declare type GetOrderByHash200 = {
    status: 200;
    value: Order;
};
export declare type GetOrderByHash404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type GetOrderByHash400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetOrderByHash500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetOrderByHashResponse = GetOrderByHash200 | GetOrderByHash404 | GetOrderByHash400 | GetOrderByHash500;
export declare type GetOrdersAll200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetOrdersAll400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetOrdersAll500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetOrdersAllResponse = GetOrdersAll200 | GetOrdersAll400 | GetOrdersAll500;
export declare type GetOrdersAllByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetOrdersAllByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetOrdersAllByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetOrdersAllByStatusResponse = GetOrdersAllByStatus200 | GetOrdersAllByStatus400 | GetOrdersAllByStatus500;
export declare type GetOrdersByIds200 = {
    status: 200;
    value: Array<Order>;
};
export declare type GetOrdersByIds400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetOrdersByIds500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetOrdersByIdsResponse = GetOrdersByIds200 | GetOrdersByIds400 | GetOrdersByIds500;
export declare type GetSellOrders200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrders400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetSellOrders500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetSellOrdersResponse = GetSellOrders200 | GetSellOrders400 | GetSellOrders500;
export declare type GetSellOrdersByCollection200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrdersByCollection400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetSellOrdersByCollection500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetSellOrdersByCollectionResponse = GetSellOrdersByCollection200 | GetSellOrdersByCollection400 | GetSellOrdersByCollection500;
export declare type GetSellOrdersByCollectionAndByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrdersByCollectionAndByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetSellOrdersByCollectionAndByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetSellOrdersByCollectionAndByStatusResponse = GetSellOrdersByCollectionAndByStatus200 | GetSellOrdersByCollectionAndByStatus400 | GetSellOrdersByCollectionAndByStatus500;
export declare type GetSellOrdersByItem200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrdersByItem400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetSellOrdersByItem500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetSellOrdersByItemResponse = GetSellOrdersByItem200 | GetSellOrdersByItem400 | GetSellOrdersByItem500;
export declare type GetSellOrdersByItemAndByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrdersByItemAndByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetSellOrdersByItemAndByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetSellOrdersByItemAndByStatusResponse = GetSellOrdersByItemAndByStatus200 | GetSellOrdersByItemAndByStatus400 | GetSellOrdersByItemAndByStatus500;
export declare type GetSellOrdersByMaker200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrdersByMaker400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetSellOrdersByMaker500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetSellOrdersByMakerResponse = GetSellOrdersByMaker200 | GetSellOrdersByMaker400 | GetSellOrdersByMaker500;
export declare type GetSellOrdersByMakerAndByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrdersByMakerAndByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetSellOrdersByMakerAndByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetSellOrdersByMakerAndByStatusResponse = GetSellOrdersByMakerAndByStatus200 | GetSellOrdersByMakerAndByStatus400 | GetSellOrdersByMakerAndByStatus500;
export declare type GetSellOrdersByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrdersByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetSellOrdersByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetSellOrdersByStatusResponse = GetSellOrdersByStatus200 | GetSellOrdersByStatus400 | GetSellOrdersByStatus500;
export declare type PrepareOrderCancelTransaction200 = {
    status: 200;
    value: PreparedOrderTx;
};
export declare type PrepareOrderCancelTransaction404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type PrepareOrderCancelTransaction400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type PrepareOrderCancelTransaction500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type PrepareOrderCancelTransactionResponse = PrepareOrderCancelTransaction200 | PrepareOrderCancelTransaction404 | PrepareOrderCancelTransaction400 | PrepareOrderCancelTransaction500;
export declare type PrepareOrderTransaction200 = {
    status: 200;
    value: PrepareOrderTxResponse;
};
export declare type PrepareOrderTransaction404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type PrepareOrderTransaction400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type PrepareOrderTransaction500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type PrepareOrderTransactionResponse = PrepareOrderTransaction200 | PrepareOrderTransaction404 | PrepareOrderTransaction400 | PrepareOrderTransaction500;
export declare type UpdateOrderMakeStock200 = {
    status: 200;
    value: Order;
};
export declare type UpdateOrderMakeStock404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type UpdateOrderMakeStock400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type UpdateOrderMakeStock500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type UpdateOrderMakeStockResponse = UpdateOrderMakeStock200 | UpdateOrderMakeStock404 | UpdateOrderMakeStock400 | UpdateOrderMakeStock500;
export declare type UpsertOrder200 = {
    status: 200;
    value: Order;
};
export declare type UpsertOrder400 = {
    status: 400;
    value: EthereumOrderUpdateApiError;
};
export declare type UpsertOrder500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type UpsertOrderResponse = UpsertOrder200 | UpsertOrder400 | UpsertOrder500;
