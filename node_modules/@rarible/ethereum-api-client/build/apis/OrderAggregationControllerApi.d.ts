/**
 * OpenAPI definition
 * Indexers use OpenAPI to describe APIs (and events). Clients (Kotlin, TypeScript, etc.) and server controller interfaces automatically generated using YAML OpenAPI files.
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AggregationData, EthereumApiErrorBadRequest, EthereumApiErrorEntityNotFound, EthereumApiErrorServerError, OrderCollectionStats, Platform } from '../models';
export interface AggregateNftCollectionStatsRequest {
    collection: string;
    currency?: string;
}
export interface AggregateNftPurchaseByCollectionRequest {
    startDate: number;
    endDate: number;
    size?: number;
    source?: Platform;
}
export interface AggregateNftPurchaseByTakerRequest {
    startDate: number;
    endDate: number;
    size?: number;
    source?: Platform;
}
export interface AggregateNftSellByMakerRequest {
    startDate: number;
    endDate: number;
    size?: number;
    source?: Platform;
}
/**
 * no description
 */
export declare class OrderAggregationControllerApi extends runtime.BaseAPI {
    /**
     */
    aggregateNftCollectionStatsRaw(requestParameters: AggregateNftCollectionStatsRequest): Promise<AggregateNftCollectionStatsResponse>;
    /**
     */
    aggregateNftCollectionStats(requestParameters: AggregateNftCollectionStatsRequest): Promise<OrderCollectionStats>;
    /**
     * Aggregate NFT purchase by collection
     */
    aggregateNftPurchaseByCollectionRaw(requestParameters: AggregateNftPurchaseByCollectionRequest): Promise<AggregateNftPurchaseByCollectionResponse>;
    /**
     * Aggregate NFT purchase by collection
     */
    aggregateNftPurchaseByCollection(requestParameters: AggregateNftPurchaseByCollectionRequest): Promise<Array<AggregationData>>;
    /**
     * Aggregate NFT purchase by taker
     */
    aggregateNftPurchaseByTakerRaw(requestParameters: AggregateNftPurchaseByTakerRequest): Promise<AggregateNftPurchaseByTakerResponse>;
    /**
     * Aggregate NFT purchase by taker
     */
    aggregateNftPurchaseByTaker(requestParameters: AggregateNftPurchaseByTakerRequest): Promise<Array<AggregationData>>;
    /**
     * Aggregate NFT sell order by maker
     */
    aggregateNftSellByMakerRaw(requestParameters: AggregateNftSellByMakerRequest): Promise<AggregateNftSellByMakerResponse>;
    /**
     * Aggregate NFT sell order by maker
     */
    aggregateNftSellByMaker(requestParameters: AggregateNftSellByMakerRequest): Promise<Array<AggregationData>>;
}
export declare type AggregateNftCollectionStats200 = {
    status: 200;
    value: OrderCollectionStats;
};
export declare type AggregateNftCollectionStats404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type AggregateNftCollectionStats400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type AggregateNftCollectionStats500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type AggregateNftCollectionStatsResponse = AggregateNftCollectionStats200 | AggregateNftCollectionStats404 | AggregateNftCollectionStats400 | AggregateNftCollectionStats500;
export declare type AggregateNftPurchaseByCollection200 = {
    status: 200;
    value: Array<AggregationData>;
};
export declare type AggregateNftPurchaseByCollection400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type AggregateNftPurchaseByCollection500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type AggregateNftPurchaseByCollectionResponse = AggregateNftPurchaseByCollection200 | AggregateNftPurchaseByCollection400 | AggregateNftPurchaseByCollection500;
export declare type AggregateNftPurchaseByTaker200 = {
    status: 200;
    value: Array<AggregationData>;
};
export declare type AggregateNftPurchaseByTaker400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type AggregateNftPurchaseByTaker500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type AggregateNftPurchaseByTakerResponse = AggregateNftPurchaseByTaker200 | AggregateNftPurchaseByTaker400 | AggregateNftPurchaseByTaker500;
export declare type AggregateNftSellByMaker200 = {
    status: 200;
    value: Array<AggregationData>;
};
export declare type AggregateNftSellByMaker400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type AggregateNftSellByMaker500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type AggregateNftSellByMakerResponse = AggregateNftSellByMaker200 | AggregateNftSellByMaker400 | AggregateNftSellByMaker500;
