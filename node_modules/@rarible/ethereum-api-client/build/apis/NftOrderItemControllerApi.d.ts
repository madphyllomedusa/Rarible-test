/**
 * OpenAPI definition
 * Indexers use OpenAPI to describe APIs (and events). Clients (Kotlin, TypeScript, etc.) and server controller interfaces automatically generated using YAML OpenAPI files.
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { EthereumApiErrorBadRequest, EthereumApiErrorEntityNotFound, EthereumApiErrorServerError, LazyNft, NftItemMeta, NftOrderItem, NftOrderItemsPage } from '../models';
export interface GetNftOrderAllItemsRequest {
    continuation?: string;
    size?: number;
    showDeleted?: boolean;
    lastUpdatedFrom?: number;
    lastUpdatedTo?: number;
}
export interface GetNftOrderItemByIdRequest {
    itemId: string;
}
export interface GetNftOrderItemMetaByIdRequest {
    itemId: string;
}
export interface GetNftOrderItemsByCollectionRequest {
    collection: string;
    continuation?: string;
    size?: number;
}
export interface GetNftOrderItemsByCreatorRequest {
    creator: string;
    continuation?: string;
    size?: number;
}
export interface GetNftOrderItemsByOwnerRequest {
    owner: string;
    continuation?: string;
    size?: number;
}
export interface GetNftOrderLazyItemByIdRequest {
    itemId: string;
}
/**
 * no description
 */
export declare class NftOrderItemControllerApi extends runtime.BaseAPI {
    /**
     * Returns all orders
     */
    getNftOrderAllItemsRaw(requestParameters: GetNftOrderAllItemsRequest): Promise<GetNftOrderAllItemsResponse>;
    /**
     * Returns all orders
     */
    getNftOrderAllItems(requestParameters: GetNftOrderAllItemsRequest): Promise<NftOrderItemsPage>;
    /**
     * Returns order item by item identifier
     */
    getNftOrderItemByIdRaw(requestParameters: GetNftOrderItemByIdRequest): Promise<GetNftOrderItemByIdResponse>;
    /**
     * Returns order item by item identifier
     */
    getNftOrderItemById(requestParameters: GetNftOrderItemByIdRequest): Promise<NftOrderItem>;
    /**
     * Returns order item meta by item identifier
     */
    getNftOrderItemMetaByIdRaw(requestParameters: GetNftOrderItemMetaByIdRequest): Promise<GetNftOrderItemMetaByIdResponse>;
    /**
     * Returns order item meta by item identifier
     */
    getNftOrderItemMetaById(requestParameters: GetNftOrderItemMetaByIdRequest): Promise<NftItemMeta>;
    /**
     * Returns order items by collection address
     */
    getNftOrderItemsByCollectionRaw(requestParameters: GetNftOrderItemsByCollectionRequest): Promise<GetNftOrderItemsByCollectionResponse>;
    /**
     * Returns order items by collection address
     */
    getNftOrderItemsByCollection(requestParameters: GetNftOrderItemsByCollectionRequest): Promise<NftOrderItemsPage>;
    /**
     * Returns order items by creator
     */
    getNftOrderItemsByCreatorRaw(requestParameters: GetNftOrderItemsByCreatorRequest): Promise<GetNftOrderItemsByCreatorResponse>;
    /**
     * Returns order items by creator
     */
    getNftOrderItemsByCreator(requestParameters: GetNftOrderItemsByCreatorRequest): Promise<NftOrderItemsPage>;
    /**
     * Returns order items by owner
     */
    getNftOrderItemsByOwnerRaw(requestParameters: GetNftOrderItemsByOwnerRequest): Promise<GetNftOrderItemsByOwnerResponse>;
    /**
     * Returns order items by owner
     */
    getNftOrderItemsByOwner(requestParameters: GetNftOrderItemsByOwnerRequest): Promise<NftOrderItemsPage>;
    /**
     * Returns lazy order item by item identifier
     */
    getNftOrderLazyItemByIdRaw(requestParameters: GetNftOrderLazyItemByIdRequest): Promise<GetNftOrderLazyItemByIdResponse>;
    /**
     * Returns lazy order item by item identifier
     */
    getNftOrderLazyItemById(requestParameters: GetNftOrderLazyItemByIdRequest): Promise<LazyNft>;
}
export declare type GetNftOrderAllItems200 = {
    status: 200;
    value: NftOrderItemsPage;
};
export declare type GetNftOrderAllItems400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftOrderAllItems500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftOrderAllItemsResponse = GetNftOrderAllItems200 | GetNftOrderAllItems400 | GetNftOrderAllItems500;
export declare type GetNftOrderItemById200 = {
    status: 200;
    value: NftOrderItem;
};
export declare type GetNftOrderItemById404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type GetNftOrderItemById400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftOrderItemById500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftOrderItemByIdResponse = GetNftOrderItemById200 | GetNftOrderItemById404 | GetNftOrderItemById400 | GetNftOrderItemById500;
export declare type GetNftOrderItemMetaById200 = {
    status: 200;
    value: NftItemMeta;
};
export declare type GetNftOrderItemMetaById400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftOrderItemMetaById500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftOrderItemMetaByIdResponse = GetNftOrderItemMetaById200 | GetNftOrderItemMetaById400 | GetNftOrderItemMetaById500;
export declare type GetNftOrderItemsByCollection200 = {
    status: 200;
    value: NftOrderItemsPage;
};
export declare type GetNftOrderItemsByCollection400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftOrderItemsByCollection500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftOrderItemsByCollectionResponse = GetNftOrderItemsByCollection200 | GetNftOrderItemsByCollection400 | GetNftOrderItemsByCollection500;
export declare type GetNftOrderItemsByCreator200 = {
    status: 200;
    value: NftOrderItemsPage;
};
export declare type GetNftOrderItemsByCreator400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftOrderItemsByCreator500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftOrderItemsByCreatorResponse = GetNftOrderItemsByCreator200 | GetNftOrderItemsByCreator400 | GetNftOrderItemsByCreator500;
export declare type GetNftOrderItemsByOwner200 = {
    status: 200;
    value: NftOrderItemsPage;
};
export declare type GetNftOrderItemsByOwner400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftOrderItemsByOwner500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftOrderItemsByOwnerResponse = GetNftOrderItemsByOwner200 | GetNftOrderItemsByOwner400 | GetNftOrderItemsByOwner500;
export declare type GetNftOrderLazyItemById200 = {
    status: 200;
    value: LazyNft;
};
export declare type GetNftOrderLazyItemById404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type GetNftOrderLazyItemById400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftOrderLazyItemById500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftOrderLazyItemByIdResponse = GetNftOrderLazyItemById200 | GetNftOrderLazyItemById404 | GetNftOrderLazyItemById400 | GetNftOrderLazyItemById500;
