/**
 * OpenAPI definition
 * Indexers use OpenAPI to describe APIs (and events). Clients (Kotlin, TypeScript, etc.) and server controller interfaces automatically generated using YAML OpenAPI files.
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AssetType, EncodedOrder, EncodedOrderData, EthereumApiErrorBadRequest, EthereumApiErrorServerError, EthereumOrderDataApiError, OrderData, OrderForm } from '../models';
export interface EncodeOrderRequest {
    orderForm: OrderForm;
}
export interface EncodeOrderAssetTypeRequest {
    assetType: AssetType;
}
export interface EncodeOrderDataRequest {
    orderData: OrderData;
}
/**
 * no description
 */
export declare class OrderEncodeControllerApi extends runtime.BaseAPI {
    /**
     * Deprecated. Use Rarible Protocol Ethereum SDK https://github.com/rarible/ethereum-sdk/tree/master
     */
    encodeOrderRaw(requestParameters: EncodeOrderRequest): Promise<EncodeOrderResponse>;
    /**
     * Deprecated. Use Rarible Protocol Ethereum SDK https://github.com/rarible/ethereum-sdk/tree/master
     */
    encodeOrder(requestParameters: EncodeOrderRequest): Promise<EncodedOrder>;
    /**
     * This method should not be used and will be removed soon
     */
    encodeOrderAssetTypeRaw(requestParameters: EncodeOrderAssetTypeRequest): Promise<EncodeOrderAssetTypeResponse>;
    /**
     * This method should not be used and will be removed soon
     */
    encodeOrderAssetType(requestParameters: EncodeOrderAssetTypeRequest): Promise<EncodedOrderData>;
    /**
     * This method should not be used and will be removed soon
     */
    encodeOrderDataRaw(requestParameters: EncodeOrderDataRequest): Promise<EncodeOrderDataResponse>;
    /**
     * This method should not be used and will be removed soon
     */
    encodeOrderData(requestParameters: EncodeOrderDataRequest): Promise<EncodedOrderData>;
}
export declare type EncodeOrder200 = {
    status: 200;
    value: EncodedOrder;
};
export declare type EncodeOrder400 = {
    status: 400;
    value: EthereumOrderDataApiError;
};
export declare type EncodeOrder500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type EncodeOrderResponse = EncodeOrder200 | EncodeOrder400 | EncodeOrder500;
export declare type EncodeOrderAssetType200 = {
    status: 200;
    value: EncodedOrderData;
};
export declare type EncodeOrderAssetType400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type EncodeOrderAssetType500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type EncodeOrderAssetTypeResponse = EncodeOrderAssetType200 | EncodeOrderAssetType400 | EncodeOrderAssetType500;
export declare type EncodeOrderData200 = {
    status: 200;
    value: EncodedOrderData;
};
export declare type EncodeOrderData400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type EncodeOrderData500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type EncodeOrderDataResponse = EncodeOrderData200 | EncodeOrderData400 | EncodeOrderData500;
