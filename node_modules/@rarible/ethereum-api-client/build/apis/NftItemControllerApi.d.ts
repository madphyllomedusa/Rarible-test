/**
 * OpenAPI definition
 * Indexers use OpenAPI to describe APIs (and events). Clients (Kotlin, TypeScript, etc.) and server controller interfaces automatically generated using YAML OpenAPI files.
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { BurnLazyNftForm, EthereumApiErrorBadRequest, EthereumApiErrorEntityNotFound, EthereumApiErrorServerError, LazyNft, NftItem, NftItemIds, NftItemMeta, NftItemRoyaltyList, NftItems } from '../models';
export interface DeleteLazyMintNftAssetRequest {
    itemId: string;
    burnLazyNftForm: BurnLazyNftForm;
}
export interface GetNftAllItemsRequest {
    continuation?: string;
    size?: number;
    showDeleted?: boolean;
    lastUpdatedFrom?: number;
    lastUpdatedTo?: number;
}
export interface GetNftItemByIdRequest {
    itemId: string;
}
export interface GetNftItemMetaByIdRequest {
    itemId: string;
}
export interface GetNftItemRoyaltyByIdRequest {
    itemId: string;
}
export interface GetNftItemsByCollectionRequest {
    collection: string;
    owner?: string;
    continuation?: string;
    size?: number;
}
export interface GetNftItemsByCreatorRequest {
    creator: string;
    continuation?: string;
    size?: number;
}
export interface GetNftItemsByIdsRequest {
    nftItemIds: NftItemIds;
}
export interface GetNftItemsByOwnerRequest {
    owner: string;
    continuation?: string;
    size?: number;
}
export interface GetNftLazyItemByIdRequest {
    itemId: string;
}
export interface ResetNftItemMetaByIdRequest {
    itemId: string;
}
/**
 * no description
 */
export declare class NftItemControllerApi extends runtime.BaseAPI {
    /**
     * Delete Lazy mint of NFT
     */
    deleteLazyMintNftAssetRaw(requestParameters: DeleteLazyMintNftAssetRequest): Promise<DeleteLazyMintNftAssetResponse>;
    /**
     * Delete Lazy mint of NFT
     */
    deleteLazyMintNftAsset(requestParameters: DeleteLazyMintNftAssetRequest): Promise<void>;
    /**
     * Returns all NFT items
     */
    getNftAllItemsRaw(requestParameters: GetNftAllItemsRequest): Promise<GetNftAllItemsResponse>;
    /**
     * Returns all NFT items
     */
    getNftAllItems(requestParameters: GetNftAllItemsRequest): Promise<NftItems>;
    /**
     * Returns the NFT item by identifier
     */
    getNftItemByIdRaw(requestParameters: GetNftItemByIdRequest): Promise<GetNftItemByIdResponse>;
    /**
     * Returns the NFT item by identifier
     */
    getNftItemById(requestParameters: GetNftItemByIdRequest): Promise<NftItem>;
    /**
     * Deprecated and will be removed. Ethereum Protocol API will not be responsible for loading NFT metadata. Please migrate to Rarible Multichain Protocol (https://docs.rarible.org/) and especially this endpoint - https://api.rarible.org/v0.1/doc#operation/getItemById.
     */
    getNftItemMetaByIdRaw(requestParameters: GetNftItemMetaByIdRequest): Promise<GetNftItemMetaByIdResponse>;
    /**
     * Deprecated and will be removed. Ethereum Protocol API will not be responsible for loading NFT metadata. Please migrate to Rarible Multichain Protocol (https://docs.rarible.org/) and especially this endpoint - https://api.rarible.org/v0.1/doc#operation/getItemById.
     */
    getNftItemMetaById(requestParameters: GetNftItemMetaByIdRequest): Promise<NftItemMeta>;
    /**
     * Returns item royalty by identifier
     */
    getNftItemRoyaltyByIdRaw(requestParameters: GetNftItemRoyaltyByIdRequest): Promise<GetNftItemRoyaltyByIdResponse>;
    /**
     * Returns item royalty by identifier
     */
    getNftItemRoyaltyById(requestParameters: GetNftItemRoyaltyByIdRequest): Promise<NftItemRoyaltyList>;
    /**
     * Returns the NFT items by collection
     */
    getNftItemsByCollectionRaw(requestParameters: GetNftItemsByCollectionRequest): Promise<GetNftItemsByCollectionResponse>;
    /**
     * Returns the NFT items by collection
     */
    getNftItemsByCollection(requestParameters: GetNftItemsByCollectionRequest): Promise<NftItems>;
    /**
     * Returns the NFT item by creator
     */
    getNftItemsByCreatorRaw(requestParameters: GetNftItemsByCreatorRequest): Promise<GetNftItemsByCreatorResponse>;
    /**
     * Returns the NFT item by creator
     */
    getNftItemsByCreator(requestParameters: GetNftItemsByCreatorRequest): Promise<NftItems>;
    /**
     * Returns the NFT item by identifier
     */
    getNftItemsByIdsRaw(requestParameters: GetNftItemsByIdsRequest): Promise<GetNftItemsByIdsResponse>;
    /**
     * Returns the NFT item by identifier
     */
    getNftItemsByIds(requestParameters: GetNftItemsByIdsRequest): Promise<Array<NftItem>>;
    /**
     * Returns the NFT item by owner
     */
    getNftItemsByOwnerRaw(requestParameters: GetNftItemsByOwnerRequest): Promise<GetNftItemsByOwnerResponse>;
    /**
     * Returns the NFT item by owner
     */
    getNftItemsByOwner(requestParameters: GetNftItemsByOwnerRequest): Promise<NftItems>;
    /**
     * Returns the NFT lazy item by identifier
     */
    getNftLazyItemByIdRaw(requestParameters: GetNftLazyItemByIdRequest): Promise<GetNftLazyItemByIdResponse>;
    /**
     * Returns the NFT lazy item by identifier
     */
    getNftLazyItemById(requestParameters: GetNftLazyItemByIdRequest): Promise<LazyNft>;
    /**
     * Deletes the NFT item meta by identifier
     */
    resetNftItemMetaByIdRaw(requestParameters: ResetNftItemMetaByIdRequest): Promise<ResetNftItemMetaByIdResponse>;
    /**
     * Deletes the NFT item meta by identifier
     */
    resetNftItemMetaById(requestParameters: ResetNftItemMetaByIdRequest): Promise<void>;
}
export declare type DeleteLazyMintNftAsset204 = {
    status: 204;
};
export declare type DeleteLazyMintNftAsset400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type DeleteLazyMintNftAsset404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type DeleteLazyMintNftAsset500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type DeleteLazyMintNftAssetResponse = DeleteLazyMintNftAsset204 | DeleteLazyMintNftAsset400 | DeleteLazyMintNftAsset404 | DeleteLazyMintNftAsset500;
export declare type GetNftAllItems200 = {
    status: 200;
    value: NftItems;
};
export declare type GetNftAllItems400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftAllItems500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftAllItemsResponse = GetNftAllItems200 | GetNftAllItems400 | GetNftAllItems500;
export declare type GetNftItemById200 = {
    status: 200;
    value: NftItem;
};
export declare type GetNftItemById404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type GetNftItemById400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftItemById500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftItemByIdResponse = GetNftItemById200 | GetNftItemById404 | GetNftItemById400 | GetNftItemById500;
export declare type GetNftItemMetaById200 = {
    status: 200;
    value: NftItemMeta;
};
export declare type GetNftItemMetaById400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftItemMetaById404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type GetNftItemMetaById500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftItemMetaByIdResponse = GetNftItemMetaById200 | GetNftItemMetaById400 | GetNftItemMetaById404 | GetNftItemMetaById500;
export declare type GetNftItemRoyaltyById200 = {
    status: 200;
    value: NftItemRoyaltyList;
};
export declare type GetNftItemRoyaltyById400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftItemRoyaltyById500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftItemRoyaltyByIdResponse = GetNftItemRoyaltyById200 | GetNftItemRoyaltyById400 | GetNftItemRoyaltyById500;
export declare type GetNftItemsByCollection200 = {
    status: 200;
    value: NftItems;
};
export declare type GetNftItemsByCollection400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftItemsByCollection500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftItemsByCollectionResponse = GetNftItemsByCollection200 | GetNftItemsByCollection400 | GetNftItemsByCollection500;
export declare type GetNftItemsByCreator200 = {
    status: 200;
    value: NftItems;
};
export declare type GetNftItemsByCreator400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftItemsByCreator500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftItemsByCreatorResponse = GetNftItemsByCreator200 | GetNftItemsByCreator400 | GetNftItemsByCreator500;
export declare type GetNftItemsByIds200 = {
    status: 200;
    value: Array<NftItem>;
};
export declare type GetNftItemsByIds400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftItemsByIds500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftItemsByIdsResponse = GetNftItemsByIds200 | GetNftItemsByIds400 | GetNftItemsByIds500;
export declare type GetNftItemsByOwner200 = {
    status: 200;
    value: NftItems;
};
export declare type GetNftItemsByOwner400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftItemsByOwner500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftItemsByOwnerResponse = GetNftItemsByOwner200 | GetNftItemsByOwner400 | GetNftItemsByOwner500;
export declare type GetNftLazyItemById200 = {
    status: 200;
    value: LazyNft;
};
export declare type GetNftLazyItemById404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export declare type GetNftLazyItemById400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type GetNftLazyItemById500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type GetNftLazyItemByIdResponse = GetNftLazyItemById200 | GetNftLazyItemById404 | GetNftLazyItemById400 | GetNftLazyItemById500;
export declare type ResetNftItemMetaById200 = {
    status: 200;
};
export declare type ResetNftItemMetaById400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export declare type ResetNftItemMetaById500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export declare type ResetNftItemMetaByIdResponse = ResetNftItemMetaById200 | ResetNftItemMetaById400 | ResetNftItemMetaById500;
