import { Address } from "@rarible/types";
import { Asset } from "./Asset";
import { BigNumber } from "@rarible/types";
import { Binary } from "@rarible/types";
import { OrderBidStatus } from "./OrderBidStatus";
import { OrderDataLegacy } from "./OrderData";
import { OrderOpenSeaV1DataV1 } from "./OrderData";
import { OrderRaribleV2Data } from "./OrderData";
import { Word } from "@rarible/types";
export declare type OrderBid = LegacyOrderBid | RaribleV2OrderBid | OpenSeaV1OrderBid | CryptoPunksOrderBid;
export declare type LegacyOrderBid = {
    type: "RARIBLE_V1";
    orderHash: Word;
    status: OrderBidStatus;
    maker: Address;
    taker?: Address;
    make: Asset;
    take: Asset;
    makeBalance?: BigNumber;
    makePriceUsd?: BigNumber;
    takePriceUsd?: BigNumber;
    fill: BigNumber;
    makeStock: BigNumber;
    cancelled: boolean;
    salt: Binary;
    signature?: Binary;
    createdAt: string;
    data: OrderDataLegacy;
};
export declare type RaribleV2OrderBid = {
    type: "RARIBLE_V2";
    orderHash: Word;
    status: OrderBidStatus;
    maker: Address;
    taker?: Address;
    make: Asset;
    take: Asset;
    makeBalance?: BigNumber;
    makePriceUsd?: BigNumber;
    takePriceUsd?: BigNumber;
    fill: BigNumber;
    makeStock: BigNumber;
    cancelled: boolean;
    salt: Binary;
    signature?: Binary;
    createdAt: string;
    data: OrderRaribleV2Data;
};
export declare type OpenSeaV1OrderBid = {
    type: "OPEN_SEA_V1";
    orderHash: Word;
    status: OrderBidStatus;
    maker: Address;
    taker?: Address;
    make: Asset;
    take: Asset;
    makeBalance?: BigNumber;
    makePriceUsd?: BigNumber;
    takePriceUsd?: BigNumber;
    fill: BigNumber;
    makeStock: BigNumber;
    cancelled: boolean;
    salt: Binary;
    signature?: Binary;
    createdAt: string;
    data: OrderOpenSeaV1DataV1;
};
export declare type CryptoPunksOrderBid = {
    type: "CRYPTO_PUNKS";
    orderHash: Word;
    status: OrderBidStatus;
    maker: Address;
    taker?: Address;
    make: Asset;
    take: Asset;
    makeBalance?: BigNumber;
    makePriceUsd?: BigNumber;
    takePriceUsd?: BigNumber;
    fill: BigNumber;
    makeStock: BigNumber;
    cancelled: boolean;
    salt: Binary;
    signature?: Binary;
    createdAt: string;
};
