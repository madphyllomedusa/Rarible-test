import { Address } from "@rarible/types";
import { BigNumber } from "@rarible/types";
import { Binary } from "@rarible/types";
import { Part } from "./Part";
export declare type OrderData = OrderRaribleV2Data | OrderDataLegacy | OrderOpenSeaV1DataV1 | OrderCryptoPunksData;
export declare type OrderRaribleV2Data = OrderRaribleV2DataV1 | OrderRaribleV2DataV2;
export declare type OrderRaribleV2DataV1 = {
    dataType: "RARIBLE_V2_DATA_V1";
    payouts: Array<Part>;
    originFees: Array<Part>;
};
export declare type OrderRaribleV2DataV2 = {
    dataType: "RARIBLE_V2_DATA_V2";
    payouts: Array<Part>;
    originFees: Array<Part>;
    isMakeFill: boolean;
};
export declare type OrderDataLegacy = {
    dataType: "LEGACY";
    fee: number;
};
export declare enum OrderOpenSeaV1DataV1FeeMethod {
    PROTOCOL_FEE = "PROTOCOL_FEE",
    SPLIT_FEE = "SPLIT_FEE"
}
export declare enum OrderOpenSeaV1DataV1Side {
    BUY = "BUY",
    SELL = "SELL"
}
export declare enum OrderOpenSeaV1DataV1SaleKind {
    FIXED_PRICE = "FIXED_PRICE",
    DUTCH_AUCTION = "DUTCH_AUCTION"
}
export declare enum OrderOpenSeaV1DataV1HowToCall {
    CALL = "CALL",
    DELEGATE_CALL = "DELEGATE_CALL"
}
export declare type OrderOpenSeaV1DataV1 = {
    dataType: "OPEN_SEA_V1_DATA_V1";
    exchange: Address;
    makerRelayerFee: BigNumber;
    takerRelayerFee: BigNumber;
    makerProtocolFee: BigNumber;
    takerProtocolFee: BigNumber;
    feeRecipient: Address;
    feeMethod: OrderOpenSeaV1DataV1FeeMethod;
    side: OrderOpenSeaV1DataV1Side;
    saleKind: OrderOpenSeaV1DataV1SaleKind;
    howToCall: OrderOpenSeaV1DataV1HowToCall;
    callData: Binary;
    replacementPattern: Binary;
    staticTarget: Address;
    staticExtraData: Binary;
    extra: BigNumber;
    target?: Address;
};
export declare type OrderCryptoPunksData = {
    dataType: "CRYPTO_PUNKS_DATA";
};
