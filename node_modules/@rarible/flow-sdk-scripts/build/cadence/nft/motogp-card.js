"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MotoGPCard = void 0;
exports.MotoGPCard = {
    get_ids: "\nimport NonFungibleToken from 0xNONFUNGIBLETOKEN\nimport MotoGPCard from 0xMOTOGPCARD\n\n// Take MotoGPCard ids by account address\n//\npub fun main(address: Address): [UInt64]? {\n    let collection = getAccount(address)\n        .getCapability(/public/motogpCardCollection)\n        .borrow<&MotoGPCard.Collection{MotoGPCard.ICardCollectionPublic}>()\n        ?? panic(\"NFT Collection not found\")\n    return collection.getIDs()\n}\n",
    borrow_nft: "\nimport NonFungibleToken from 0xNONFUNGIBLETOKEN\nimport MotoGPCard from 0xMOTOGPCARD\n\n// Take MotoGPCard token props by account address and tokenId\n//\npub fun main(address: Address, tokenId: UInt64): &AnyResource {\n    let collection = getAccount(address)\n        .getCapability(/public/motogpCardCollection)\n        .borrow<&MotoGPCard.Collection{MotoGPCard.ICardCollectionPublic}>()\n        ?? panic(\"NFT Collection not found\")\n    return collection.borrowNFT(id: tokenId)\n}\n",
    check: "\nimport NonFungibleToken from 0xNONFUNGIBLETOKEN\n    import MotoGPCard from 0xMOTOGPCARD\n\n    // check MotoGPCard collection is available on given address\n    //\n    pub fun main(address: Address): Bool {\n        return getAccount(address)\n            .getCapability<&MotoGPCard.Collection{MotoGPCard.ICardCollectionPublic}>(/public/motogpCardCollection)\n            .check()\n    }\n",
    setup_account: "\nimport MotoGPCard from 0xMOTOGPCARD\n\n// Setup storage for MotoGPCard on signer account\n//\ntransaction {\n    prepare(acct: AuthAccount) {\n        if acct.borrow<&MotoGPCard.Collection>(from: /storage/motogpCardCollection) == nil {\n            let collection <- MotoGPCard.createEmptyCollection() as! @MotoGPCard.Collection\n            acct.save(<-collection, to: /storage/motogpCardCollection)\n            acct.link<&MotoGPCard.Collection{MotoGPCard.ICardCollectionPublic}>(/public/motogpCardCollection, target: /storage/motogpCardCollection)\n        }\n    }\n}\n",
    transfer: "\nimport NonFungibleToken from 0xNONFUNGIBLETOKEN\nimport MotoGPCard from 0xMOTOGPCARD\n\n// transfer MotoGPCard token with tokenId to given address\n//\ntransaction(tokenId: UInt64, to: Address) {\n    let token: @NonFungibleToken.NFT\n    let receiver: Capability<&MotoGPCard.Collection{MotoGPCard.ICardCollectionPublic}>\n\n    prepare(acct: AuthAccount) {\n        let collection = acct.borrow<&MotoGPCard.Collection>(from: /storage/motogpCardCollection)\n            ?? panic(\"Missing NFT collection on signer account\")\n        self.token <- collection.withdraw(withdrawID: tokenId)\n        self.receiver = getAccount(to).getCapability<&MotoGPCard.Collection{MotoGPCard.ICardCollectionPublic}>(/public/motogpCardCollection)\n    }\n\n    execute {\n        let receiver = self.receiver.borrow()!\n        receiver.deposit(token: <- self.token)\n    }\n}\n",
    burn: "\nimport MotoGPCard from 0xMOTOGPCARD\n\n// Burn MotoGPCard on signer account by tokenId\n//\ntransaction(tokenId: UInt64) {\n    prepare(account: AuthAccount) {\n        let collection = account.borrow<&MotoGPCard.Collection>(from: /storage/motogpCardCollection)!\n        destroy collection.withdraw(withdrawID: tokenId)\n    }\n}\n",
};
