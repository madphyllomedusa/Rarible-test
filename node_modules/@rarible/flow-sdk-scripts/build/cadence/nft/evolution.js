"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Evolution = void 0;
exports.Evolution = {
    get_ids: "\nimport NonFungibleToken from 0xNONFUNGIBLETOKEN\nimport Evolution from 0xEVOLUTION\n\n// Take Evolution ids by account address\n//\npub fun main(address: Address): [UInt64]? {\n    let collection = getAccount(address)\n        .getCapability(/public/f4264ac8f3256818_Evolution_Collection)\n        .borrow<&{Evolution.EvolutionCollectionPublic}>()\n        ?? panic(\"NFT Collection not found\")\n    return collection.getIDs()\n}\n",
    borrow_nft: "\nimport NonFungibleToken from 0xNONFUNGIBLETOKEN\nimport Evolution from 0xEVOLUTION\n\n// Take Evolution token props by account address and tokenId\n//\npub fun main(address: Address, tokenId: UInt64): &AnyResource {\n    let collection = getAccount(address)\n        .getCapability(/public/f4264ac8f3256818_Evolution_Collection)\n        .borrow<&{Evolution.EvolutionCollectionPublic}>()\n        ?? panic(\"NFT Collection not found\")\n    return collection.borrowNFT(id: tokenId)\n}\n",
    check: "\nimport NonFungibleToken from 0xNONFUNGIBLETOKEN\n    import Evolution from 0xEVOLUTION\n\n    // check Evolution collection is available on given address\n    //\n    pub fun main(address: Address): Bool {\n        return getAccount(address)\n            .getCapability<&{Evolution.EvolutionCollectionPublic}>(/public/f4264ac8f3256818_Evolution_Collection)\n            .check()\n    }\n",
    setup_account: "\nimport Evolution from 0xEVOLUTION\n\n// Setup storage for Evolution on signer account\n//\ntransaction {\n    prepare(acct: AuthAccount) {\n        if acct.borrow<&Evolution.Collection>(from: /storage/f4264ac8f3256818_Evolution_Collection) == nil {\n            let collection <- Evolution.createEmptyCollection() as! @Evolution.Collection\n            acct.save(<-collection, to: /storage/f4264ac8f3256818_Evolution_Collection)\n            acct.link<&{Evolution.EvolutionCollectionPublic}>(/public/f4264ac8f3256818_Evolution_Collection, target: /storage/f4264ac8f3256818_Evolution_Collection)\n        }\n    }\n}\n",
    transfer: "\nimport NonFungibleToken from 0xNONFUNGIBLETOKEN\nimport Evolution from 0xEVOLUTION\n\n// transfer Evolution token with tokenId to given address\n//\ntransaction(tokenId: UInt64, to: Address) {\n    let token: @NonFungibleToken.NFT\n    let receiver: Capability<&{Evolution.EvolutionCollectionPublic}>\n\n    prepare(acct: AuthAccount) {\n        let collection = acct.borrow<&Evolution.Collection>(from: /storage/f4264ac8f3256818_Evolution_Collection)\n            ?? panic(\"Missing NFT collection on signer account\")\n        self.token <- collection.withdraw(withdrawID: tokenId)\n        self.receiver = getAccount(to).getCapability<&{Evolution.EvolutionCollectionPublic}>(/public/f4264ac8f3256818_Evolution_Collection)\n    }\n\n    execute {\n        let receiver = self.receiver.borrow()!\n        receiver.deposit(token: <- self.token)\n    }\n}\n",
    burn: "\nimport Evolution from 0xEVOLUTION\n\n// Burn Evolution on signer account by tokenId\n//\ntransaction(tokenId: UInt64) {\n    prepare(account: AuthAccount) {\n        let collection = account.borrow<&Evolution.Collection>(from: /storage/f4264ac8f3256818_Evolution_Collection)!\n        destroy collection.withdraw(withdrawID: tokenId)\n    }\n}\n",
};
